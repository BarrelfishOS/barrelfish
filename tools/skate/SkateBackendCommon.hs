{-
  SkateBackendCommon: Common code backend for Skate

  Part of Skate: a Schema specification languge

  Copyright (c) 2017, ETH Zurich.
  All rights reserved.

  This file is distributed under the terms in the attached LICENSE file.
  If you do not find this file, copies can be found by writing to:
  ETH Zurich D-INFK, Universit\"atstr. 6, CH-8092 Zurich. Attn: Systems Group.
-}


module SkateBackendCommon where


import SkateParser
import SkateTypes
import qualified CAbsSyntax as C

import Data.Char (toUpper, isAlpha)


{-----------------------------------------------------------------------------
- Premable and Imports
------------------------------------------------------------------------------}

skate_c_includepath :: String -> String
skate_c_includepath s = "schemas/" ++ s ++ "_schema.h"

skate_c_preamble :: String -> String -> String -> C.Unit
skate_c_preamble n d f = C.MultiComment [
    "SCHEMA DEFINITION: " ++ (map toUpper d) ++ " (" ++ n ++ ")",
    "",
    "Input File: " ++ f,
    "",
    "Copyright (c) 2017, ETH Zurich.",
    "All rights reserved.",
    "",
    "This file is distributed under the terms in the attached LICENSE",
    "file. If you do not find this file, copies can be found by",
    "writing to:",
    "ETH Zurich D-INFK, Universitaetstr. 6, CH-8092 Zurich.",
    "Attn: Systems Group.",
    "",
    "THIS FILE IS AUTOMATICALLY GENERATED BY SKATE: DO NOT EDIT!"];


{-----------------------------------------------------------------------------
- Name / Identifier conversions
------------------------------------------------------------------------------}


{- converts a qualified identifier (a.b.c) into a valid C name a_b_c -}
identifier_to_cname :: [Char] -> [Char]
identifier_to_cname [] = []
identifier_to_cname (xs:x) =
    if xs == '.' then '_' : identifier_to_cname x
    else xs : identifier_to_cname x

make_type_name :: String -> String
make_type_name s = s ++ "_t"

{-----------------------------------------------------------------------------
- Function signatures
------------------------------------------------------------------------------}

skate_c_fn_name_describe :: String -> String
skate_c_fn_name_describe fn = fn ++ ".describe"

skate_c_fn_name_add :: String -> String
skate_c_fn_name_add fn = fn ++ ".add"

skate_c_fn_name_list :: String -> String
skate_c_fn_name_list fn = fn ++ ".list"
