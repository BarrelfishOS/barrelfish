/** \file
 *  \brief Device Queue message interface
 */

/*
 * Copyright (c) 2016, ETH Zurich.
 * All rights reserved.
 *
 * This file is distributed under the terms in the attached LICENSE file.
 * If you do not find this file, copies can be found by writing to:
 * ETH Zurich D-INFK, Universitaetsstrasse 6, CH-8092 Zurich. Attn: Systems Group.
 */

interface devif "Device Queue Interface" {
    /* Setup before we can create the queue on both sides */
    rpc setup(out uint64 features, out bool reconnect,
              out String name[256]);

    /* Create a device queue */
    rpc create(in cap rx, in uint64 flags, in uint64 size,
               out errval err);
    
    /*
    message create_request(cap rx, uint64 flags, uint64 size);
    message create_reply(errval err);
    */
    /* Destroy a device queue */
    rpc destroy(out errval err);
    
    /* Add a memory region to the device queue 
       cann not use register as name since it will be a problem
       with compiling it */
    rpc reg(in cap mem, in uint64 size, in genpaddr base,
            in uint32 region_id, out errval err);
    
    /* Remove a memory region from the device queue*/
    rpc deregister(in uint32 region_id, in uint64 size, in genpaddr base,
                 out errval err);
    
    /* Control messages to the other end */
    rpc control(in uint64 cmd, in uint64 value, out errval err);    

    /* Notify other end of the queue about new entries */
    message notify(uint8 num_slots);
};
