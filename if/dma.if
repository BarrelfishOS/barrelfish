/*
 * Copyright (c) 2012, ETH Zurich.
 * All rights reserved.
 *
 * This file is distributed under the terms in the attached LICENSE file.
 * If you do not find this file, copies can be found by writing to:
 * ETH Zurich D-INFK, Universitaetsstrasse 6, CH-8092 Zurich. Attn: Systems Group.
 */

interface dma "Generic DMA service interface" {

    typedef uint64 id;
    
	/**
	 * \brief registers a memory region to be used for DMA transfers
	 * 
	 * \param IN  memory    the memory region to register
	 * \param OUT msgerr    the result of the operation
	 * 
	 * Note: either local or remote memory must be registered
	 */
    rpc register_(in cap memory, out errval msgerr);
    

    /**
     * \brief deregisters a memory region to be used for DMA transfers
     * 
     * \param IN  memory    the memory region to register
     * \param OUT msgerr    the result of the operation
     * 
     * Note: either local or remote memory must be registered
     */
    rpc deregister(in cap memory, out errval msgerr);
  
    /**
     * \brief issues a new DMA transfer request to the Xeon Phi DMA controller
     * 
     * \param IN  src    source address for the transfer 
     * \param IN  dsc    destination address of the transfer
     * \param IN  length size of the transfer in bytes
     * \param OUT err    result of the transfer request
     * \param OUT id     returns the id of the transfer
     */
    rpc memcpy(in uint64 src, in uint64 dst, in uint64 length, 
               out errval err, out id id);
    
    /**
     * \brief DMA transfer done notification
     * 
     * \param id    the id of the completed transfer
     * \param err   the result of the transfer
     */
    message done(id id, errval err);
    
};