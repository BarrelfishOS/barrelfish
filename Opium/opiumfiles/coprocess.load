
remote_once(Goal) :- remote_once_Op(Goal).

:- load_decl(opium_primitive(name : remote_once, arg_list : [Goal], arg_type_list : [is_goal], abbrev : r_once, scenario : kernel, implementation : remote_once_Op, message : "Primitive which allows to execute a goal once in the traced session at any \ntime.")).

r_once(Goal) :- remote_once(Goal).

remote_once(Goal, Module) :- remote_once_Op(Goal, Module).

:- load_decl(opium_primitive(name : remote_once, arg_list : [Goal, Module], arg_type_list : [is_goal, atom], abbrev : r_once, scenario : kernel, implementation : remote_once_Op, message : "Primitive which allows to execute a goal once in the traced session at any \ntime, in a given module.")).

r_once(Goal, Module) :- remote_once(Goal, Module).

remote_call_all(Goal) :- remote_call_all_Op(Goal).

:- load_decl(opium_primitive(name : remote_call_all, arg_list : [Goal], arg_type_list : [is_goal], abbrev : r_all, scenario : kernel, implementation : remote_call_all_Op, message : "Primitive which allows to call a goal in the traced session at any time. \nIt gives ALL further solutions on backtracking.  WARNING: if there are \ninfinitely many solutions it does not terminate!")).

r_all(Goal) :- remote_call_all(Goal).

remote_call_all(Goal, Module) :- remote_call_all_Op(Goal, Module).

:- load_decl(opium_primitive(name : remote_call_all, arg_list : [Goal, Module], arg_type_list : [is_goal, atom], abbrev : r_all, scenario : kernel, implementation : remote_call_all_Op, message : "Primitive which allows to call a goal in the traced session at any time, \nin a given module. It gives ALL further solutions on backtracking.  WARNING: \nif there are infinitely many solutions it does not terminate!")).

r_all(Goal, Module) :- remote_call_all(Goal, Module).

remote_call(Goal) :- remote_call_Op(Goal).

:- load_decl(opium_primitive(name : remote_call, arg_list : [Goal], arg_type_list : [is_goal], abbrev : r_call, scenario : kernel, implementation : remote_call_Op, message : "Primitive which allows to call a goal in the traced session. If there \nis an execution running in the traced session, remote_call gives further \nsolutions on backtracking, as long as the execution of the traced goal \ndoes not continue.")).

r_call(Goal) :- remote_call(Goal).

remote_call(Goal, Module) :- remote_call_Op(Goal, Module).

:- load_decl(opium_primitive(name : remote_call, arg_list : [Goal, Module], arg_type_list : [is_goal, atom], abbrev : r_call, scenario : kernel, implementation : remote_call_Op, message : "Primitive which allows to call a goal in the traced session, in a given \nmodule. If there is an execution running in the traced session, remote_call \ngives further solutions on backtracking, as long as the execution of the \ntraced goal does not continue.")).

r_call(Goal, Module) :- remote_call(Goal, Module).

traced_execution_running :- traced_execution_running_Op.

:- load_decl(opium_primitive(name : traced_execution_running, arg_list : [], arg_type_list : [], abbrev : _g19019, scenario : kernel, implementation : traced_execution_running_Op, message : "Primitive which succeeds if there is an execution running in the traced \nsession.")).
