/* BEGIN LICENSE BLOCK
 * Version: CMPL 1.1
 *
 * The contents of this file are subject to the Cisco-style Mozilla Public
 * License Version 1.1 (the "License"); you may not use this file except
 * in compliance with the License.  You may obtain a copy of the License
 * at www.eclipse-clp.org/license.
 * 
 * Software distributed under the License is distributed on an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied.  See
 * the License for the specific language governing rights and limitations
 * under the License. 
 * 
 * The Original Code is  The ECLiPSe Constraint Logic Programming System. 
 * The Initial Developer of the Original Code is  Cisco Systems, Inc. 
 * Portions created by the Initial Developer are
 * Copyright (C) 1989-2006 Cisco Systems, Inc.  All Rights Reserved.
 * 
 * Contributor(s): 
 * 
 * END LICENSE BLOCK */

/*
 * IDENTIFICATION		emu_op_addr.h
 *
 * DESCRIPTION		Array of emulator labels
 *			Used to make gcc label array
 *			Keep this up to date together with
 *			opcode.h and names.h
 */

op_addr[i++] = (vmcode) &&I_Code_end;
op_addr[i++] = (vmcode) &&I_MoveAM;
op_addr[i++] = (vmcode) &&I_MoveAMAM;
op_addr[i++] = (vmcode) &&I_MoveAML;
op_addr[i++] = (vmcode) &&I_MoveLAM;
op_addr[i++] = (vmcode) &&I_MoveTMAM;
op_addr[i++] = (vmcode) &&I_Get_variableNAML;
op_addr[i++] = (vmcode) &&I_Get_valueAMAM;
op_addr[i++] = (vmcode) &&I_Get_valueAML;
op_addr[i++] = (vmcode) &&I_Get_valueAMTM;
op_addr[i++] = (vmcode) &&I_Get_nilAM;
op_addr[i++] = (vmcode) &&I_Get_integerAM;
op_addr[i++] = (vmcode) &&I_Get_floatAM;
op_addr[i++] = (vmcode) &&I_Get_atomAM;
op_addr[i++] = (vmcode) &&I_Get_stringAM;
op_addr[i++] = (vmcode) &&I_Get_listAM;
op_addr[i++] = (vmcode) &&I_Get_structureAM;
op_addr[i++] = (vmcode) &&I_In_get_nilAM;
op_addr[i++] = (vmcode) &&I_In_get_integerAM;
op_addr[i++] = (vmcode) &&I_In_get_floatAM;
op_addr[i++] = (vmcode) &&I_In_get_atomAM;
op_addr[i++] = (vmcode) &&I_In_get_stringAM;
op_addr[i++] = (vmcode) &&I_In_get_listAM;
op_addr[i++] = (vmcode) &&I_In_get_structureAM;
op_addr[i++] = (vmcode) &&I_Out_get_nilAM;
op_addr[i++] = (vmcode) &&I_Out_get_integerAM;
op_addr[i++] = (vmcode) &&I_Out_get_floatAM;
op_addr[i++] = (vmcode) &&I_Out_get_atomAM;
op_addr[i++] = (vmcode) &&I_Out_get_stringAM;
op_addr[i++] = (vmcode) &&I_Out_get_listAM;
op_addr[i++] = (vmcode) &&I_Out_get_structureAM;
op_addr[i++] = (vmcode) &&I_Get_list_argumentsAM;
op_addr[i++] = (vmcode) &&I_Get_structure_argumentsAM;
op_addr[i++] = (vmcode) &&I_Write_void;
op_addr[i++] = (vmcode) &&I_Read_void;
op_addr[i++] = (vmcode) &&I_Write_variable;
op_addr[i++] = (vmcode) &&I_Read_variable;
op_addr[i++] = (vmcode) &&I_Write_variableAM;
op_addr[i++] = (vmcode) &&I_Read_variableAM;
op_addr[i++] = (vmcode) &&I_Write_variableNL;
op_addr[i++] = (vmcode) &&I_Read_variableNL;
op_addr[i++] = (vmcode) &&I_Write_variableL;
op_addr[i++] = (vmcode) &&I_Read_variableL;
op_addr[i++] = (vmcode) &&I_Write_valueAM;
op_addr[i++] = (vmcode) &&I_Read_valueAM;
op_addr[i++] = (vmcode) &&I_Read_matched_valueAM;
op_addr[i++] = (vmcode) &&I_Write_local_valueAM;
op_addr[i++] = (vmcode) &&I_Write_valueL;
op_addr[i++] = (vmcode) &&I_Read_valueL;
op_addr[i++] = (vmcode) &&I_Read_matched_valueL;
op_addr[i++] = (vmcode) &&I_Write_local_valueL;
op_addr[i++] = (vmcode) &&I_Write_valueTM;
op_addr[i++] = (vmcode) &&I_Read_valueTM;
op_addr[i++] = (vmcode) &&I_Read_matched_valueTM;
op_addr[i++] = (vmcode) &&I_Write_local_valueTM;
op_addr[i++] = (vmcode) &&I_Write_nil;
op_addr[i++] = (vmcode) &&I_Read_nil;
op_addr[i++] = (vmcode) &&I_Write_integer;
op_addr[i++] = (vmcode) &&I_Read_integer;
op_addr[i++] = (vmcode) &&I_Write_float;
op_addr[i++] = (vmcode) &&I_Read_float;
op_addr[i++] = (vmcode) &&I_Write_did;
op_addr[i++] = (vmcode) &&I_Read_atom;
op_addr[i++] = (vmcode) &&I_Write_string;
op_addr[i++] = (vmcode) &&I_Read_string;
op_addr[i++] = (vmcode) &&I_Write_list;
op_addr[i++] = (vmcode) &&I_Write_structure;
op_addr[i++] = (vmcode) &&I_Read_list;
op_addr[i++] = (vmcode) &&I_Read_listTM;
op_addr[i++] = (vmcode) &&I_Read_next_listTM;
op_addr[i++] = (vmcode) &&I_Read_last_list;
op_addr[i++] = (vmcode) &&I_Read_structure;
op_addr[i++] = (vmcode) &&I_Read_structureTM;
op_addr[i++] = (vmcode) &&I_Read_next_structureTM;
op_addr[i++] = (vmcode) &&I_Read_last_structure;
op_addr[i++] = (vmcode) &&I_Push_void;
op_addr[i++] = (vmcode) &&I_Push_variableAM;
op_addr[i++] = (vmcode) &&I_Push_variableL;
op_addr[i++] = (vmcode) &&I_Push_variable;
op_addr[i++] = (vmcode) &&I_Push_valueAM;
op_addr[i++] = (vmcode) &&I_Push_valueL;
op_addr[i++] = (vmcode) &&I_Push_valueTM;
op_addr[i++] = (vmcode) &&I_Push_local_valueAM;
op_addr[i++] = (vmcode) &&I_Push_local_valueL;
op_addr[i++] = (vmcode) &&I_Push_local_valueTM;
op_addr[i++] = (vmcode) &&I_Push_nil;
op_addr[i++] = (vmcode) &&I_Push_integer;
op_addr[i++] = (vmcode) &&I_Push_float;
op_addr[i++] = (vmcode) &&I_Push_init_variableL;
op_addr[i++] = (vmcode) &&I_Push_string;
op_addr[i++] = (vmcode) &&I_Push_list;
op_addr[i++] = (vmcode) &&I_Push_structure;
op_addr[i++] = (vmcode) &&I_Bounce;
op_addr[i++] = (vmcode) &&I_First;
op_addr[i++] = (vmcode) &&I_NextTM;
op_addr[i++] = (vmcode) &&I_ModeTM;
op_addr[i++] = (vmcode) &&I_NextTMlab;
op_addr[i++] = (vmcode) &&I_ModeTMlab;
op_addr[i++] = (vmcode) &&I_Put_variableAML;
op_addr[i++] = (vmcode) &&I_Put_variableAM;
op_addr[i++] = (vmcode) &&I_Put_unsafe_valueAML;
op_addr[i++] = (vmcode) &&I_Put_nilAM;
op_addr[i++] = (vmcode) &&I_Put_integerAM;
op_addr[i++] = (vmcode) &&I_Put_floatAM;
op_addr[i++] = (vmcode) &&I_Put_atomAM;
op_addr[i++] = (vmcode) &&I_Put_stringAM;
op_addr[i++] = (vmcode) &&I_Put_listAM;
op_addr[i++] = (vmcode) &&I_Put_structureAM;
op_addr[i++] = (vmcode) &&I_Puts_variable;
op_addr[i++] = (vmcode) &&I_Puts_variableL;
op_addr[i++] = (vmcode) &&I_Puts_valueAM;
op_addr[i++] = (vmcode) &&I_Puts_valueL;
op_addr[i++] = (vmcode) &&I_Puts_valueTM;
op_addr[i++] = (vmcode) &&I_Puts_nil;
op_addr[i++] = (vmcode) &&I_Puts_integer;
op_addr[i++] = (vmcode) &&I_Puts_float;
op_addr[i++] = (vmcode) &&I_Puts_atom;
op_addr[i++] = (vmcode) &&I_Puts_string;
op_addr[i++] = (vmcode) &&I_Puts_list;
op_addr[i++] = (vmcode) &&I_Puts_structure;
op_addr[i++] = (vmcode) &&I_Integer_switchAM;
op_addr[i++] = (vmcode) &&I_Atom_switchAM;
op_addr[i++] = (vmcode) &&I_List_switchAM;
op_addr[i++] = (vmcode) &&I_Functor_switchAM;
op_addr[i++] = (vmcode) &&I_Switch_on_typeAM;
op_addr[i++] = (vmcode) &&I_Atom_switchL;
op_addr[i++] = (vmcode) &&I_Functor_switchL;
op_addr[i++] = (vmcode) &&I_Integer_switchL;
op_addr[i++] = (vmcode) &&I_Try_me_else;
op_addr[i++] = (vmcode) &&I_Try;
op_addr[i++] = (vmcode) &&I_Trylab;
op_addr[i++] = (vmcode) &&I_Retry_me_else;
op_addr[i++] = (vmcode) &&I_Retry;
op_addr[i++] = (vmcode) &&I_Retrylab;
op_addr[i++] = (vmcode) &&I_Trust_me;
op_addr[i++] = (vmcode) &&I_Trust;
op_addr[i++] = (vmcode) &&I_Allocate;
op_addr[i++] = (vmcode) &&I_Space;
op_addr[i++] = (vmcode) &&I_Initialize;
op_addr[i++] = (vmcode) &&I_Branch;
op_addr[i++] = (vmcode) &&I_CallA;
op_addr[i++] = (vmcode) &&I_CallP;
op_addr[i++] = (vmcode) &&I_CallfA;
op_addr[i++] = (vmcode) &&I_CallfP;
op_addr[i++] = (vmcode) &&I_ChainA;
op_addr[i++] = (vmcode) &&I_ChainP;
op_addr[i++] = (vmcode) &&I_ChaincA;
op_addr[i++] = (vmcode) &&I_ChaincP;
op_addr[i++] = (vmcode) &&I_ChaindA;
op_addr[i++] = (vmcode) &&I_ChaindP;
op_addr[i++] = (vmcode) &&I_JmpA;
op_addr[i++] = (vmcode) &&I_JmpP;
op_addr[i++] = (vmcode) &&I_JmpdA;
op_addr[i++] = (vmcode) &&I_JmpdP;
op_addr[i++] = (vmcode) &&I_Exit;
op_addr[i++] = (vmcode) &&I_Exitd;
op_addr[i++] = (vmcode) &&I_Exitc;
op_addr[i++] = (vmcode) &&I_Ret;
op_addr[i++] = (vmcode) &&I_Retd;
op_addr[i++] = (vmcode) &&I_Retn;
op_addr[i++] = (vmcode) &&I_Savecut;
op_addr[i++] = (vmcode) &&I_Neckcut;
op_addr[i++] = (vmcode) &&I_Cut;
op_addr[i++] = (vmcode) &&I_Failure;
op_addr[i++] = (vmcode) &&I_Continue_after_event;
op_addr[i++] = (vmcode) &&I_Continue_after_event_debug;
op_addr[i++] = (vmcode) &&I_Escape;
op_addr[i++] = (vmcode) &&I_List_switchL;
op_addr[i++] = (vmcode) &&I_External;
op_addr[i++] = (vmcode) &&I_Puts_proc;
op_addr[i++] = (vmcode) &&I_Debug_call_simple;
op_addr[i++] = (vmcode) &&I_Gc;
op_addr[i++] = (vmcode) &&I_Debug_exit_simple;
op_addr[i++] = (vmcode) &&I_Refail;
op_addr[i++] = (vmcode) &&I_Exit_emulator;
op_addr[i++] = (vmcode) &&I_Debug_exit;
op_addr[i++] = (vmcode) &&I_Get_matched_valueAML;
op_addr[i++] = (vmcode) &&I_Nop;
op_addr[i++] = (vmcode) &&I_Ress;
op_addr[i++] = (vmcode) &&I_Deallocate;
op_addr[i++] = (vmcode) &&I_Get_constantAM;
op_addr[i++] = (vmcode) &&I_In_get_constantAM;
op_addr[i++] = (vmcode) &&I_Out_get_constantAM;
op_addr[i++] = (vmcode) &&I_Read_constant;
op_addr[i++] = (vmcode) &&I_Write_constant;
op_addr[i++] = (vmcode) &&I_Push_constant;
op_addr[i++] = (vmcode) &&I_Put_constantAM;
op_addr[i++] = (vmcode) &&I_Puts_constant;
op_addr[i++] = (vmcode) &&I_Get_matched_valueAMAM;
op_addr[i++] = (vmcode) &&I_Get_matched_valueAMTM;
op_addr[i++] = (vmcode) &&I_Debug_exit_simple_args;
op_addr[i++] = (vmcode) &&I_Put_unsafe_valueAMTM;
op_addr[i++] = (vmcode) &&I_Branchs;
op_addr[i++] = (vmcode) &&I_Gc_test;
op_addr[i++] = (vmcode) &&I_Gc_testA;
op_addr[i++] = (vmcode) &&I_Try_me_dynamic;
op_addr[i++] = (vmcode) &&I_Retry_me_dynamic;
op_addr[i++] = (vmcode) &&I_Read_test_var;
op_addr[i++] = (vmcode) &&I_Retry_me_inline;
op_addr[i++] = (vmcode) &&I_Trust_me_inline;
op_addr[i++] = (vmcode) &&I_Set_bp;
op_addr[i++] = (vmcode) &&I_Restore_bp;
op_addr[i++] = (vmcode) &&I_New_bp;
op_addr[i++] = (vmcode) &&I_SavecutL;
op_addr[i++] = (vmcode) &&I_CutL;
op_addr[i++] = (vmcode) &&I_JmpdAs;
op_addr[i++] = (vmcode) &&I_Switch_on_typeL;
op_addr[i++] = (vmcode) &&I_Metacall;
op_addr[i++] = (vmcode) &&I_Fastcall;
op_addr[i++] = (vmcode) &&I_Integer_range_switchL;
op_addr[i++] = (vmcode) &&I_Suspension_call;
op_addr[i++] = (vmcode) &&I_Throw;
op_addr[i++] = (vmcode) &&I_SavecutAM;
op_addr[i++] = (vmcode) &&I_Cut_single;
op_addr[i++] = (vmcode) &&I_Initialize_named;
op_addr[i++] = (vmcode) &&I_Write_named_void;
op_addr[i++] = (vmcode) &&I_Write_named_variable;
op_addr[i++] = (vmcode) &&I_Write_named_variableAM;
op_addr[i++] = (vmcode) &&I_Write_named_variableL;
op_addr[i++] = (vmcode) &&I_Write_named_variableNL;
op_addr[i++] = (vmcode) &&I_Put_referenceAM;
op_addr[i++] = (vmcode) &&I_Put_referenceAML;
op_addr[i++] = (vmcode) &&I_Push_self_reference;
op_addr[i++] = (vmcode) &&I_Push_void_reference;
op_addr[i++] = (vmcode) &&I_Push_reference;
op_addr[i++] = (vmcode) &&I_Push_referenceAM;
op_addr[i++] = (vmcode) &&I_Push_referenceL;
op_addr[i++] = (vmcode) &&I_Puts_reference;
op_addr[i++] = (vmcode) &&I_Puts_referenceL;
op_addr[i++] = (vmcode) &&I_Occur_check_next;
op_addr[i++] = (vmcode) &&I_SoftcutL;
op_addr[i++] = (vmcode) &&I_Dfid_testL;
op_addr[i++] = (vmcode) &&I_Dfid_test;
op_addr[i++] = (vmcode) &&I_Depth;
op_addr[i++] = (vmcode) &&I_Meta_jmpA;
op_addr[i++] = (vmcode) &&I_Undefined;
op_addr[i++] = (vmcode) &&I_Code_end;
op_addr[i++] = (vmcode) &&I_Comment;
op_addr[i++] = (vmcode) &&I_Code_end;
op_addr[i++] = (vmcode) &&I_Get_metaAM;
op_addr[i++] = (vmcode) &&I_In_get_metaAM;
op_addr[i++] = (vmcode) &&I_Write_meta;
op_addr[i++] = (vmcode) &&I_Match_meta;
op_addr[i++] = (vmcode) &&I_Match_next_metaTM;
op_addr[i++] = (vmcode) &&I_Match_metaTM;
op_addr[i++] = (vmcode) &&I_Match_last_meta;
op_addr[i++] = (vmcode) &&I_Read_meta;
op_addr[i++] = (vmcode) &&I_Read_next_metaTM;
op_addr[i++] = (vmcode) &&I_Read_metaTM;
op_addr[i++] = (vmcode) &&I_Read_last_meta;
op_addr[i++] = (vmcode) &&I_Continue_after_exception;
op_addr[i++] = (vmcode) &&I_CutAM;
op_addr[i++] = (vmcode) &&I_Catch;
op_addr[i++] = (vmcode) &&I_Res;
op_addr[i++] = (vmcode) &&I_Handler_call;
op_addr[i++] = (vmcode) &&I_Retd_nowake;
op_addr[i++] = (vmcode) &&I_Push_init_referenceL;
op_addr[i++] = (vmcode) &&I_Exitd_nowake;
op_addr[i++] = (vmcode) &&I_Meta_jmp;
op_addr[i++] = (vmcode) &&I_Suspension_jmp;
op_addr[i++] = (vmcode) &&I_Explicit_jmp;
op_addr[i++] = (vmcode) &&I_Read_referenceNL;
op_addr[i++] = (vmcode) &&I_Read_referenceL;
op_addr[i++] = (vmcode) &&I_Read_referenceAM;
op_addr[i++] = (vmcode) &&I_Read_reference;
op_addr[i++] = (vmcode) &&I_Read_voidN;
op_addr[i++] = (vmcode) &&I_Integer_range_switchAM;
op_addr[i++] = (vmcode) &&I_Puts_valueG;
op_addr[i++] = (vmcode) &&I_Push_valueG;
op_addr[i++] = (vmcode) &&I_GuardL;
op_addr[i++] = (vmcode) &&I_Try_parallel;
op_addr[i++] = (vmcode) &&I_Retry_seq;
op_addr[i++] = (vmcode) &&I_Fail_clause;
op_addr[i++] = (vmcode) &&I_Try_clause;
op_addr[i++] = (vmcode) &&I_Read_attribute;
op_addr[i++] = (vmcode) &&I_Wake_init;
op_addr[i++] = (vmcode) &&I_Wake;
op_addr[i++] = (vmcode) &&I_Ret_nowake;
op_addr[i++] = (vmcode) &&I_Neckcut_par;
op_addr[i++] = (vmcode) &&I_ExtCall;
op_addr[i++] = (vmcode) &&I_External0;
op_addr[i++] = (vmcode) &&I_External1;
op_addr[i++] = (vmcode) &&I_External2;
op_addr[i++] = (vmcode) &&I_External3;
op_addr[i++] = (vmcode) &&I_Clause;
op_addr[i++] = (vmcode) &&I_Put_global_variableAML;
op_addr[i++] = (vmcode) &&I_Put_global_variableL;
op_addr[i++] = (vmcode) &&I_Put_global_variableAM;
op_addr[i++] = (vmcode) &&I_MoveLL;
op_addr[i++] = (vmcode) &&I_Get_valueLL;
op_addr[i++] = (vmcode) &&I_Escapef;
op_addr[i++] = (vmcode) &&I_BI_Exit;
op_addr[i++] = (vmcode) &&I_BI_Bignum;
op_addr[i++] = (vmcode) &&I_BI_Callable;
op_addr[i++] = (vmcode) &&I_BI_CutToStamp;
op_addr[i++] = (vmcode) &&I_BI_SetBipError;
op_addr[i++] = (vmcode) &&I_BI_GetBipError;
op_addr[i++] = (vmcode) &&I_BI_Free;
op_addr[i++] = (vmcode) &&I_BI_Var;
op_addr[i++] = (vmcode) &&I_BI_NonVar;
op_addr[i++] = (vmcode) &&I_BI_Atom;
op_addr[i++] = (vmcode) &&I_BI_Integer;
op_addr[i++] = (vmcode) &&I_BI_Float;
op_addr[i++] = (vmcode) &&I_BI_Breal;
op_addr[i++] = (vmcode) &&I_BI_Real;
op_addr[i++] = (vmcode) &&I_BI_Rational;
op_addr[i++] = (vmcode) &&I_BI_String;
op_addr[i++] = (vmcode) &&I_BI_Number;
op_addr[i++] = (vmcode) &&I_BI_Atomic;
op_addr[i++] = (vmcode) &&I_BI_Compound;
op_addr[i++] = (vmcode) &&I_BI_Meta;
op_addr[i++] = (vmcode) &&I_BI_IsSuspension;
op_addr[i++] = (vmcode) &&I_BI_IsHandle;
op_addr[i++] = (vmcode) &&I_BI_IsEvent;
op_addr[i++] = (vmcode) &&I_BI_IsList;
op_addr[i++] = (vmcode) &&I_BI_Identical;
op_addr[i++] = (vmcode) &&I_BI_NotIdentical;
op_addr[i++] = (vmcode) &&I_BI_Inequality;
op_addr[i++] = (vmcode) &&I_BI_NotIdentList;
op_addr[i++] = (vmcode) &&I_BI_ContDebug;
op_addr[i++] = (vmcode) &&I_BI_Minus;
op_addr[i++] = (vmcode) &&I_BI_Addi;
op_addr[i++] = (vmcode) &&I_BI_Add;
op_addr[i++] = (vmcode) &&I_BI_Sub;
op_addr[i++] = (vmcode) &&I_BI_Mul;
op_addr[i++] = (vmcode) &&I_BI_Quot;
op_addr[i++] = (vmcode) &&I_BI_Div;
op_addr[i++] = (vmcode) &&I_BI_Rem;
op_addr[i++] = (vmcode) &&I_BI_FloorDiv;
op_addr[i++] = (vmcode) &&I_BI_FloorRem;
op_addr[i++] = (vmcode) &&I_BI_And;
op_addr[i++] = (vmcode) &&I_BI_Or;
op_addr[i++] = (vmcode) &&I_BI_Xor;
op_addr[i++] = (vmcode) &&I_BI_Bitnot;
op_addr[i++] = (vmcode) &&I_BI_Lt;
op_addr[i++] = (vmcode) &&I_BI_Le;
op_addr[i++] = (vmcode) &&I_BI_Gt;
op_addr[i++] = (vmcode) &&I_BI_Ge;
op_addr[i++] = (vmcode) &&I_BI_Eq;
op_addr[i++] = (vmcode) &&I_BI_Ne;
op_addr[i++] = (vmcode) &&I_BI_Arg;
op_addr[i++] = (vmcode) &&I_BI_MakeSuspension;
op_addr[i++] = (vmcode) &&I_Debug_call;
op_addr[i++] = (vmcode) &&I_Retry_inline;
op_addr[i++] = (vmcode) &&I_Trust_inline;
op_addr[i++] = (vmcode) &&I_Put_named_variableAM;
op_addr[i++] = (vmcode) &&I_Put_named_variableL;
op_addr[i++] = (vmcode) &&I_Put_named_variableAML;
op_addr[i++] = (vmcode) &&I_Call_dynamic;
op_addr[i++] = (vmcode) &&I_Write_voidN;
op_addr[i++] = (vmcode) &&I_Push_voidN;
op_addr[i++] = (vmcode) &&I_MoveNLAM;
op_addr[i++] = (vmcode) &&I_MoveNAML;
op_addr[i++] = (vmcode) &&I_Move2LAM;
op_addr[i++] = (vmcode) &&I_Move3LAM;
op_addr[i++] = (vmcode) &&I_Move2AML;
op_addr[i++] = (vmcode) &&I_Move3AML;
op_addr[i++] = (vmcode) &&I_Move2AMAM;
op_addr[i++] = (vmcode) &&I_Move3AMAM;
op_addr[i++] = (vmcode) &&I_Move2LL;
op_addr[i++] = (vmcode) &&I_Move3LL;
op_addr[i++] = (vmcode) &&I_SwapAMAM;
op_addr[i++] = (vmcode) &&I_ShiftAMAMAM;
op_addr[i++] = (vmcode) &&I_ShiftAMAMAMAM;
op_addr[i++] = (vmcode) &&I_ShiftAMAMAMAMAM;
op_addr[i++] = (vmcode) &&I_Read_variable2AML;
op_addr[i++] = (vmcode) &&I_Read_variable2AM;
op_addr[i++] = (vmcode) &&I_Read_variable2L;
op_addr[i++] = (vmcode) &&I_Write_variable2AML;
op_addr[i++] = (vmcode) &&I_Write_variable2AM;
op_addr[i++] = (vmcode) &&I_Write_variable2L;
op_addr[i++] = (vmcode) &&I_Write_local_value2AM;
op_addr[i++] = (vmcode) &&I_Write_local_value2L;
op_addr[i++] = (vmcode) &&I_Push_local_value2AM;
op_addr[i++] = (vmcode) &&I_Push_local_value2L;
op_addr[i++] = (vmcode) &&I_Put_global_variable2AML;
op_addr[i++] = (vmcode) &&I_Put_variable2AM;
op_addr[i++] = (vmcode) &&I_Get_atom2AM;
op_addr[i++] = (vmcode) &&I_Get_integer2AM;
op_addr[i++] = (vmcode) &&I_Get_atomintegerAMAM;
op_addr[i++] = (vmcode) &&I_Write_first_structure;
op_addr[i++] = (vmcode) &&I_Write_first_list;
op_addr[i++] = (vmcode) &&I_Write_next_structureTM;
op_addr[i++] = (vmcode) &&I_Write_next_listTM;
op_addr[i++] = (vmcode) &&I_Write_next_structureTMlab;
op_addr[i++] = (vmcode) &&I_Write_next_listTMlab;
op_addr[i++] = (vmcode) &&I_Read_atom2;
op_addr[i++] = (vmcode) &&I_Read_integer2;
op_addr[i++] = (vmcode) &&I_Read_integeratom;
op_addr[i++] = (vmcode) &&I_Read_atominteger;
op_addr[i++] = (vmcode) &&I_Write_did2;
op_addr[i++] = (vmcode) &&I_Write_integer2;
op_addr[i++] = (vmcode) &&I_Write_integerdid;
op_addr[i++] = (vmcode) &&I_Write_didinteger;
op_addr[i++] = (vmcode) &&I_MoveLAMCallfA;
op_addr[i++] = (vmcode) &&I_MoveLAMCallfP;
op_addr[i++] = (vmcode) &&I_MoveLAMChainA;
op_addr[i++] = (vmcode) &&I_MoveLAMChainP;
op_addr[i++] = (vmcode) &&I_Put_global_variableAMLCallfA;
op_addr[i++] = (vmcode) &&I_Put_global_variableAMLCallfP;
op_addr[i++] = (vmcode) &&I_RotAMAMAM;
op_addr[i++] = (vmcode) &&I_BI_Arity;
op_addr[i++] = (vmcode) &&I_Exits;
op_addr[i++] = (vmcode) &&I_CutAMN;
op_addr[i++] = (vmcode) &&I_Put_moduleAM;
op_addr[i++] = (vmcode) &&I_BI_Compare;
op_addr[i++] = (vmcode) &&I_BI_ListEnd;
op_addr[i++] = (vmcode) &&I_BI_Qualify;
