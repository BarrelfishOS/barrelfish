--------------------------------------------------------------------------
-- Copyright (c) 2007-2011, 2013, ETH Zurich.
-- All rights reserved.
--
-- This file is distributed under the terms in the attached LICENSE file.
-- If you do not find this file, copies can be found by writing to:
-- ETH Zurich D-INFK, Haldeneggsteig 4, CH-8092 Zurich. Attn: Systems Group.
--
-- Hakefile for /usr/tests/e10ktest
--
--------------------------------------------------------------------------

[ build application { target = "udpecho_e1000",
                      cFiles = [ "udp_echo.c" ],
                      addLibraries = libDeps [ "posixcompat", "lwip_arrakis", "e1000n", "lwip" ],
                      mackerelDevices = [ "e10k" ],
                      flounderDefs = [ "net_queue_manager" ],
                      architectures = [ "x86_64", "x86_32" ]
                    },
  build application { target = "udpecho_e10kvf",
                      cFiles = [ "udp_echo.c" ],
                      addLibraries = libDeps [ "posixcompat", "lwip_arrakis", "e10k_vf", "lwip" ],
                      mackerelDevices = [ "e10k" ],
                      flounderDefs = [ "net_queue_manager" ],
                      architectures = [ "x86_64", "x86_32" ]
                    },
  build application { target = "udpecho_e10k",
                      cFiles = [ "udp_echo.c" ],
                      addLibraries = libDeps [ "posixcompat", "lwip_arrakis", "e10k", "lwip" ],
                      mackerelDevices = [ "e10k" ],
                      flounderDefs = [ "net_queue_manager" ],
                      architectures = [ "x86_64", "x86_32" ]
                    },
  build application { target = "udpecho_arranet_e10k_recvfrom",
                      cFiles = [ "udp_echo.c" ],
                      addLibraries = libDeps [ "posixcompat", "arranet", "e10k", "lwip" ],
                      addCFlags = [ "-DARRANET_RECVFROM" ],
                      mackerelDevices = [ "e10k" ],
                      flounderDefs = [ "net_queue_manager" ],
                      architectures = [ "x86_64", "x86_32" ]
                    },
  build application { target = "udpecho_arranet_e10kvf_recvfrom",
                      cFiles = [ "udp_echo.c" ],
                      addLibraries = libDeps [ "posixcompat", "arranet", "e10k_vf", "lwip" ],
                      addCFlags = [ "-DARRANET_RECVFROM" ],
                      mackerelDevices = [ "e10k" ],
                      flounderDefs = [ "net_queue_manager" ],
                      architectures = [ "x86_64", "x86_32" ]
                    },
  build application { target = "udpecho_arranet_e1000_recvfrom",
                      cFiles = [ "udp_echo.c" ],
                      addLibraries = libDeps [ "posixcompat", "arranet", "e1000n", "lwip" ],
                      addCFlags = [ "-DARRANET_RECVFROM" ],
                      mackerelDevices = [ "e10k" ],
                      flounderDefs = [ "net_queue_manager" ],
                      architectures = [ "x86_64", "x86_32" ]
                    },
  build application { target = "udpecho_arranet_e10k",
                      cFiles = [ "udp_echo.c" ],
                      addLibraries = libDeps [ "posixcompat", "arranet", "e10k", "lwip" ],
                      mackerelDevices = [ "e10k" ],
                      flounderDefs = [ "net_queue_manager" ],
                      architectures = [ "x86_64", "x86_32" ]
                    },
  build application { target = "udpecho_arranet_e10kvf",
                      cFiles = [ "udp_echo.c" ],
                      addLibraries = libDeps [ "posixcompat", "arranet", "e10k_vf", "lwip" ],
                      flounderDefs = [ "net_queue_manager" ],
                      architectures = [ "x86_64", "x86_32" ]
                    },
  build application { target = "udpecho_arranet_e1000",
                      cFiles = [ "udp_echo.c" ],
                      addLibraries = libDeps [ "posixcompat", "arranet", "e1000n", "lwip" ],
                      mackerelDevices = [ "e10k" ],
                      flounderDefs = [ "net_queue_manager" ],
                      architectures = [ "x86_64", "x86_32" ]
                    }
]
