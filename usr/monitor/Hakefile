--------------------------------------------------------------------------
-- Copyright (c) 2007-2010, ETH Zurich.
-- All rights reserved.
--
-- This file is distributed under the terms in the attached LICENSE file.
-- If you do not find this file, copies can be found by writing to:
-- ETH Zurich D-INFK, Haldeneggsteig 4, CH-8092 Zurich. Attn: Systems Group.
--
-- Hakefile for /usr/monitor
--
--------------------------------------------------------------------------

[(let
     arch_dir = "arch" </> archFamily arch

     arch_dirs "x86_32" = [ arch_dir, "arch/x86" ]
     arch_dirs "x86_64" = [ arch_dir, "arch/x86" ]
     arch_dirs "k1om"   = [ arch_dir, "arch/x86" ]
     arch_dirs _        = [ arch_dir ]

     common_srcs = [ "trace_support.c", "bfscope_support.c", "ram_alloc.c", "inter.c", "spawn.c", "invocations.c", "iref.c",
                     "main.c", "monitor_server.c", "monitor_rpc_server.c",
                     "boot.c", "queue.c", "domain.c", "intermon_bindings.c",
                     "resource_ctrl.c", "timing.c", "send_cap.c", "octopus_client.c",
                     "capops/capsend.c", "capops/capqueue.c", "capops/internal.c",
                     "capops/caplock.c", "capops/copy.c", "capops/move.c",
                     "capops/retrieve.c", "capops/delete.c", "capops/revoke.c",
                     "capops/retype.c", "capops/init.c", "capops/deletestep.c" ]

     arch_srcs "x86_32"  = [ "arch/x86/boot.c", "arch/x86/inter.c", "arch/x86/monitor_server.c", "arch/x86/notify_ipi.c" ]
     arch_srcs "x86_64"  = [ "arch/x86/boot.c", "arch/x86/inter.c", "arch/x86/monitor_server.c", "arch/x86/notify_ipi.c" ]
     arch_srcs "k1om"    = [ "arch/x86/boot.c", "arch/x86/inter.c", "arch/x86/monitor_server.c", "arch/x86/notify_ipi.c" ]
     arch_srcs "armv7"   = [ "arch/armv7/boot.c", "arch/armv7/inter.c", "arch/armv7/monitor_server.c", "arch/armv7/notify_ipi.c" ]
     arch_srcs "armv8"   = [ "arch/armv8/boot.c", "arch/armv8/inter.c", "arch/armv8/monitor_server.c", "arch/armv8/notify_ipi.c" ]
     arch_srcs _         = []

     idc_srcs = concat $ map getsrcs $ optInterconnectDrivers $ options arch
          where
            getsrcs "ump" = [ "ump_support.c" ]
            getsrcs "multihop" = [ "multihop_support.c" ]
            getsrcs _     = []
            
     idc_libraries = concat $ map getsrcs $ optInterconnectDrivers $ options arch
          where
            getsrcs "multihop" = [ "collections" ]
            getsrcs _     = []
                     
  in
    build application { target = "monitor",
                        architectures = [arch],
                        cFiles = common_srcs ++ arch_srcs arch ++ idc_srcs,
                        flounderDefs = [ "mem", "monitor", "monitor_blocking", "proc_mgmt" ],
                        flounderBindings = [ "monitor_mem", "intermon" ],
                        flounderExtraBindings = [ ("monitor", ["loopback"]),
                                                  ("monitor_mem", ["rpcclient"]),
                                                  ("mem", ["rpcclient"]),
                                                  ("proc_mgmt", ["rpcclient"]),
                                                  ("octopus", ["rpcclient"]) ],
                        addLinkFlags = [ "-e _start_init" ],
                        addIncludes = "include" : [ "include" </> a | a <- arch_dirs arch ],
                        addLibraries = (
 			    [ "spawndomain", "bench", "trace", "elf", "cap_predicates" ]
                            ++ idc_libraries)
                      }
 ) | arch <- allArchitectures ]
