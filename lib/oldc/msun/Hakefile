--------------------------------------------------------------------------
-- Copyright (c) 2007-2009, ETH Zurich.
-- All rights reserved.
--
-- This file is distributed under the terms in the attached LICENSE file.
-- If you do not find this file, copies can be found by writing to:
-- ETH Zurich D-INFK, Haldeneggsteig 4, CH-8092 Zurich. Attn: Systems Group.
--
-- Hakefile for lib/msun
--
--------------------------------------------------------------------------

if Config.libc == "oldc" then
[(
  let
    common_src = ["src" </> f | f <- [
        "e_acos.c", "e_acosf.c", "e_acosh.c", "e_acoshf.c", "e_asin.c", "e_asinf.c",
        "e_atan2.c", "e_atan2f.c", "e_atanh.c", "e_atanhf.c", "e_cosh.c", "e_coshf.c", "e_exp.c",
        "e_expf.c", "e_fmod.c", "e_fmodf.c", "e_gamma.c", "e_gamma_r.c", "e_gammaf.c",
        "e_gammaf_r.c", "e_hypot.c", "e_hypotf.c", "e_j0.c", "e_j0f.c", "e_j1.c", "e_j1f.c",
        "e_jn.c", "e_jnf.c", "e_lgamma.c", "e_lgamma_r.c", "e_lgammaf.c", "e_lgammaf_r.c",
        "e_log.c", "e_log10.c", "e_log10f.c", "e_logf.c", "e_pow.c", "e_powf.c", "e_rem_pio2.c",
        "e_rem_pio2f.c", "e_remainder.c", "e_remainderf.c", "e_scalb.c", "e_scalbf.c",
        "e_sinh.c", "e_sinhf.c", "e_sqrt.c", "e_sqrtf.c",
        "k_cos.c", "k_cosf.c", "k_rem_pio2.c", "k_sin.c", "k_sinf.c",
        "k_tan.c", "k_tanf.c",
        "s_asinh.c", "s_asinhf.c", "s_atan.c", "s_atanf.c", "s_carg.c", "s_cargf.c", "s_cargl.c",
        "s_cbrt.c", "s_cbrtf.c", "s_ceil.c", "s_ceilf.c",
        "s_copysign.c", "s_copysignf.c", "s_cos.c", "s_cosf.c",
        "s_csqrt.c", "s_csqrtf.c", "s_erf.c", "s_erff.c",
        "s_exp2.c", "s_exp2f.c", "s_expm1.c", "s_expm1f.c", "s_fabsf.c", "s_fdim.c",
        "s_finite.c", "s_finitef.c",
        "s_floor.c", "s_floorf.c", "s_fma.c", "s_fmaf.c",
        "s_fmax.c", "s_fmaxf.c", "s_fmaxl.c", "s_fmin.c",
        "s_fminf.c", "s_fminl.c", "s_frexpf.c", "s_ilogb.c", "s_ilogbf.c",
        "s_ilogbl.c", "s_isfinite.c", "s_isinf.c", "s_isnormal.c",
        "s_llrint.c", "s_llrintf.c", "s_llround.c", "s_llroundf.c", "s_llroundl.c",
        "s_log1p.c", "s_log1pf.c", "s_logb.c", "s_logbf.c", "s_lrint.c", "s_lrintf.c",
        "s_lround.c", "s_lroundf.c", "s_lroundl.c", "s_modff.c",
        "s_nan.c", "s_nearbyint.c", "s_nextafter.c", "s_nextafterf.c",
        "s_nexttowardf.c", "s_remquo.c", "s_remquof.c",
        "s_rint.c", "s_rintf.c", "s_round.c", "s_roundf.c", "s_roundl.c",
        "s_scalbln.c", "s_scalbn.c", "s_scalbnf.c", "s_signbit.c",
        "s_signgam.c", "s_significand.c", "s_significandf.c", "s_sin.c", "s_sinf.c",
        "s_tan.c", "s_tanf.c", "s_tanh.c", "s_tanhf.c", "s_tgammaf.c", "s_trunc.c", "s_truncf.c",
        "w_cabs.c", "w_cabsf.c", "w_drem.c", "w_dremf.c",

        -- The BSD source of MSUN provides these but doenst compile them
        -- claiming that libc provides them, but in barrelfish we seem to need them
        "s_fabs.c", "s_frexp.c", "s_isnan.c", "s_ldexp.c", "s_modf.c"]]

    (longdouble_dir, arch_csrc, arch_asmsrc) = case a of
        "x86_64" -> ("ld80", ["amd64/fenv.c"], ["amd64" </> f | f <- [
                        "e_remainderf.S", "e_sqrt.S", "s_llrintf.S",
                        "s_lrintf.S", "s_remquof.S", "s_scalbnf.S", "e_sqrtf.S",
                        "s_llrintl.S", "s_lrintl.S", "s_remquol.S",
                        "s_scalbnl.S", "e_sqrtl.S", "s_llrint.S", "s_lrint.S",
                        "s_remquo.S", "s_scalbn.S"]])
        _ -> ("", [], [])

    longdouble_src = if longdouble_dir == "" then [] else (
        [longdouble_dir </> f | f <- [
                "invtrig.c", "k_cosl.c", "k_sinl.c", "k_tanl.c",
                "s_exp2l.c", "s_nanl.c"]]
        ++
        ["src" </> f | f <- [
                "e_acosl.c", "e_asinl.c", "e_atan2l.c", "e_fmodl.c",
                "e_hypotl.c", "e_remainderl.c", "e_sqrtl.c",
                "s_atanl.c", "s_ceill.c", "s_cosl.c", "s_cprojl.c", "s_csqrtl.c",
                "s_floorl.c", "s_fmal.c",
                "s_frexpl.c", "s_logbl.c", "s_nextafterl.c", "s_nexttoward.c",
                "s_remquol.c", "s_rintl.c", "s_scalbnl.c",
                "s_sinl.c", "s_tanl.c", "s_truncl.c", "w_cabsl.c"]])
  in
    build library { target = "msun",
                  cFiles = arch_csrc ++ common_src ++ longdouble_src,
                  assemblyFiles = arch_asmsrc,
                  architectures = [ a ],
                  addIncludes = ["src"] ++ (
                          if longdouble_dir == "" then [] else [longdouble_dir])
                }
) | a <- allArchitectures ]
else []
