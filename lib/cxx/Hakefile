--------------------------------------------------------------------------
-- Copyright (c) 2007-2011, ETH Zurich.
-- All rights reserved.
--
-- This file is distributed under the terms in the attached LICENSE file.
-- If you do not find this file, copies can be found by writing to:
-- ETH Zurich D-INFK, Universitaetstrasse 6, CH-8092 Zurich. Attn: Systems Group.
--
-- Hakefile for /lib/cxx
--
--------------------------------------------------------------------------
[
 (let
    cxxSourceFiles = [ "cxx" </> f | f <- [ "exception.cpp",
                                            "ios.cpp",
                                            "filesystem/operations.cpp",
                                            "filesystem/int128_builtins.cpp",
                                            "filesystem/directory_iterator.cpp",
                                            "locale.cpp",
                                            "thread.cpp",
                                            "functional.cpp",
                                            "memory.cpp",
                                            "chrono.cpp",
                                            "mutex_destructor.cpp",
                                            "variant.cpp",
                                            "typeinfo.cpp",
                                            "condition_variable.cpp",
                                            "random.cpp",
                                            "mutex.cpp",
                                            "charconv.cpp",
                                            "strstream.cpp",
                                            "vector.cpp",
                                            "valarray.cpp",
                                            "utility.cpp",
                                            "stdexcept.cpp",
                                            "hash.cpp",
                                            "algorithm.cpp",
                                            "regex.cpp",
                                            "iostream.cpp",
                                            "condition_variable_destructor.cpp",
                                            "bind.cpp",
                                            "shared_mutex.cpp",
                                            "future.cpp",
                                            "debug.cpp",
                                            "new.cpp",
                                            "any.cpp",
                                            "string.cpp",
                                            "optional.cpp",
                                            "system_error.cpp"
                                            ] ]
                  ++ [ "cxxabi" </> f | f <- [ "cxa_thread_atexit.cpp",
                                               "exception.cpp",
                                               "cxa_guard.cpp",
                                               "cxa_new_delete.cpp",
                                               "stdlib_stdexcept.cpp",
                                               "typeinfo.cpp",
                                               "stdlib_new_delete.cpp",
                                               "cxa_unexpected.cpp",
                                               "cxa_personality.cpp",
                                               "cxa_aux_runtime.cpp",
                                               "abort_message.cpp",
                                               "cxa_vector.cpp",
                                               "cxa_exception.cpp",
                                               "cxa_demangle.cpp",
                                               "stdlib_typeinfo.cpp",
                                               "fallback_malloc.cpp",
                                               "cxa_default_handlers.cpp",
                                               "cxa_handlers.cpp",
                                               "cxa_exception_storage.cpp",
                                               "stdlib_exception.cpp",
                                               "private_typeinfo.cpp",
                                               "cxa_virtual.cpp"] ]
                  ++ [ "unwind" </> f | f <- [ "Unwind-EHABI.cpp",
                                               "Unwind-seh.cpp",
                                               "libunwind.cpp",
                                               "AddressSpace.cpp" ] ]

    cSourceFiles = [ "unwind" </> f | f <- [ "UnwindLevel1-gcc-ext.c",
                                             "UnwindLevel1.c",
                                             "unwind_backend.c",
                                             "Unwind-sjlj.c" ] ]

    assemblyFiles = [ "unwind" </> f | f <- [ "UnwindRegistersSave.S",
                                              "UnwindRegistersRestore.S" ] ]


    args = library {
        target = "cxx",
        cxxFiles = cxxSourceFiles,
        cFiles = cSourceFiles,
        assemblyFiles = assemblyFiles,
        addIncludes = [
            "include"
        ],
        architectures = [a],
        omitCxxFlags = [
            "-Werror",
            "-Wshadow",
            "-Wmissing-declarations",
            "-Wmissing-field-initializers",
            "-Wredundant-decls"
        ],
        addCxxFlags = [
            "-Wno-unused-parameter",
            "-Wwrite-strings",
            "-Wno-long-long",
            "-DLIBCXXABI",
            "-DLIBCXX_BUILDING_LIBCXXABI",
            "-D_LIBCPP_BUILDING_LIBRARY"
        ],
        addLibraries = libDeps [
            "posixcompat"
        ]
    }
    defaultopts = libGetOptionsForArch a args in
    Rules [Rules [compileCxxFile defaultopts s | s <- (Args.cxxFiles args)],
    	   Rules [compileCFile defaultopts s | s <- (Args.cFiles args)],
    	   Rules [assembleSFile defaultopts s | s <- (Args.assemblyFiles args)],
           staticLibrary defaultopts (Args.target args) (allObjectPaths defaultopts args) [],
           Rule [LDep (DepLib a $ Args.target args) (DepLib a "posixcompat")]
           ]
 ) | a <- [ "x86_64", "k1om", "armv8", "armv7" ]
]
