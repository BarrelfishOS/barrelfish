--------------------------------------------------------------------------
-- Copyright (c) 2016, ETH Zurich.
-- All rights reserved.
--
-- This file is distributed under the terms in the attached LICENSE file.
-- If you do not find this file, copies can be found by writing to:
-- ETH Zurich D-INFK, Universitaetstrasse 4, CH-8092 Zurich. Attn: Systems Group.
--
-- Hakefile for /lib/compiler-rt/builtins
--
--------------------------------------------------------------------------

let
  builtins_generic = [
    "absvdi2.c",
    "absvsi2.c",
    "absvti2.c",
    "adddf3.c",
    "addsf3.c",
    "addtf3.c",
    "addvdi3.c",
    "addvsi3.c",
    "addvti3.c",
    "ashldi3.c",
    "ashlti3.c",
    "ashrdi3.c",
    "ashrti3.c",
    -- FIXME: This requires C11 _Atomic
    -- atomic.c
    "clear_cache.c",
    "clzdi2.c",
    "clzsi2.c",
    "clzti2.c",
    "cmpdi2.c",
    "cmpti2.c",
    "comparedf2.c",
    "comparesf2.c",
    "ctzdi2.c",
    "ctzsi2.c",
    "ctzti2.c",
    "divdc3.c",
    "divdf3.c",
    "divdi3.c",
    "divmoddi4.c",
    "divmodsi4.c",
    "divsc3.c",
    "divsf3.c",
    "divsi3.c",
    -- GCC has conflicting types with built-in __divtc3
    -- "divtc3.c",
    "divti3.c",
    "divtf3.c",
    "divxc3.c",
    "enable_execute_stack.c",
    "extendsfdf2.c",
    "extendhfsf2.c",
    "ffsdi2.c",
    "ffsti2.c",
    "fixdfdi.c",
    "fixdfsi.c",
    "fixdfti.c",
    "fixsfdi.c",
    "fixsfsi.c",
    "fixsfti.c",
    "fixunsdfdi.c",
    "fixunsdfsi.c",
    "fixunsdfti.c",
    "fixunssfdi.c",
    "fixunssfsi.c",
    "fixunssfti.c",
    "fixunsxfdi.c",
    "fixunsxfsi.c",
    "fixunsxfti.c",
    "fixxfdi.c",
    "fixxfti.c",
    "floatdidf.c",
    "floatdisf.c",
    "floatdixf.c",
    "floatsidf.c",
    "floatsisf.c",
    "floattidf.c",
    "floattisf.c",
    "floattixf.c",
    "floatundidf.c",
    "floatundisf.c",
    "floatundixf.c",
    "floatunsidf.c",
    "floatunsisf.c",
    "floatuntidf.c",
    "floatuntisf.c",
    "floatuntixf.c",
    "int_util.c",
    "lshrdi3.c",
    "lshrti3.c",
    "moddi3.c",
    "modsi3.c",
    "modti3.c",
    "muldc3.c",
    "muldf3.c",
    "muldi3.c",
    "mulodi4.c",
    "mulosi4.c",
    "muloti4.c",
    "mulsc3.c",
    "mulsf3.c",
    "multi3.c",
    "multf3.c",
    "mulvdi3.c",
    "mulvsi3.c",
    "mulvti3.c",
    "mulxc3.c",
    "negdf2.c",
    "negdi2.c",
    "negsf2.c",
    "negti2.c",
    "negvdi2.c",
    "negvsi2.c",
    "negvti2.c",
    "paritydi2.c",
    "paritysi2.c",
    "parityti2.c",
    "popcountdi2.c",
    "popcountsi2.c",
    "popcountti2.c",
    "powidf2.c",
    "powisf2.c",
    "powitf2.c",
    "powixf2.c",
    "subdf3.c",
    "subsf3.c",
    "subvdi3.c",
    "subvsi3.c",
    "subvti3.c",
    "subtf3.c",
    "trampoline_setup.c",
    "truncdfhf2.c",
    "truncdfsf2.c",
    "truncsfhf2.c",
    "ucmpdi2.c",
    "ucmpti2.c",
    "udivdi3.c",
    "udivmoddi4.c",
    "udivmodsi4.c",
    "udivmodti4.c",
    "udivsi3.c",
    "udivti3.c",
    "umoddi3.c",
    "umodsi3.c",
    "umodti3.c" ]

  builtins_asm_arch arch = case arch of
    "x86_32" -> [
        "i386/ashldi3.S",
        "i386/ashrdi3.S",
        "i386/chkstk.S",
        "i386/chkstk2.S",
        "i386/divdi3.S",
        "i386/floatdidf.S",
        "i386/floatdisf.S",
        "i386/floatdixf.S",
        "i386/floatundidf.S",
        "i386/floatundisf.S",
        "i386/floatundixf.S",
        "i386/lshrdi3.S",
        "i386/moddi3.S",
        "i386/muldi3.S",
        "i386/udivdi3.S",
        "i386/umoddi3.S" ]
    "x86_64" -> [
        "x86_64/chkstk.S",
        "x86_64/chkstk2.S",
        "x86_64/floatundidf.S",
        "x86_64/floatundisf.S",
        "x86_64/floatundixf.S" ]
    "k1om" -> [ ]
    "armv7" -> [
        "arm/aeabi_cdcmp.S",
        "arm/aeabi_cfcmp.S",
        "arm/aeabi_dcmp.S",
        "arm/aeabi_fcmp.S",
        "arm/aeabi_idivmod.S",
        "arm/aeabi_ldivmod.S",
        "arm/aeabi_memcmp.S",
        "arm/aeabi_memcpy.S",
        "arm/aeabi_memmove.S",
        "arm/aeabi_memset.S",
        "arm/aeabi_uidivmod.S",
        "arm/aeabi_uldivmod.S",
        "arm/bswapdi2.S",
        "arm/bswapsi2.S",
        "arm/clzdi2.S",
        "arm/clzsi2.S",
        "arm/comparesf2.S",
        "arm/divmodsi4.S",
        "arm/divsi3.S",
        "arm/modsi3.S",
        "arm/sync_synchronize.S",
        "arm/udivmodsi4.S",
        "arm/udivsi3.S",
        "arm/umodsi3.S",
        "arm/switch16.S",
        "arm/switch32.S",
        "arm/switch8.S",
        "arm/switchu8.S",
        "arm/sync_fetch_and_add_4.S",
        "arm/sync_fetch_and_add_8.S",
        "arm/sync_fetch_and_and_4.S",
        "arm/sync_fetch_and_and_8.S",
        "arm/sync_fetch_and_max_4.S",
        "arm/sync_fetch_and_max_8.S",
        "arm/sync_fetch_and_min_4.S",
        "arm/sync_fetch_and_min_8.S",
        "arm/sync_fetch_and_nand_4.S",
        "arm/sync_fetch_and_nand_8.S",
        "arm/sync_fetch_and_or_4.S",
        "arm/sync_fetch_and_or_8.S",
        "arm/sync_fetch_and_sub_4.S",
        "arm/sync_fetch_and_sub_8.S",
        "arm/sync_fetch_and_umax_4.S",
        "arm/sync_fetch_and_umax_8.S",
        "arm/sync_fetch_and_umin_4.S",
        "arm/sync_fetch_and_umin_8.S",
        "arm/sync_fetch_and_xor_4.S",
        "arm/sync_fetch_and_xor_8.S"
        ]
    "armv8" -> [ ]
    x -> error ("Unknown architecture for compiler-rt: " ++ x)

  builtins_c_arch arch = case arch of
    "x86_32" -> [ ]
    "x86_64" -> [
        "x86_64/floatdidf.c",
        "x86_64/floatdisf.c",
        "x86_64/floatdixf.c" ]
    "k1om" -> builtins_c_arch "x86_64"
    "armv7" -> [
        "arm/aeabi_cdcmpeq_check_nan.c",
        "arm/aeabi_cfcmpeq_check_nan.c",
        "arm/aeabi_div0.c",
        "arm/aeabi_drsub.c",
        "arm/aeabi_frsub.c" ]
    "armv8" -> [
        "comparetf2.c",
        "extenddftf2.c",
        "extendsftf2.c",
        "fixtfdi.c",
        "fixtfsi.c",
        "fixtfti.c",
        "fixunstfdi.c",
        "fixunstfsi.c",
        "fixunstfti.c",
        "floatditf.c",
        "floatsitf.c",
        "floatunditf.c",
        "floatunsitf.c",
        "multc3.c",
        "trunctfdf2.c",
        "trunctfsf2.c" ]
    x -> error ("Unknown architecture for compiler-rt: " ++ x)

  common_cFlags = [
    "-Wno-missing-prototypes",
    "-Wno-missing-declarations",
    "-Wno-strict-prototypes",
    "-Wno-old-style-definition",
    "-Wno-redundant-decls"
    ]

  arch_cFlags arch = case arch of "x86_64"  -> [ ]
                                  "k1om"    -> [ ]
                                  "x86_32"  -> [ ]
                                  "armv7"   -> [ "-D__ARM_EABI__" ]
                                  "armv8"   -> [ ]

in [
    build library {
        target = "compiler-rt",
        addCFlags = common_cFlags ++ (arch_cFlags arch),
        cFiles = builtins_generic ++ builtins_c_arch arch,
        assemblyFiles = builtins_asm_arch arch,
        addLibraries = libDeps [
            "m"
        ],
        architectures = [
            arch
        ]
    } | arch <- allArchitectures
]
