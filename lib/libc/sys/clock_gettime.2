.\"	$OpenBSD: clock_gettime.2,v 1.4 1997/05/08 20:21:16 kstailey Exp $
.\"
.\" Copyright (c) 1980, 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 4. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\" $FreeBSD$
.\"
.Dd December 27, 2015
.Dt CLOCK_GETTIME 2
.Os
.Sh NAME
.Nm clock_gettime ,
.Nm clock_settime ,
.Nm clock_getres
.Nd get/set/calibrate date and time
.Sh LIBRARY
.Lb libc
.Sh SYNOPSIS
.In time.h
.Ft int
.Fn clock_gettime "clockid_t clock_id" "struct timespec *tp"
.Ft int
.Fn clock_settime "clockid_t clock_id" "const struct timespec *tp"
.Ft int
.Fn clock_getres "clockid_t clock_id" "struct timespec *tp"
.Sh DESCRIPTION
The
.Fn clock_gettime
and
.Fn clock_settime
system calls allow the calling process to retrieve or set the value
used by a clock which is specified by
.Fa clock_id .
.Pp
The
.Fa clock_id
argument
can be one of the following values:
.Dv CLOCK_REALTIME ,
.Dv CLOCK_REALTIME_PRECISE ,
.Dv CLOCK_REALTIME_FAST
for time that increments as
a wall clock should;
.Dv CLOCK_MONOTONIC ,
.Dv CLOCK_MONOTONIC_PRECISE ,
.Dv CLOCK_MONOTONIC_FAST
which increments in SI seconds;
.Dv CLOCK_UPTIME ,
.Dv CLOCK_UPTIME_PRECISE ,
.Dv CLOCK_UPTIME_FAST
which starts at zero when the kernel boots and increments
monotonically in SI seconds while the machine is running;
.Dv CLOCK_VIRTUAL
for time that increments only when
the CPU is running in user mode on behalf of the calling process;
.Dv CLOCK_PROF
for time that increments when the CPU is running in user or
kernel mode; or
.Dv CLOCK_SECOND
which returns the current second without performing a full time counter
query, using in-kernel cached value of current second.
.Pp
The clock IDs
.Fa CLOCK_REALTIME_FAST ,
.Fa CLOCK_MONOTONIC_FAST ,
.Fa CLOCK_UPTIME_FAST
are analogs of corresponding IDs without _FAST suffix but do not perform
a full time counter query, so their accuracy is one timer tick.
Similarly,
.Fa CLOCK_REALTIME_PRECISE ,
.Fa CLOCK_MONOTONIC_PRECISE ,
.Fa CLOCK_UPTIME_PRECISE
are used to get the most exact value as possible, at the expense of
execution time.
.Pp
The structure pointed to by
.Fa tp
is defined in
.In sys/timespec.h
as:
.Bd -literal
struct timespec {
	time_t	tv_sec;		/* seconds */
	long	tv_nsec;	/* and nanoseconds */
};
.Ed
.Pp
Only the super-user may set the time of day, using only
.Fa CLOCK_REALTIME .
If the system securelevel is greater than 1 (see
.Xr init 8 ) ,
the time may only be advanced.
This limitation is imposed to prevent a malicious super-user
from setting arbitrary time stamps on files.
The system time can still be adjusted backwards using the
.Xr adjtime 2
system call even when the system is secure.
.Pp
The resolution (granularity) of a clock is returned by the
.Fn clock_getres
system call.
This value is placed in a (non-NULL)
.Fa *tp .
.Sh RETURN VALUES
.Rv -std
.Sh ERRORS
The following error codes may be set in
.Va errno :
.Bl -tag -width Er
.It Bq Er EINVAL
The
.Fa clock_id
or
.Fa timespec
argument
was not a valid value.
.It Bq Er EPERM
A user other than the super-user attempted to set the time.
.El
.Sh SEE ALSO
.Xr date 1 ,
.Xr adjtime 2 ,
.Xr ctime 3 ,
.Xr timed 8
.Sh STANDARDS
The
.Fn clock_gettime ,
.Fn clock_settime ,
and
.Fn clock_getres
system calls conform to
.St -p1003.1b-93 .
The clock IDs
.Fa CLOCK_REALTIME_FAST ,
.Fa CLOCK_REALTIME_PRECISE ,
.Fa CLOCK_MONOTONIC_FAST ,
.Fa CLOCK_MONOTONIC_PRECISE ,
.Fa CLOCK_UPTIME ,
.Fa CLOCK_UPTIME_FAST ,
.Fa CLOCK_UPTIME_PRECISE ,
.Fa CLOCK_SECOND
are FreeBSD extensions to the POSIX interface.
