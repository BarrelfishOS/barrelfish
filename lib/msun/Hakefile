--------------------------------------------------------------------------
-- Copyright (c) 2017, ETH Zurich.
-- All rights reserved.
--
-- This file is distributed under the terms in the attached LICENSE file.
-- If you do not find this file, copies can be found by writing to:
-- ETH Zurich D-INFK, Universitaetstr. 6, CH-8092 Zurich. Attn: Systems Group.
--
-- Hakefile for libm
--
--------------------------------------------------------------------------
let
    ldbl_prec arch = case arch of
                    "x86_64" -> 64
                    "k1om" -> 64
                    "armv7" -> 53
                    "armv8" -> 113
    arch_path arch = case arch of
                    "x86_64" -> "amd64"
                    "k1om" -> "amd64"
                    "armv7" -> "arm"
                    "armv8" -> "aarch64"
    bsdcommon_c = [ "bsdsrc/b_exp.c", "bsdsrc/b_log.c", "bsdsrc/b_tgamma.c" ]
    common_c = [ "e_acos.c", "e_acosf.c", "e_acosh.c", "e_acoshf.c", "e_asin.c", "e_asinf.c",
        "e_atan2.c", "e_atan2f.c", "e_atanh.c", "e_atanhf.c", "e_cosh.c", "e_coshf.c", "e_exp.c",
        "e_expf.c", "e_fmod.c", "e_fmodf.c", "e_gamma.c", "e_gamma_r.c", "e_gammaf.c",
        "e_gammaf_r.c", "e_hypot.c", "e_hypotf.c", "e_j0.c", "e_j0f.c", "e_j1.c", "e_j1f.c",
        "e_jn.c", "e_jnf.c", "e_lgamma.c", "e_lgamma_r.c", "e_lgammaf.c", "e_lgammaf_r.c",
        "e_log.c", "e_log10.c", "e_log10f.c", "e_log2.c", "e_log2f.c", "e_logf.c",
        "e_pow.c", "e_powf.c", "e_rem_pio2.c",
        "e_rem_pio2f.c", "e_remainder.c", "e_remainderf.c", "e_scalb.c", "e_scalbf.c",
        "e_sinh.c", "e_sinhf.c", "e_sqrt.c", "e_sqrtf.c",
        "imprecise.c",
        "k_cos.c", "k_cosf.c", "k_exp.c", "k_expf.c", "k_rem_pio2.c", "k_sin.c", "k_sinf.c",
        "k_tan.c", "k_tanf.c",
        "s_asinh.c", "s_asinhf.c", "s_atan.c", "s_atanf.c", "s_carg.c", "s_cargf.c", "s_cargl.c",
        "s_cbrt.c", "s_cbrtf.c", "s_ceil.c", "s_ceilf.c",
        "s_copysign.c", "s_copysignf.c", "s_cos.c", "s_cosf.c",
        "s_csqrt.c", "s_csqrtf.c", "s_erf.c", "s_erff.c",
        "s_exp2.c", "s_exp2f.c", "s_expm1.c", "s_expm1f.c", "s_fabsf.c", "s_fdim.c",
        "s_finite.c", "s_finitef.c",
        "s_floor.c", "s_floorf.c", "s_fma.c", "s_fmaf.c",
        "s_fmax.c", "s_fmaxf.c", "s_fmaxl.c", "s_fmin.c",
        "s_fminf.c", "s_fminl.c", "s_frexp.c", "s_frexpf.c", "s_ilogb.c", "s_ilogbf.c",
        "s_ilogbl.c", "s_isfinite.c", "s_isnan.c", "s_isnormal.c",
        "s_llrint.c", "s_llrintf.c", "s_llround.c", "s_llroundf.c", "s_llroundl.c",
        "s_log1p.c", "s_log1pf.c", "s_logb.c", "s_logbf.c", "s_lrint.c", "s_lrintf.c",
        "s_lround.c", "s_lroundf.c", "s_lroundl.c", "s_modff.c",
        "s_nan.c", "s_nearbyint.c", "s_nextafter.c", "s_nextafterf.c",
        "s_nexttowardf.c", "s_remquo.c", "s_remquof.c",
        "s_rint.c", "s_rintf.c", "s_round.c", "s_roundf.c",
        "s_scalbln.c", "s_scalbn.c", "s_scalbnf.c", "s_signbit.c",
        "s_signgam.c", "s_significand.c", "s_significandf.c", "s_sin.c", "s_sinf.c",
        "s_tan.c", "s_tanf.c", "s_tanh.c", "s_tanhf.c", "s_tgammaf.c", "s_trunc.c", "s_truncf.c",
        "w_cabs.c", "w_cabsf.c", "w_drem.c", "w_dremf.c",
        "s_copysignl.c", "s_fabsl.c", "s_llrintl.c", "s_lrintl.c", "s_modfl.c",
        "catrig.c", "catrigf.c",
        "s_ccosh.c", "s_ccoshf.c", "s_cexp.c", "s_cexpf.c",
        "s_cimag.c", "s_cimagf.c", "s_cimagl.c",
        "s_conj.c", "s_conjf.c", "s_conjl.c",
        "s_cproj.c", "s_cprojf.c", "s_creal.c", "s_crealf.c", "s_creall.c",
        "s_csinh.c", "s_csinhf.c", "s_ctanh.c", "s_ctanhf.c"]
    ldbl_c = [ "e_acoshl.c", "e_acosl.c", "e_asinl.c", "e_atan2l.c", "e_atanhl.c",
        "e_coshl.c", "e_fmodl.c", "e_hypotl.c", "e_lgammal.c",
        "e_remainderl.c", "e_sinhl.c", "e_sqrtl.c",
        "s_asinhl.c", "s_atanl.c", "s_cbrtl.c", "s_ceill.c", "s_cosl.c", "s_cprojl.c",
        "s_csqrtl.c", "s_floorl.c", "s_fmal.c",
        "s_frexpl.c", "s_logbl.c", "s_nextafterl.c",
        "s_nexttoward.c", "s_remquol.c", "s_rintl.c", "s_roundl.c", "s_scalbnl.c",
        "s_sinl.c", "s_tanhl.c", "s_tanl.c", "s_truncl.c", "w_cabsl.c" ]
    aarch64_c = [ "aarch64/fenv.c" ]
    arm_c = [ "arm/fenv-softfp.c", "arm/fenv-vfp.c", "arm/fenv.c" ]
    x86_64_c = [ "amd64/fenv.c" ]
    x86_64_a = concat [ find sInDir "amd64" ]
    
in [
    build library {
        target = "m",
        addIncludes = [ "src", "/lib/libc/" ++ (arch_path arch) ] ++ case ldbl_prec arch of
                        53 -> []
                        64 ->  [ "ld80" ]
                        113 ->  [ "ld128" ],
        assemblyFiles = if arch == "x86_64" then x86_64_a else [],
        cFiles = [ "src" </> a | a <- common_c
                    ++ (if ldbl_prec arch /= 53 then ldbl_c else [])]
                    ++ (case arch of
                        "x86_64" ->  x86_64_c
                        "k1om" ->  x86_64_c
                        "armv7" ->  arm_c
                        "armv8" ->  aarch64_c)
                    ++ (case ldbl_prec arch of
                        53 -> []
                        64 -> concat [ find sInDir "ld80" ]
                        113 -> concat [ find sInDir "ld128" ])
                    ++ bsdcommon_c,
        addCFlags =  case arch of
                        "x86_64" ->  [ "-DLDBL_PREC=64" ]
                        "k1om" ->  [ "-DLDBL_PREC=64" ]
                        "armv7" ->  [ "-DLDBL_PREC=53", "-mfpu=vfp3", "-mfloat-abi=hard" ]
                        "armv8" ->  [ "-DLDBL_PREC=113" ],
        omitCFlags = [ "-std=c99", "-Wmissing-prototypes", "-Wmissing-declarations", "-Wimplicit-function-declaration", "-Werror" ],
        architectures = [ arch ]
    } | arch <- ["x86_64", "k1om", "armv7", "armv8"]
]
