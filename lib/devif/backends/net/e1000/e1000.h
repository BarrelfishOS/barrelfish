/*
 * Copyright (c) 2017 ETH Zurich.
 * All rights reserved.
 *
 * This file is distributed under the terms in the attached LICENSE file.
 * If you do not find this file, copies can be found by writing to:
 * ETH Zurich D-INFK, Universitaetstr. 6, CH-8092 Zurich. Attn: Systems Group.
 */

#ifndef E1000_H
#define E1000_H

#include <devif/queue_interface.h>

#include <barrelfish/barrelfish.h>
#include <pci/pci.h>

#include <dev/e1000_dev.h>      /* auto generated by Mackerel */


/*
 * e1000 (e1000) device family id's.
 */
#define E1000_DEVICE_82542               0x1000
#define E1000_DEVICE_82543GC_FIBER       0x1001
#define E1000_DEVICE_82543GC_COPPER      0x1004
#define E1000_DEVICE_82544EI_COPPER      0x1008
#define E1000_DEVICE_82544EI_FIBER       0x1009
#define E1000_DEVICE_82544GC_COPPER      0x100C
#define E1000_DEVICE_82544GC_LOM         0x100D
#define E1000_DEVICE_82540EM             0x100E
#define E1000_DEVICE_82540EM_LOM         0x1015
#define E1000_DEVICE_82540EP_LOM         0x1016
#define E1000_DEVICE_82540EP             0x1017
#define E1000_DEVICE_82540EP_LP          0x101E
#define E1000_DEVICE_82545EM_COPPER      0x100F
#define E1000_DEVICE_82545EM_FIBER       0x1011
#define E1000_DEVICE_82545GM_COPPER      0x1026
#define E1000_DEVICE_82545GM_FIBER       0x1027
#define E1000_DEVICE_82545GM_SERDES      0x1028
#define E1000_DEVICE_82546EB_COPPER      0x1010
#define E1000_DEVICE_82546EB_FIBER       0x1012
#define E1000_DEVICE_82546EB_QUAD_COPPER 0x101D
#define E1000_DEVICE_82541EI             0x1013
#define E1000_DEVICE_82541EI_MOBILE      0x1018
#define E1000_DEVICE_82541ER_LOM         0x1014
#define E1000_DEVICE_82541ER             0x1078
#define E1000_DEVICE_82547GI             0x1075
#define E1000_DEVICE_82541GI             0x1076
#define E1000_DEVICE_82541GI_MOBILE      0x1077
#define E1000_DEVICE_82541GI_LF          0x107C
#define E1000_DEVICE_82546GB_COPPER      0x1079
#define E1000_DEVICE_82546GB_FIBER       0x107A
#define E1000_DEVICE_82546GB_SERDES      0x107B
#define E1000_DEVICE_82546GB_PCIE        0x108A
#define E1000_DEVICE_82546GB_QUAD_COPPER 0x1099
#define E1000_DEVICE_82563EB             0x1096
#define E1000_DEVICE_82547EI             0x1019
#define E1000_DEVICE_82547EI_MOBILE      0x101A
#define E1000_DEVICE_82571EB_COPPER      0x105E
#define E1000_DEVICE_82571EB_FIBER       0x105F
#define E1000_DEVICE_82571EB_SERDES      0x1060
#define E1000_DEVICE_82571EB_QUAD_COPPER 0x10A4
#define E1000_DEVICE_82571EB_QUAD_FIBER  0x10A5
#define E1000_DEVICE_82571EB_QUAD_COPPER_LOWPROFILE  0x10BC
#define E1000_DEVICE_82571EB_SERDES_DUAL 0x10D9
#define E1000_DEVICE_82571EB_SERDES_QUAD 0x10DA
#define E1000_DEVICE_82572EI_COPPER      0x107D
#define E1000_DEVICE_82572EI_FIBER       0x107E
#define E1000_DEVICE_82572EI_SERDES      0x107F
#define E1000_DEVICE_82572EI             0x10B9
#define E1000_DEVICE_82573E              0x108B
#define E1000_DEVICE_82573E_IAMT         0x108C
#define E1000_DEVICE_82573L              0x109A
#define E1000_DEVICE_82574L              0x10D3
#define E1000_DEVICE_82575EB             0x10A7 // TODO(gz): This cards needs more work
#define E1000_DEVICE_82576EG             0x10C9 // TODO(gz): This cards needs more work
#define E1000_DEVICE_I210                0x1533
#define E1000_DEVICE_I350_EEPROM_LESS    0x151F
#define E1000_DEVICE_I350_COPPER         0x1521
#define E1000_DEVICE_I350_FIBER          0x1522
#define E1000_DEVICE_I350_BACKPANE       0x1523
#define E1000_DEVICE_I350_SGMII          0x1524
#define E1000_DEVICE_I350_DUMMY          0x10A6
#define E1000_DEVICE_82546GB_QUAD_COPPER_KSP3 0x10B5

/**
 * Initial default values
 */

#define E1000_DEFAULT_INT_THROTTLE_RATE 100
#define E1000_INT_THROTTLE_RATE_DISABLED 0


/**
 * Group definitions for cards that share specification and quirks.
 *
 * e1000_82542 should be split into:
 *   e1000_82542_rev_2_1 and e1000_82542_rev_2_2.
 * This can be figured out reading the PCI bus.
 */
typedef enum {
    e1000_undefined = 0,
    e1000_82542,        /* revision 2.1 and 2.2 merged */
    e1000_82543,
    e1000_82544,
    e1000_82540,
    e1000_82545,
    e1000_82545_rev_3,
    e1000_82546,
    e1000_82546_rev_3,
    e1000_82541,
    e1000_82541_rev_2,
    e1000_82547,
    e1000_82547_rev_2,
    e1000_82563,
    e1000_82571,
    e1000_82572,
    e1000_82573,
    e1000_82574,
    e1000_82575,
    e1000_82576,
    e1000_I210,
    e1000_I350,
    e1000_num_macs
} e1000_mac_type_t;

/**
 * Hardware supported buffer sizes.
 */
typedef enum {
    bsize_256 = 256,
    bsize_512 = 512,
    bsize_1024 = 1024,
    bsize_2048 = 2048,
    bsize_4096 = 4096,
    bsize_8192 = 8192,
    bsize_16384 = 16384
} e1000_rx_bsize_t;


typedef struct e1000_queue {
    struct devq q;

    e1000_mac_type_t mac_type;
    e1000_t hw_device;
    uint32_t pci_vendor, pci_deviceid, pci_bus, pci_device, pci_function;
    char *name;
    uint64_t mac_address;

    volatile union rx_desc *receive_ring;
    volatile struct tx_desc *transmit_ring;

    int receive_buffers;
    int transmit_buffers;

    regionid_t region_id;
    genpaddr_t region_base;
    gensize_t  region_size;

    unsigned receive_head, receive_tail;
    unsigned transmit_head, transmit_tail;

    unsigned interrupt_mode;
    void (*isr)(void *);

    bool extended_interrupts;
    unsigned advanced_descriptors; // 0 - none, 1 - 82572/4, 3 - 82576/i210/i350
} e1000_queue_t;

typedef union {
    uint16_t   vlan;
    struct {
        uint16_t vlan :12;
        uint16_t cfi  :1;
        uint16_t pri  :3;
    } __attribute__((packed)) bits;
} __attribute__((packed)) vlan_tag_t;


union rx_desc {
    uint64_t raw[2] __attribute__((packed));
    struct {
        uint64_t buffer_address;
        struct {
            uint16_t   length;
            uint16_t   checksum;        /* reserved on: 82544GC/EI */
            struct {
                unsigned int   dd      :1;
                unsigned int   eop     :1;
                unsigned int   ixsm    :1;
                unsigned int   vp      :1;
                unsigned int   udpcs   :1;  /* reserved on: 8254x */
                unsigned int   tcpcs   :1;
                unsigned int   ipcs    :1;
                unsigned int   pif     :1;
            } __attribute__ ((packed)) status;

            union {
                uint8_t errors;
                struct {
                    uint8_t ce   :1;
                    uint8_t seq  :1;        /* reserved on: 82541xx, 82547GI/EI, and 82540EP/EM only. */
                    uint8_t res0 :1;        /* reserved on: 8254x */
                    uint8_t cxe  :1;        /* 82544GC/EI only */
                    uint8_t tcpe :1;
                    uint8_t ipe  :1;
                    uint8_t rxe  :1;
                } __attribute__ ((packed)) bits;
            } __attribute__ ((packed)) errors;
            vlan_tag_t vlan;
        } __attribute__ ((packed)) info;
    } __attribute__ ((packed)) rx_read_format;
} __attribute__ ((packed));


struct tx_desc {
    uint64_t buffer_address;
    union {
        uint64_t raw;
        struct {
            uint16_t data_len;
            uint8_t cso;
            union {
                uint8_t raw;
                struct {
                    uint8_t eop  :1;
                    uint8_t ifcs :1;
                    uint8_t ic   :1;
                    uint8_t rs   :1;
                    uint8_t rsv  :1;
                    uint8_t dext :1;
                    uint8_t vle  :1;
                    uint8_t ide  :1;
                } __attribute__ ((packed)) d;
            } __attribute__ ((packed)) cmd;
            union {
                uint8_t raw;
                struct {
                    uint8_t dd  :1;
                    uint8_t ec  :1;
                    uint8_t lc  :1;
                    uint8_t res :5;
                } __attribute__ ((packed)) d;
            } __attribute__ ((packed)) stat_rsv;
            uint8_t  css;
            uint16_t special;
        } __attribute__ ((packed)) legacy;

        struct {
            uint64_t data_len :20;
            uint64_t dtyp     :4;
            union {
                uint8_t raw;
                struct {
                    uint8_t eop  :1;
                    uint8_t ifcs :1;
                    uint8_t tse  :1;
                    uint8_t rs   :1;
                    uint8_t rsv  :1;
                    uint8_t dext :1;
                    uint8_t vle  :1;
                    uint8_t ide  :1;
                } __attribute__ ((packed)) d;
            } __attribute__ ((packed)) dcmd;
            union {
                uint8_t raw;
                struct {
                    uint8_t dd  :1;
                    uint8_t res :7;
                } __attribute__ ((packed)) d;
            } __attribute__ ((packed)) stat_rsv;
            union {
                uint8_t  raw;
                struct {
                    uint8_t ixsm : 1;
                    uint8_t txsm : 1;
                    uint8_t  res : 6;
                } __attribute__ ((packed)) d;
            } __attribute__ ((packed)) popts;
            vlan_tag_t vlan;
        } __attribute__ ((packed)) extended_data;

        struct {
            uint16_t dtalen;
            union {
                uint8_t raw;
                struct {
                    uint8_t rsv  :2;
                    uint8_t mac  :2;
                    uint8_t dtyp :4;
                } __attribute__ ((packed)) d;
            } __attribute__ ((packed)) dtyp;
            union {
                uint8_t raw;
                struct {
                    uint8_t eop  :1;
                    uint8_t ifcs :1;
                    uint8_t rsv1 :1;
                    uint8_t rs   :1;
                    uint8_t rsv2 :1;
                    uint8_t dext :1;
                    uint8_t vle  :1;
                    uint8_t tse  :1;
                } __attribute__ ((packed)) d;
            } __attribute__ ((packed)) dcmd;
            
            union {
                uint8_t raw;
                struct {
                    uint8_t dd   :1;
                    uint8_t rsv1 :3;
                    uint8_t idx  :3;
                    uint8_t rsv2 :1;
                } __attribute__ ((packed)) d;
            } __attribute__ ((packed)) stat_idx;

            union {
                uint8_t raw[3];
                struct {
                    uint8_t ixsm : 1;
                    uint8_t txsm : 1;
                    uint8_t ipsec: 1;
                    uint8_t rsv  : 3;
                    uint32_t paylen:18;
                } __attribute__ ((packed)) d;
            } __attribute__ ((packed)) popts_paylen;
        } __attribute__ ((packed)) advanced_data;
    } __attribute__ ((packed)) ctrl;
} __attribute__ ((packed));

/*
 * TCP/IP Context Descriptor Layout
 *
 * Provides access to enhanced checksum offload facility
 * available in the Ethernet controllerfor TCP and UDP packets.
 */
union context_desc {
    uint64_t raw;
    struct {
        uint8_t ipcss;
        uint8_t ipcso;
        uint16_t ipcse;
        uint8_t tucss;
        uint8_t tucso;
        uint16_t tucse;
        struct {
            uint32_t paylen :20;
            uint32_t dtype  :4;
        } __attribute__ ((packed)) pd;

        union {
            uint8_t raw;
            struct {
                uint8_t tcp  :1;
                uint8_t ip   :1;
                uint8_t tse  :1;
                uint8_t rs   :1;
                uint8_t rsv  :1;
                uint8_t dext :1;
                uint8_t snap :1;
                uint8_t ide  :1;
            } __attribute__ ((packed)) d;
        } __attribute__ ((packed)) tucmd;

        union {
            uint8_t raw;
            struct {
                uint8_t dd  :1;
                uint8_t res :7;
            } __attribute__ ((packed)) d;
        } __attribute__ ((packed)) stat_rsv;

        uint8_t hdrlen;
        uint16_t mss;

    } __attribute__ ((packed)) d;
} __attribute__ ((packed));


e1000_mac_type_t e1000_get_mac_type(uint32_t vendor, uint32_t device_id);
char * e1000_mac_type_to_str(e1000_mac_type_t mt);

#endif
