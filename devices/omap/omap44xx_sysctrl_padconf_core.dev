/*
 * Copyright (c) 2013 ETH Zurich. All rights reserved.
 *
 * This file is distributed under the terms in the attached LICENSE file.
 * If you do not find this file, copies can be found by writing to:
 * ETH Zurich D-INFK, CAB F.78, Universitaetstrasse 6, CH-8092 Zurich,
 * Attn: Systems Group.
 */

/*
 * omap44xx_sysctrl_padconf_core.dev
 *
 * DESCRIPTION: 
 *
 * NOTE: This file has been automatically generated based on the
 * XML files extracted from the TI RDT v1.0.0.4p Tool.
 * Download from here: http://www.ti.com/product/omap4460
 * This means that the file might not be optimal in terms of naming
 * conventions for constants and registers (duplicated
 * namespaces in register and device name etc.).
 * Also, because of the underlying structure from the original XML
 * it's possible that some constants appear multiple times (if they
 * have slightly different descriptions for example).
 *
 * You want to clean that up before using the files for the first time!
 */
 
device omap44xx_sysctrl_padconf_core msbfirst ( addr base ) "" {
    
    
    register control_padconf_core_revision ro addr(base, 0x0) "Control module revision identifier Access conditions. Read: unrestricted, Write: unrestricted" type(uint32);
    
    register control_padconf_core_hwinfo ro addr(base, 0x4) "Information about the IP module hardware configuration that is, typically the module HDL generics (if any). Access conditions. Read: unrestricted, Write: unrestricted" type(uint32);

    constants ip_sysconfig_idlemode_status width(2) "" {
        IP_SYSCONFIG_IDLEMODE_0 = 0 "Clock is manually gated";
        IP_SYSCONFIG_IDLEMODE_1 = 1 "Clock is manually enabled";
    };
    
    register control_padconf_core_sysconfig addr(base, 0x10) "Access conditions. Read: unrestricted, Write: unrestricted" {
        _ 28 mbz;
        ip_sysconfig_idlemode 2 rw type(ip_sysconfig_idlemode_status) "Select the local clock-gating strategy0x2,0x3: Clock is automatically gated when there is no access to the Control Module through L4-interconnect .";
        _ 2 mbz;
    };

    constants gpmc_ad1_wakeupevent_status width(1) "" {
        GPMC_AD1_WAKEUPEVENT_0_r = 0 "No wake-up event occurred";
        GPMC_AD1_WAKEUPEVENT_1_r = 1 "A wake-up event occurred";
    };

    constants gpmc_ad1_wakeupenable_status width(1) "" {
        GPMC_AD1_WAKEUPENABLE_0 = 0 "wake-up detection is disabled";
        GPMC_AD1_WAKEUPENABLE_1 = 1 "wake-up detection is enabled";
    };

    constants gpmc_ad1_offmodepulltypeselect_status width(1) "" {
        GPMC_AD1_OFFMODEPULLTYPESELECT_0 = 0 "Offmode pulldown selected";
        GPMC_AD1_OFFMODEPULLTYPESELECT_1 = 1 "Offmode pullup selected";
    };

    constants gpmc_ad1_offmodepulludenable_status width(1) "" {
        GPMC_AD1_OFFMODEPULLUDENABLE_0 = 0 "Offmode pullup/down disabled";
        GPMC_AD1_OFFMODEPULLUDENABLE_1 = 1 "Offmode pullup/down enabled";
    };

    constants gpmc_ad1_offmodeoutvalue_status width(1) "" {
        GPMC_AD1_OFFMODEOUTVALUE_0 = 0 "Set value at 0";
        GPMC_AD1_OFFMODEOUTVALUE_1 = 1 "Set value at 1";
    };

    constants gpmc_ad1_offmodeoutenable_status width(1) "" {
        GPMC_AD1_OFFMODEOUTENABLE_0 = 0 "Output enable";
        GPMC_AD1_OFFMODEOUTENABLE_1 = 1 "Output disable";
    };

    constants gpmc_ad1_offmodeenable_status width(1) "" {
        GPMC_AD1_OFFMODEENABLE_0 = 0 "I/O state keeps its previous state when OFF mode is active";
        GPMC_AD1_OFFMODEENABLE_1 = 1 "I/O state is forced to OFF mode value when OFF mode is active";
    };

    constants gpmc_ad1_inputenable_status width(1) "" {
        GPMC_AD1_INPUTENABLE_0 = 0 "Input buffer of I/O cell is disabled";
        GPMC_AD1_INPUTENABLE_1 = 1 "Input buffer of I/O cell is enabled";
    };

    constants gpmc_ad1_pulltypeselect_status width(1) "" {
        GPMC_AD1_PULLTYPESELECT_0 = 0 "pulldown selected";
        GPMC_AD1_PULLTYPESELECT_1 = 1 "pullup selected";
    };

    constants gpmc_ad1_pulludenable_status width(1) "" {
        GPMC_AD1_PULLUDENABLE_0 = 0 "pullup/down disabled";
        GPMC_AD1_PULLUDENABLE_1 = 1 "pullup/down enabled";
    };

    constants gpmc_ad1_muxmode_status width(3) "" {
        GPMC_AD1_MUXMODE_0 = 0 "Select gpmc_ad1";
        GPMC_AD1_MUXMODE_1 = 1 "Select sdmmc2_dat1";
    };

    constants gpmc_ad0_muxmode_status width(3) "" {
        GPMC_AD0_MUXMODE_0 = 0 "Select gpmc_ad0";
        GPMC_AD0_MUXMODE_1 = 1 "Select sdmmc2_dat0";
    };
    
    register control_core_pad0_gpmc_ad0_pad1_gpmc_ad1 addr(base, 0x40) "Register control for Pads gpmc_ad0 and gpmc_ad1 Access conditions. Read: unrestricted, Write: unrestricted" {
        gpmc_ad1_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the I/O";
        gpmc_ad1_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        gpmc_ad1_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad gpmc_ad1";
        gpmc_ad1_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad gpmc_ad1";
        gpmc_ad1_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad gpmc_ad1";
        gpmc_ad1_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad gpmc_ad1. This is an active low signal";
        gpmc_ad1_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad gpmc_ad1";
        gpmc_ad1_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad gpmc_ad1";
        _ 3 mbz;
        gpmc_ad1_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad gpmc_ad1";
        gpmc_ad1_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad gpmc_ad1";
        gpmc_ad1_muxmode 3 rw type(gpmc_ad1_muxmode_status) "Functional multiplexing selection for pad gpmc_ad1";
        gpmc_ad0_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        gpmc_ad0_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        gpmc_ad0_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad gpmc_ad0";
        gpmc_ad0_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad gpmc_ad0";
        gpmc_ad0_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad gpmc_ad0";
        gpmc_ad0_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad gpmc_ad0. This is an active low signal";
        gpmc_ad0_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad gpmc_ad0";
        gpmc_ad0_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad gpmc_ad0";
        _ 3 mbz;
        gpmc_ad0_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad gpmc_ad0";
        gpmc_ad0_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad gpmc_ad0";
        gpmc_ad0_muxmode 3 rw type(gpmc_ad0_muxmode_status) "Functional multiplexing selection for pad gpmc_ad0";
    };

    constants gpmc_ad3_muxmode_status width(3) "" {
        GPMC_AD3_MUXMODE_0 = 0 "Select gpmc_ad3";
        GPMC_AD3_MUXMODE_1 = 1 "Select sdmmc2_dat3";
    };

    constants gpmc_ad2_muxmode_status width(3) "" {
        GPMC_AD2_MUXMODE_0 = 0 "Select gpmc_ad2";
        GPMC_AD2_MUXMODE_1 = 1 "Select sdmmc2_dat2";
    };
    
    register control_core_pad0_gpmc_ad2_pad1_gpmc_ad3 addr(base, 0x44) "Register control for Pads gpmc_ad2 and gpmc_ad3 Access conditions. Read: unrestricted, Write: unrestricted" {
        gpmc_ad3_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        gpmc_ad3_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        gpmc_ad3_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad gpmc_ad3";
        gpmc_ad3_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad gpmc_ad3";
        gpmc_ad3_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad gpmc_ad3";
        gpmc_ad3_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad gpmc_ad3. This is an active low signal";
        gpmc_ad3_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad gpmc_ad3";
        gpmc_ad3_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad gpmc_ad3";
        _ 3 mbz;
        gpmc_ad3_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad gpmc_ad3";
        gpmc_ad3_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad gpmc_ad3";
        gpmc_ad3_muxmode 3 rw type(gpmc_ad3_muxmode_status) "Functional multiplexing selection for pad gpmc_ad3";
        gpmc_ad2_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        gpmc_ad2_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        gpmc_ad2_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad gpmc_ad2";
        gpmc_ad2_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad gpmc_ad2";
        gpmc_ad2_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad gpmc_ad2";
        gpmc_ad2_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad gpmc_ad2. This is an active low signal";
        gpmc_ad2_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad gpmc_ad2";
        gpmc_ad2_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad gpmc_ad2";
        _ 3 mbz;
        gpmc_ad2_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad gpmc_ad2";
        gpmc_ad2_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad gpmc_ad2";
        gpmc_ad2_muxmode 3 rw type(gpmc_ad2_muxmode_status) "Functional multiplexing selection for pad gpmc_ad2";
    };

    constants gpmc_ad5_muxmode_status width(3) "" {
        GPMC_AD5_MUXMODE_0 = 0 "Select gpmc_ad5";
        GPMC_AD5_MUXMODE_1 = 1 "Select sdmmc2_dat5";
        GPMC_AD5_MUXMODE_2 = 2 "Select sdmmc2_dir_dat1";
    };

    constants gpmc_ad4_muxmode_status width(3) "" {
        GPMC_AD4_MUXMODE_0 = 0 "Select gpmc_ad4";
        GPMC_AD4_MUXMODE_1 = 1 "Select sdmmc2_dat4";
        GPMC_AD4_MUXMODE_2 = 2 "Select sdmmc2_dir_dat0";
    };
    
    register control_core_pad0_gpmc_ad4_pad1_gpmc_ad5 addr(base, 0x48) "Register control for Pads gpmc_ad4 and gpmc_ad5 Access conditions. Read: unrestricted, Write: unrestricted" {
        gpmc_ad5_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        gpmc_ad5_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        gpmc_ad5_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad gpmc_ad5";
        gpmc_ad5_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad gpmc_ad5";
        gpmc_ad5_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad gpmc_ad5";
        gpmc_ad5_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad gpmc_ad5. This is an active low signal";
        gpmc_ad5_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad gpmc_ad5";
        gpmc_ad5_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad gpmc_ad5";
        _ 3 mbz;
        gpmc_ad5_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad gpmc_ad5";
        gpmc_ad5_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad gpmc_ad5";
        gpmc_ad5_muxmode 3 rw type(gpmc_ad5_muxmode_status) "Functional multiplexing selection for pad gpmc_ad5";
        gpmc_ad4_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        gpmc_ad4_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        gpmc_ad4_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad gpmc_ad4";
        gpmc_ad4_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad gpmc_ad4";
        gpmc_ad4_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad gpmc_ad4";
        gpmc_ad4_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad gpmc_ad4. This is an active low signal";
        gpmc_ad4_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad gpmc_ad4";
        gpmc_ad4_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad gpmc_ad4";
        _ 3 mbz;
        gpmc_ad4_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad gpmc_ad4";
        gpmc_ad4_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad gpmc_ad4";
        gpmc_ad4_muxmode 3 rw type(gpmc_ad4_muxmode_status) "Functional multiplexing selection for pad gpmc_ad4";
    };

    constants gpmc_ad7_muxmode_status width(3) "" {
        GPMC_AD7_MUXMODE_0 = 0 "Select gpmc_ad7";
        GPMC_AD7_MUXMODE_1 = 1 "Select sdmmc2_dat7";
        GPMC_AD7_MUXMODE_2 = 2 "Select sdmmc2_clk_fdbk";
    };

    constants gpmc_ad6_muxmode_status width(3) "" {
        GPMC_AD6_MUXMODE_0 = 0 "Select gpmc_ad6";
        GPMC_AD6_MUXMODE_1 = 1 "Select sdmmc2_dat6";
        GPMC_AD6_MUXMODE_2 = 2 "Select sdmmc2_dir_cmd";
    };
    
    register control_core_pad0_gpmc_ad6_pad1_gpmc_ad7 addr(base, 0x4C) "Register control for Pads gpmc_ad6 and gpmc_ad7 Access conditions. Read: unrestricted, Write: unrestricted" {
        gpmc_ad7_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        gpmc_ad7_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        gpmc_ad7_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad gpmc_ad7";
        gpmc_ad7_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad gpmc_ad7";
        gpmc_ad7_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad gpmc_ad7";
        gpmc_ad7_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad gpmc_ad7. This is an active low signal";
        gpmc_ad7_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad gpmc_ad7";
        gpmc_ad7_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad gpmc_ad7";
        _ 3 mbz;
        gpmc_ad7_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad gpmc_ad7";
        gpmc_ad7_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad gpmc_ad7";
        gpmc_ad7_muxmode 3 rw type(gpmc_ad7_muxmode_status) "Functional multiplexing selection for pad gpmc_ad7";
        gpmc_ad6_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        gpmc_ad6_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        gpmc_ad6_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad gpmc_ad6";
        gpmc_ad6_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad gpmc_ad6";
        gpmc_ad6_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad gpmc_ad6";
        gpmc_ad6_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad gpmc_ad6. This is an active low signal";
        gpmc_ad6_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad gpmc_ad6";
        gpmc_ad6_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad gpmc_ad6";
        _ 3 mbz;
        gpmc_ad6_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad gpmc_ad6";
        gpmc_ad6_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad gpmc_ad6";
        gpmc_ad6_muxmode 3 rw type(gpmc_ad6_muxmode_status) "Functional multiplexing selection for pad gpmc_ad6";
    };

    constants gpmc_ad9_muxmode_status width(3) "" {
        GPMC_AD9_MUXMODE_0 = 0 "Select gpmc_ad9";
        GPMC_AD9_MUXMODE_1 = 1 "Select kpd_row1";
        GPMC_AD9_MUXMODE_2 = 2 "Select c2c_data14";
        GPMC_AD9_MUXMODE_3 = 3 "Select gpio_33";
        GPMC_AD9_MUXMODE_5 = 5 "Select sdmmc1_dat1";
    };

    constants gpmc_ad8_muxmode_status width(3) "" {
        GPMC_AD8_MUXMODE_0 = 0 "Select gpmc_ad8";
        GPMC_AD8_MUXMODE_1 = 1 "Select kpd_row0";
        GPMC_AD8_MUXMODE_2 = 2 "Select c2c_data15";
        GPMC_AD8_MUXMODE_3 = 3 "Select gpio_32";
        GPMC_AD8_MUXMODE_5 = 5 "Select sdmmc1_dat0";
    };
    
    register control_core_pad0_gpmc_ad8_pad1_gpmc_ad9 addr(base, 0x50) "Register control for Pads gpmc_ad8 and gpmc_ad9 Access conditions. Read: unrestricted, Write: unrestricted" {
        gpmc_ad9_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        gpmc_ad9_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        gpmc_ad9_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad gpmc_ad9";
        gpmc_ad9_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad gpmc_ad9";
        gpmc_ad9_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad gpmc_ad9";
        gpmc_ad9_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad gpmc_ad9. This is an active low signal";
        gpmc_ad9_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad gpmc_ad9";
        gpmc_ad9_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad gpmc_ad9";
        _ 3 mbz;
        gpmc_ad9_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad gpmc_ad9";
        gpmc_ad9_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad gpmc_ad9";
        gpmc_ad9_muxmode 3 rw type(gpmc_ad9_muxmode_status) "Functional multiplexing selection for pad gpmc_ad9";
        gpmc_ad8_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        gpmc_ad8_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        gpmc_ad8_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad gpmc_ad8";
        gpmc_ad8_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad gpmc_ad8";
        gpmc_ad8_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad gpmc_ad8";
        gpmc_ad8_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad gpmc_ad8. This is an active low signal";
        gpmc_ad8_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad gpmc_ad8";
        gpmc_ad8_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad gpmc_ad8";
        _ 3 mbz;
        gpmc_ad8_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad gpmc_ad8";
        gpmc_ad8_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad gpmc_ad8";
        gpmc_ad8_muxmode 3 rw type(gpmc_ad8_muxmode_status) "Functional multiplexing selection for pad gpmc_ad8";
    };

    constants gpmc_ad11_muxmode_status width(3) "" {
        GPMC_AD11_MUXMODE_0 = 0 "Select gpmc_ad11";
        GPMC_AD11_MUXMODE_1 = 1 "Select kpd_row3";
        GPMC_AD11_MUXMODE_2 = 2 "Select c2c_data12";
        GPMC_AD11_MUXMODE_3 = 3 "Select gpio_35";
        GPMC_AD11_MUXMODE_5 = 5 "Select sdmmc1_dat3";
    };

    constants gpmc_ad10_muxmode_status width(3) "" {
        GPMC_AD10_MUXMODE_0 = 0 "Select gpmc_ad10";
        GPMC_AD10_MUXMODE_1 = 1 "Select kpd_row2";
        GPMC_AD10_MUXMODE_2 = 2 "Select c2c_data13";
        GPMC_AD10_MUXMODE_3 = 3 "Select gpio_34";
        GPMC_AD10_MUXMODE_5 = 5 "Select sdmmc1_dat2";
    };
    
    register control_core_pad0_gpmc_ad10_pad1_gpmc_ad11 addr(base, 0x54) "Register control for Pads gpmc_ad10 and gpmc_ad11 Access conditions. Read: unrestricted, Write: unrestricted" {
        gpmc_ad11_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        gpmc_ad11_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        gpmc_ad11_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad gpmc_ad11";
        gpmc_ad11_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad gpmc_ad11";
        gpmc_ad11_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad gpmc_ad11";
        gpmc_ad11_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad gpmc_ad11. This is an active low signal";
        gpmc_ad11_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad gpmc_ad11";
        gpmc_ad11_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad gpmc_ad11";
        _ 3 mbz;
        gpmc_ad11_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad gpmc_ad11";
        gpmc_ad11_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad gpmc_ad11";
        gpmc_ad11_muxmode 3 rw type(gpmc_ad11_muxmode_status) "Functional multiplexing selection for pad gpmc_ad11";
        gpmc_ad10_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        gpmc_ad10_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        gpmc_ad10_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad gpmc_ad10";
        gpmc_ad10_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad gpmc_ad10";
        gpmc_ad10_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad gpmc_ad10";
        gpmc_ad10_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad gpmc_ad10. This is an active low signal";
        gpmc_ad10_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad gpmc_ad10";
        gpmc_ad10_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad gpmc_ad10";
        _ 3 mbz;
        gpmc_ad10_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad gpmc_ad10";
        gpmc_ad10_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad gpmc_ad10";
        gpmc_ad10_muxmode 3 rw type(gpmc_ad10_muxmode_status) "Functional multiplexing selection for pad gpmc_ad10";
    };

    constants gpmc_ad13_muxmode_status width(3) "" {
        GPMC_AD13_MUXMODE_0 = 0 "Select gpmc_ad13";
        GPMC_AD13_MUXMODE_1 = 1 "Select kpd_col1";
        GPMC_AD13_MUXMODE_2 = 2 "Select c2c_data10";
        GPMC_AD13_MUXMODE_3 = 3 "Select gpio_37";
        GPMC_AD13_MUXMODE_5 = 5 "Select sdmmc1_dat5";
    };

    constants gpmc_ad12_muxmode_status width(3) "" {
        GPMC_AD12_MUXMODE_0 = 0 "Select gpmc_ad12";
        GPMC_AD12_MUXMODE_1 = 1 "Select kpd_col0";
        GPMC_AD12_MUXMODE_2 = 2 "Select c2c_data11";
        GPMC_AD12_MUXMODE_3 = 3 "Select gpio_36";
        GPMC_AD12_MUXMODE_5 = 5 "Select sdmmc1_dat4";
    };
    
    register control_core_pad0_gpmc_ad12_pad1_gpmc_ad13 addr(base, 0x58) "Register control for Pads gpmc_ad12 and gpmc_ad13 Access conditions. Read: unrestricted, Write: unrestricted" {
        gpmc_ad13_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        gpmc_ad13_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        gpmc_ad13_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad gpmc_ad13";
        gpmc_ad13_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad gpmc_ad13";
        gpmc_ad13_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad gpmc_ad13";
        gpmc_ad13_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad gpmc_ad13. This is an active low signal";
        gpmc_ad13_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad gpmc_ad13";
        gpmc_ad13_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad gpmc_ad13";
        _ 3 mbz;
        gpmc_ad13_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad gpmc_ad13";
        gpmc_ad13_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad gpmc_ad13";
        gpmc_ad13_muxmode 3 rw type(gpmc_ad13_muxmode_status) "Functional multiplexing selection for pad gpmc_ad13";
        gpmc_ad12_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        gpmc_ad12_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        gpmc_ad12_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad gpmc_ad12";
        gpmc_ad12_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad gpmc_ad12";
        gpmc_ad12_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad gpmc_ad12";
        gpmc_ad12_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad gpmc_ad12. This is an active low signal";
        gpmc_ad12_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad gpmc_ad12";
        gpmc_ad12_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad gpmc_ad12";
        _ 3 mbz;
        gpmc_ad12_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad gpmc_ad12";
        gpmc_ad12_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad gpmc_ad12";
        gpmc_ad12_muxmode 3 rw type(gpmc_ad12_muxmode_status) "Functional multiplexing selection for pad gpmc_ad12";
    };

    constants gpmc_ad15_muxmode_status width(3) "" {
        GPMC_AD15_MUXMODE_0 = 0 "Select gpmc_ad15";
        GPMC_AD15_MUXMODE_1 = 1 "Select kpd_col3";
        GPMC_AD15_MUXMODE_2 = 2 "Select c2c_data8";
        GPMC_AD15_MUXMODE_3 = 3 "Select gpio_39";
        GPMC_AD15_MUXMODE_5 = 5 "Select sdmmc1_dat7";
    };

    constants gpmc_ad14_muxmode_status width(3) "" {
        GPMC_AD14_MUXMODE_0 = 0 "Select gpmc_ad14";
        GPMC_AD14_MUXMODE_1 = 1 "Select kpd_col2";
        GPMC_AD14_MUXMODE_2 = 2 "Select c2c_data9";
        GPMC_AD14_MUXMODE_3 = 3 "Select gpio_38";
        GPMC_AD14_MUXMODE_5 = 5 "Select sdmmc1_dat6";
    };
    
    register control_core_pad0_gpmc_ad14_pad1_gpmc_ad15 addr(base, 0x5C) "Register control for Pads gpmc_ad14 and gpmc_ad15 Access conditions. Read: unrestricted, Write: unrestricted" {
        gpmc_ad15_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        gpmc_ad15_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        gpmc_ad15_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad gpmc_ad15";
        gpmc_ad15_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad gpmc_ad15";
        gpmc_ad15_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad gpmc_ad15";
        gpmc_ad15_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad gpmc_ad15. This is an active low signal";
        gpmc_ad15_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad gpmc_ad15";
        gpmc_ad15_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad gpmc_ad15";
        _ 3 mbz;
        gpmc_ad15_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad gpmc_ad15";
        gpmc_ad15_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad gpmc_ad15";
        gpmc_ad15_muxmode 3 rw type(gpmc_ad15_muxmode_status) "Functional multiplexing selection for pad gpmc_ad15";
        gpmc_ad14_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        gpmc_ad14_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        gpmc_ad14_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad gpmc_ad14";
        gpmc_ad14_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad gpmc_ad14";
        gpmc_ad14_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad gpmc_ad14";
        gpmc_ad14_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad gpmc_ad14. This is an active low signal";
        gpmc_ad14_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad gpmc_ad14";
        gpmc_ad14_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad gpmc_ad14";
        _ 3 mbz;
        gpmc_ad14_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad gpmc_ad14";
        gpmc_ad14_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad gpmc_ad14";
        gpmc_ad14_muxmode 3 rw type(gpmc_ad14_muxmode_status) "Functional multiplexing selection for pad gpmc_ad14";
    };

    constants gpmc_a17_muxmode_status width(3) "" {
        GPMC_A17_MUXMODE_0 = 0 "Select gpmc_a17";
        GPMC_A17_MUXMODE_1 = 1 "Select kpd_row5";
        GPMC_A17_MUXMODE_2 = 2 "Select c2c_datain1";
        GPMC_A17_MUXMODE_3 = 3 "Select gpio_41";
        GPMC_A17_MUXMODE_4 = 4 "Select venc_656_data1";
        GPMC_A17_MUXMODE_7 = 7 "Select safe_mode";
    };

    constants gpmc_a16_muxmode_status width(3) "" {
        GPMC_A16_MUXMODE_0 = 0 "Select gpmc_a16";
        GPMC_A16_MUXMODE_1 = 1 "Select kpd_row4";
        GPMC_A16_MUXMODE_2 = 2 "Select c2c_datain0";
        GPMC_A16_MUXMODE_3 = 3 "Select gpio_40";
        GPMC_A16_MUXMODE_4 = 4 "Select venc_656_data0";
        GPMC_A16_MUXMODE_7 = 7 "Select safe_mode";
    };
    
    register control_core_pad0_gpmc_a16_pad1_gpmc_a17 addr(base, 0x60) "Register control for Pads gpmc_a16 and gpmc_a17 Access conditions. Read: unrestricted, Write: unrestricted" {
        gpmc_a17_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        gpmc_a17_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        gpmc_a17_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad gpmc_a17";
        gpmc_a17_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad gpmc_a17";
        gpmc_a17_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad gpmc_a17";
        gpmc_a17_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad gpmc_a17. This is an active low signal";
        gpmc_a17_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad gpmc_a17";
        gpmc_a17_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad gpmc_a17";
        _ 3 mbz;
        gpmc_a17_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad gpmc_a17";
        gpmc_a17_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad gpmc_a17";
        gpmc_a17_muxmode 3 rw type(gpmc_a17_muxmode_status) "Functional multiplexing selection for pad gpmc_a17";
        gpmc_a16_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        gpmc_a16_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        gpmc_a16_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad gpmc_a16";
        gpmc_a16_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad gpmc_a16";
        gpmc_a16_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad gpmc_a16";
        gpmc_a16_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad gpmc_a16. This is an active low signal";
        gpmc_a16_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad gpmc_a16";
        gpmc_a16_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad gpmc_a16";
        _ 3 mbz;
        gpmc_a16_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad gpmc_a16";
        gpmc_a16_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad gpmc_a16";
        gpmc_a16_muxmode 3 rw type(gpmc_a16_muxmode_status) "Functional multiplexing selection for pad gpmc_a16";
    };

    constants gpmc_a19_muxmode_status width(3) "" {
        GPMC_A19_MUXMODE_0 = 0 "Select gpmc_a19";
        GPMC_A19_MUXMODE_1 = 1 "Select kpd_row7";
        GPMC_A19_MUXMODE_2 = 2 "Select c2c_datain3";
        GPMC_A19_MUXMODE_3 = 3 "Select gpio_43";
        GPMC_A19_MUXMODE_4 = 4 "Select venc_656_data3";
        GPMC_A19_MUXMODE_7 = 7 "Select safe_mode";
    };

    constants gpmc_a18_muxmode_status width(3) "" {
        GPMC_A18_MUXMODE_0 = 0 "Select gpmc_a18";
        GPMC_A18_MUXMODE_1 = 1 "Select kpd_row6";
        GPMC_A18_MUXMODE_2 = 2 "Select c2c_datain2";
        GPMC_A18_MUXMODE_3 = 3 "Select gpio_42";
        GPMC_A18_MUXMODE_4 = 4 "Select venc_656_data2";
        GPMC_A18_MUXMODE_7 = 7 "Select safe_mode";
    };
    
    register control_core_pad0_gpmc_a18_pad1_gpmc_a19 addr(base, 0x64) "Register control for Pads gpmc_a18 and gpmc_a19 Access conditions. Read: unrestricted, Write: unrestricted" {
        gpmc_a19_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        gpmc_a19_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        gpmc_a19_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad gpmc_a19";
        gpmc_a19_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad gpmc_a19";
        gpmc_a19_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad gpmc_a19";
        gpmc_a19_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad gpmc_a19. This is an active low signal";
        gpmc_a19_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad gpmc_a19";
        gpmc_a19_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad gpmc_a19";
        _ 3 mbz;
        gpmc_a19_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad gpmc_a19";
        gpmc_a19_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad gpmc_a19";
        gpmc_a19_muxmode 3 rw type(gpmc_a19_muxmode_status) "Functional multiplexing selection for pad gpmc_a19";
        gpmc_a18_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        gpmc_a18_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        gpmc_a18_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad gpmc_a18";
        gpmc_a18_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad gpmc_a18";
        gpmc_a18_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad gpmc_a18";
        gpmc_a18_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad gpmc_a18. This is an active low signal";
        gpmc_a18_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad gpmc_a18";
        gpmc_a18_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad gpmc_a18";
        _ 3 mbz;
        gpmc_a18_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad gpmc_a18";
        gpmc_a18_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad gpmc_a18";
        gpmc_a18_muxmode 3 rw type(gpmc_a18_muxmode_status) "Functional multiplexing selection for pad gpmc_a18";
    };

    constants gpmc_a21_muxmode_status width(3) "" {
        GPMC_A21_MUXMODE_0 = 0 "Select gpmc_a21";
        GPMC_A21_MUXMODE_1 = 1 "Select kpd_col5";
        GPMC_A21_MUXMODE_2 = 2 "Select c2c_datain5";
        GPMC_A21_MUXMODE_3 = 3 "Select gpio_45";
        GPMC_A21_MUXMODE_4 = 4 "Select venc_656_data5";
        GPMC_A21_MUXMODE_7 = 7 "Select safe_mode";
    };

    constants gpmc_a20_muxmode_status width(3) "" {
        GPMC_A20_MUXMODE_0 = 0 "Select gpmc_a20";
        GPMC_A20_MUXMODE_1 = 1 "Select kpd_col4";
        GPMC_A20_MUXMODE_2 = 2 "Select c2c_datain4";
        GPMC_A20_MUXMODE_3 = 3 "Select gpio_44";
        GPMC_A20_MUXMODE_4 = 4 "Select venc_656_data4";
        GPMC_A20_MUXMODE_7 = 7 "Select safe_mode";
    };
    
    register control_core_pad0_gpmc_a20_pad1_gpmc_a21 addr(base, 0x68) "Register control for Pads gpmc_a20 and gpmc_a21 Access conditions. Read: unrestricted, Write: unrestricted" {
        gpmc_a21_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        gpmc_a21_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        gpmc_a21_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad gpmc_a21";
        gpmc_a21_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad gpmc_a21";
        gpmc_a21_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad gpmc_a21";
        gpmc_a21_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad gpmc_a21. This is an active low signal";
        gpmc_a21_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad gpmc_a21";
        gpmc_a21_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad gpmc_a21";
        _ 3 mbz;
        gpmc_a21_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad gpmc_a21";
        gpmc_a21_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad gpmc_a21";
        gpmc_a21_muxmode 3 rw type(gpmc_a21_muxmode_status) "Functional multiplexing selection for pad gpmc_a21";
        gpmc_a20_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        gpmc_a20_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        gpmc_a20_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad gpmc_a20";
        gpmc_a20_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad gpmc_a20";
        gpmc_a20_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad gpmc_a20";
        gpmc_a20_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad gpmc_a20. This is an active low signal";
        gpmc_a20_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad gpmc_a20";
        gpmc_a20_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad gpmc_a20";
        _ 3 mbz;
        gpmc_a20_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad gpmc_a20";
        gpmc_a20_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad gpmc_a20";
        gpmc_a20_muxmode 3 rw type(gpmc_a20_muxmode_status) "Functional multiplexing selection for pad gpmc_a20";
    };

    constants gpmc_a23_muxmode_status width(3) "" {
        GPMC_A23_MUXMODE_0 = 0 "Select gpmc_a23";
        GPMC_A23_MUXMODE_1 = 1 "Select kpd_col7";
        GPMC_A23_MUXMODE_2 = 2 "Select c2c_datain7";
        GPMC_A23_MUXMODE_3 = 3 "Select gpio_47";
        GPMC_A23_MUXMODE_4 = 4 "Select venc_656_data7";
        GPMC_A23_MUXMODE_7 = 7 "Select safe_mode";
    };

    constants gpmc_a22_muxmode_status width(3) "" {
        GPMC_A22_MUXMODE_0 = 0 "Select gpmc_a22";
        GPMC_A22_MUXMODE_1 = 1 "Select kpd_col6";
        GPMC_A22_MUXMODE_2 = 2 "Select c2c_datain6";
        GPMC_A22_MUXMODE_3 = 3 "Select gpio_46";
        GPMC_A22_MUXMODE_4 = 4 "Select venc_656_data6";
        GPMC_A22_MUXMODE_7 = 7 "Select safe_mode";
    };
    
    register control_core_pad0_gpmc_a22_pad1_gpmc_a23 addr(base, 0x6C) "Register control for Pads gpmc_a22 and gpmc_a23 Access conditions. Read: unrestricted, Write: unrestricted" {
        gpmc_a23_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        gpmc_a23_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        gpmc_a23_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad gpmc_a23";
        gpmc_a23_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad gpmc_a23";
        gpmc_a23_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad gpmc_a23";
        gpmc_a23_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad gpmc_a23. This is an active low signal";
        gpmc_a23_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad gpmc_a23";
        gpmc_a23_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad gpmc_a23";
        _ 3 mbz;
        gpmc_a23_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad gpmc_a23";
        gpmc_a23_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad gpmc_a23";
        gpmc_a23_muxmode 3 rw type(gpmc_a23_muxmode_status) "Functional multiplexing selection for pad gpmc_a23";
        gpmc_a22_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        gpmc_a22_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        gpmc_a22_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad gpmc_a22";
        gpmc_a22_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad gpmc_a22";
        gpmc_a22_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad gpmc_a22";
        gpmc_a22_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad gpmc_a22. This is an active low signal";
        gpmc_a22_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad gpmc_a22";
        gpmc_a22_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad gpmc_a22";
        _ 3 mbz;
        gpmc_a22_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad gpmc_a22";
        gpmc_a22_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad gpmc_a22";
        gpmc_a22_muxmode 3 rw type(gpmc_a22_muxmode_status) "Functional multiplexing selection for pad gpmc_a22";
    };

    constants gpmc_a25_muxmode_status width(3) "" {
        GPMC_A25_MUXMODE_0 = 0 "Select gpmc_a25";
        GPMC_A25_MUXMODE_2 = 2 "Select c2c_clkout1";
        GPMC_A25_MUXMODE_3 = 3 "Select gpio_49";
        GPMC_A25_MUXMODE_7 = 7 "Select safe_mode";
    };

    constants gpmc_a24_muxmode_status width(3) "" {
        GPMC_A24_MUXMODE_0 = 0 "Select gpmc_a24";
        GPMC_A24_MUXMODE_1 = 1 "Select kpd_col8";
        GPMC_A24_MUXMODE_2 = 2 "Select c2c_clkout0";
        GPMC_A24_MUXMODE_3 = 3 "Select gpio_48";
        GPMC_A24_MUXMODE_7 = 7 "Select safe_mode";
    };
    
    register control_core_pad0_gpmc_a24_pad1_gpmc_a25 addr(base, 0x70) "Register control for Pads gpmc_a24 and gpmc_a25 Access conditions. Read: unrestricted, Write: unrestricted" {
        gpmc_a25_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        gpmc_a25_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        gpmc_a25_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad gpmc_a25";
        gpmc_a25_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad gpmc_a25";
        gpmc_a25_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad gpmc_a25";
        gpmc_a25_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad gpmc_a25. This is an active low signal";
        gpmc_a25_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad gpmc_a25";
        gpmc_a25_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad gpmc_a25";
        _ 3 mbz;
        gpmc_a25_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad gpmc_a25";
        gpmc_a25_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad gpmc_a25";
        gpmc_a25_muxmode 3 rw type(gpmc_a25_muxmode_status) "Functional multiplexing selection for pad gpmc_a25";
        gpmc_a24_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        gpmc_a24_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        gpmc_a24_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad gpmc_a24";
        gpmc_a24_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad gpmc_a24";
        gpmc_a24_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad gpmc_a24";
        gpmc_a24_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad gpmc_a24. This is an active low signal";
        gpmc_a24_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad gpmc_a24";
        gpmc_a24_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad gpmc_a24";
        _ 3 mbz;
        gpmc_a24_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad gpmc_a24";
        gpmc_a24_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad gpmc_a24";
        gpmc_a24_muxmode 3 rw type(gpmc_a24_muxmode_status) "Functional multiplexing selection for pad gpmc_a24";
    };

    constants gpmc_ncs1_muxmode_status width(3) "" {
        GPMC_NCS1_MUXMODE_0 = 0 "Select gpmc_ncs1";
        GPMC_NCS1_MUXMODE_2 = 2 "Select c2c_dataout6";
        GPMC_NCS1_MUXMODE_3 = 3 "Select gpio_51";
        GPMC_NCS1_MUXMODE_7 = 7 "Select safe_mode";
    };

    constants gpmc_ncs0_muxmode_status width(3) "" {
        GPMC_NCS0_MUXMODE_0 = 0 "Select gpmc_ncs0";
        GPMC_NCS0_MUXMODE_3 = 3 "Select gpio_50";
        GPMC_NCS0_MUXMODE_4 = 4 "Select sys_ndmareq0";
    };
    
    register control_core_pad0_gpmc_ncs0_pad1_gpmc_ncs1 addr(base, 0x74) "Register control for Pads gpmc_ncs0 and gpmc_ncs1 Access conditions. Read: unrestricted, Write: unrestricted" {
        gpmc_ncs1_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        gpmc_ncs1_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        gpmc_ncs1_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad gpmc_ncs1";
        gpmc_ncs1_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad gpmc_ncs1";
        gpmc_ncs1_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad gpmc_ncs1";
        gpmc_ncs1_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad gpmc_ncs1. This is an active low signal";
        gpmc_ncs1_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad gpmc_ncs1";
        gpmc_ncs1_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad gpmc_ncs1";
        _ 3 mbz;
        gpmc_ncs1_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad gpmc_ncs1";
        gpmc_ncs1_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad gpmc_ncs1";
        gpmc_ncs1_muxmode 3 rw type(gpmc_ncs1_muxmode_status) "Functional multiplexing selection for pad gpmc_ncs1";
        gpmc_ncs0_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        gpmc_ncs0_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        gpmc_ncs0_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad gpmc_ncs0";
        gpmc_ncs0_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad gpmc_ncs0";
        gpmc_ncs0_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad gpmc_ncs0";
        gpmc_ncs0_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad gpmc_ncs0. This is an active low signal";
        gpmc_ncs0_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad gpmc_ncs0";
        gpmc_ncs0_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad gpmc_ncs0";
        _ 3 mbz;
        gpmc_ncs0_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad gpmc_ncs0";
        gpmc_ncs0_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad gpmc_ncs0";
        gpmc_ncs0_muxmode 3 rw type(gpmc_ncs0_muxmode_status) "Functional multiplexing selection for pad gpmc_ncs0";
    };

    constants gpmc_ncs3_muxmode_status width(3) "" {
        GPMC_NCS3_MUXMODE_0 = 0 "Select gpmc_ncs3";
        GPMC_NCS3_MUXMODE_1 = 1 "Select gpmc_dir";
        GPMC_NCS3_MUXMODE_2 = 2 "Select c2c_dataout4";
        GPMC_NCS3_MUXMODE_3 = 3 "Select gpio_53";
        GPMC_NCS3_MUXMODE_7 = 7 "Select safe_mode";
    };

    constants gpmc_ncs2_muxmode_status width(3) "" {
        GPMC_NCS2_MUXMODE_0 = 0 "Select gpmc_ncs2";
        GPMC_NCS2_MUXMODE_1 = 1 "Select kpd_row8";
        GPMC_NCS2_MUXMODE_2 = 2 "Select c2c_dataout7";
        GPMC_NCS2_MUXMODE_3 = 3 "Select gpio_52";
        GPMC_NCS2_MUXMODE_7 = 7 "Select safe_mode";
    };
    
    register control_core_pad0_gpmc_ncs2_pad1_gpmc_ncs3 addr(base, 0x78) "Register control for Pads gpmc_ncs2 and gpmc_ncs3 Access conditions. Read: unrestricted, Write: unrestricted" {
        gpmc_ncs3_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        gpmc_ncs3_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        gpmc_ncs3_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad gpmc_ncs3";
        gpmc_ncs3_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad gpmc_ncs3";
        gpmc_ncs3_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad gpmc_ncs3";
        gpmc_ncs3_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad gpmc_ncs3. This is an active low signal";
        gpmc_ncs3_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad gpmc_ncs3";
        gpmc_ncs3_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad gpmc_ncs3";
        _ 3 mbz;
        gpmc_ncs3_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad gpmc_ncs3";
        gpmc_ncs3_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad gpmc_ncs3";
        gpmc_ncs3_muxmode 3 rw type(gpmc_ncs3_muxmode_status) "Functional multiplexing selection for pad gpmc_ncs3";
        gpmc_ncs2_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        gpmc_ncs2_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        gpmc_ncs2_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad gpmc_ncs2";
        gpmc_ncs2_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad gpmc_ncs2";
        gpmc_ncs2_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad gpmc_ncs2";
        gpmc_ncs2_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad gpmc_ncs2. This is an active low signal";
        gpmc_ncs2_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad gpmc_ncs2";
        gpmc_ncs2_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad gpmc_ncs2";
        _ 3 mbz;
        gpmc_ncs2_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad gpmc_ncs2";
        gpmc_ncs2_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad gpmc_ncs2";
        gpmc_ncs2_muxmode 3 rw type(gpmc_ncs2_muxmode_status) "Functional multiplexing selection for pad gpmc_ncs2";
    };

    constants gpmc_clk_muxmode_status width(3) "" {
        GPMC_CLK_MUXMODE_0 = 0 "Select gpmc_clk";
        GPMC_CLK_MUXMODE_3 = 3 "Select gpio_55";
        GPMC_CLK_MUXMODE_4 = 4 "Select sys_ndmareq2";
        GPMC_CLK_MUXMODE_5 = 5 "Select sdmmc1_cmd";
    };

    constants gpmc_nwp_muxmode_status width(3) "" {
        GPMC_NWP_MUXMODE_0 = 0 "Select gpmc_nwp";
        GPMC_NWP_MUXMODE_1 = 1 "Select dsi1_te0";
        GPMC_NWP_MUXMODE_3 = 3 "Select gpio_54";
        GPMC_NWP_MUXMODE_4 = 4 "Select sys_ndmareq1";
    };
    
    register control_core_pad0_gpmc_nwp_pad1_gpmc_clk addr(base, 0x7C) "Register control for Pads gpmc_nwp and gpmc_clk Access conditions. Read: unrestricted, Write: unrestricted" {
        gpmc_clk_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        gpmc_clk_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        gpmc_clk_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad gpmc_clk";
        gpmc_clk_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad gpmc_clk";
        gpmc_clk_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad gpmc_clk";
        gpmc_clk_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad gpmc_clk. This is an active low signal";
        gpmc_clk_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad gpmc_clk";
        gpmc_clk_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad gpmc_clk";
        _ 3 mbz;
        gpmc_clk_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad gpmc_clk";
        gpmc_clk_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad gpmc_clk";
        gpmc_clk_muxmode 3 rw type(gpmc_clk_muxmode_status) "Functional multiplexing selection for pad gpmc_clk";
        gpmc_nwp_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        gpmc_nwp_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        gpmc_nwp_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad gpmc_nwp";
        gpmc_nwp_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad gpmc_nwp";
        gpmc_nwp_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad gpmc_nwp";
        gpmc_nwp_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad gpmc_nwp. This is an active low signal";
        gpmc_nwp_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad gpmc_nwp";
        gpmc_nwp_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad gpmc_nwp";
        _ 3 mbz;
        gpmc_nwp_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad gpmc_nwp";
        gpmc_nwp_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad gpmc_nwp";
        gpmc_nwp_muxmode 3 rw type(gpmc_nwp_muxmode_status) "Functional multiplexing selection for pad gpmc_nwp";
    };

    constants gpmc_noe_muxmode_status width(3) "" {
        GPMC_NOE_MUXMODE_0 = 0 "Select gpmc_noe";
        GPMC_NOE_MUXMODE_1 = 1 "Select sdmmc2_clk";
    };

    constants gpmc_nadv_ale_muxmode_status width(3) "" {
        GPMC_NADV_ALE_MUXMODE_0 = 0 "Select gpmc_nadv_ale";
        GPMC_NADV_ALE_MUXMODE_1 = 1 "Select dsi1_te1";
        GPMC_NADV_ALE_MUXMODE_3 = 3 "Select gpio_56";
        GPMC_NADV_ALE_MUXMODE_4 = 4 "Select sys_ndmareq3";
        GPMC_NADV_ALE_MUXMODE_5 = 5 "Select sdmmc1_clk";
    };
    
    register control_core_pad0_gpmc_nadv_ale_pad1_gpmc_noe addr(base, 0x80) "Register control for Pads gpmc_nadv_ale and gpmc_noe Access conditions. Read: unrestricted, Write: unrestricted" {
        gpmc_noe_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        gpmc_noe_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        gpmc_noe_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad gpmc_noe";
        gpmc_noe_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad gpmc_noe";
        gpmc_noe_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad gpmc_noe";
        gpmc_noe_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad gpmc_noe. This is an active low signal";
        gpmc_noe_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad gpmc_noe";
        gpmc_noe_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad gpmc_noe";
        _ 3 mbz;
        gpmc_noe_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad gpmc_noe";
        gpmc_noe_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad gpmc_noe";
        gpmc_noe_muxmode 3 rw type(gpmc_noe_muxmode_status) "Functional multiplexing selection for pad gpmc_noe";
        gpmc_nadv_ale_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        gpmc_nadv_ale_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        gpmc_nadv_ale_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad gpmc_nadv_ale";
        gpmc_nadv_ale_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad gpmc_nadv_ale";
        gpmc_nadv_ale_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad gpmc_nadv_ale";
        gpmc_nadv_ale_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad gpmc_nadv_ale. This is an active low signal";
        gpmc_nadv_ale_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad gpmc_nadv_ale";
        gpmc_nadv_ale_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad gpmc_nadv_ale";
        _ 3 mbz;
        gpmc_nadv_ale_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad gpmc_nadv_ale";
        gpmc_nadv_ale_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad gpmc_nadv_ale";
        gpmc_nadv_ale_muxmode 3 rw type(gpmc_nadv_ale_muxmode_status) "Functional multiplexing selection for pad gpmc_nadv_ale";
    };

    constants gpmc_nbe0_cle_muxmode_status width(3) "" {
        GPMC_NBE0_CLE_MUXMODE_0 = 0 "Select gpmc_nbe0_cle";
        GPMC_NBE0_CLE_MUXMODE_1 = 1 "Select dsi2_te0";
        GPMC_NBE0_CLE_MUXMODE_3 = 3 "Select gpio_59";
    };

    constants gpmc_nwe_muxmode_status width(3) "" {
        GPMC_NWE_MUXMODE_0 = 0 "Select gpmc_nwe";
        GPMC_NWE_MUXMODE_1 = 1 "Select sdmmc2_cmd";
    };
    
    register control_core_pad0_gpmc_nwe_pad1_gpmc_nbe0_cle addr(base, 0x84) "Register control for Pads gpmc_nwe and gpmc_nbe0_cle Access conditions. Read: unrestricted, Write: unrestricted" {
        gpmc_nbe0_cle_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        gpmc_nbe0_cle_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        gpmc_nbe0_cle_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad gpmc_nbe0_cle";
        gpmc_nbe0_cle_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad gpmc_nbe0_cle";
        gpmc_nbe0_cle_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad gpmc_nbe0_cle";
        gpmc_nbe0_cle_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad gpmc_nbe0_cle. This is an active low signal";
        gpmc_nbe0_cle_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad gpmc_nbe0_cle";
        gpmc_nbe0_cle_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad gpmc_nbe0_cle";
        _ 3 mbz;
        gpmc_nbe0_cle_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad gpmc_nbe0_cle";
        gpmc_nbe0_cle_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad gpmc_nbe0_cle";
        gpmc_nbe0_cle_muxmode 3 rw type(gpmc_nbe0_cle_muxmode_status) "Functional multiplexing selection for pad gpmc_nbe0_cle";
        gpmc_nwe_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        gpmc_nwe_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        gpmc_nwe_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad gpmc_nwe";
        gpmc_nwe_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad gpmc_nwe";
        gpmc_nwe_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad gpmc_nwe";
        gpmc_nwe_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad gpmc_nwe. This is an active low signal";
        gpmc_nwe_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad gpmc_nwe";
        gpmc_nwe_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad gpmc_nwe";
        _ 3 mbz;
        gpmc_nwe_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad gpmc_nwe";
        gpmc_nwe_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad gpmc_nwe";
        gpmc_nwe_muxmode 3 rw type(gpmc_nwe_muxmode_status) "Functional multiplexing selection for pad gpmc_nwe";
    };

    constants gpmc_wait0_muxmode_status width(3) "" {
        GPMC_WAIT0_MUXMODE_0 = 0 "Select gpmc_wait0";
        GPMC_WAIT0_MUXMODE_1 = 1 "Select dsi2_te1";
        GPMC_WAIT0_MUXMODE_3 = 3 "Select gpio_61";
    };

    constants gpmc_nbe1_muxmode_status width(3) "" {
        GPMC_NBE1_MUXMODE_0 = 0 "Select gpmc_nbe1";
        GPMC_NBE1_MUXMODE_2 = 2 "Select c2c_dataout5";
        GPMC_NBE1_MUXMODE_3 = 3 "Select gpio_60";
        GPMC_NBE1_MUXMODE_7 = 7 "Select safe_mode";
    };
    
    register control_core_pad0_gpmc_nbe1_pad1_gpmc_wait0 addr(base, 0x88) "Register control for Pads gpmc_nbe1 and gpmc_wait0 Access conditions. Read: unrestricted, Write: unrestricted" {
        gpmc_wait0_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        gpmc_wait0_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        gpmc_wait0_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad gpmc_wait0";
        gpmc_wait0_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad gpmc_wait0";
        gpmc_wait0_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad gpmc_wait0";
        gpmc_wait0_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad gpmc_wait0. This is an active low signal";
        gpmc_wait0_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad gpmc_wait0";
        gpmc_wait0_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad gpmc_wait0";
        _ 3 mbz;
        gpmc_wait0_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad gpmc_wait0";
        gpmc_wait0_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad gpmc_wait0";
        gpmc_wait0_muxmode 3 rw type(gpmc_wait0_muxmode_status) "Functional multiplexing selection for pad gpmc_wait0";
        gpmc_nbe1_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        gpmc_nbe1_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        gpmc_nbe1_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad gpmc_nbe1";
        gpmc_nbe1_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad gpmc_nbe1";
        gpmc_nbe1_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad gpmc_nbe1";
        gpmc_nbe1_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad gpmc_nbe1. This is an active low signal";
        gpmc_nbe1_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad gpmc_nbe1";
        gpmc_nbe1_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad gpmc_nbe1";
        _ 3 mbz;
        gpmc_nbe1_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad gpmc_nbe1";
        gpmc_nbe1_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad gpmc_nbe1";
        gpmc_nbe1_muxmode 3 rw type(gpmc_nbe1_muxmode_status) "Functional multiplexing selection for pad gpmc_nbe1";
    };

    constants gpmc_wait2_muxmode_status width(3) "" {
        GPMC_WAIT2_MUXMODE_0 = 0 "Select gpmc_wait2";
        GPMC_WAIT2_MUXMODE_1 = 1 "Select usbc1_icusb_txen";
        GPMC_WAIT2_MUXMODE_2 = 2 "Select c2c_dataout3";
        GPMC_WAIT2_MUXMODE_3 = 3 "Select gpio_100";
        GPMC_WAIT2_MUXMODE_4 = 4 "Select sys_ndmareq0";
        GPMC_WAIT2_MUXMODE_7 = 7 "Select safe_mode";
    };

    constants gpmc_wait1_muxmode_status width(3) "" {
        GPMC_WAIT1_MUXMODE_0 = 0 "Select gpmc_wait1";
        GPMC_WAIT1_MUXMODE_2 = 2 "Select c2c_dataout2";
        GPMC_WAIT1_MUXMODE_3 = 3 "Select gpio_62";
        GPMC_WAIT1_MUXMODE_7 = 7 "Select safe_mode";
    };
    
    register control_core_pad0_gpmc_wait1_pad1_gpmc_wait2 addr(base, 0x8C) "Register control for Pads gpmc_wait1 and gpmc_wait2 Access conditions. Read: unrestricted, Write: unrestricted" {
        gpmc_wait2_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        gpmc_wait2_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        gpmc_wait2_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad gpmc_wait2";
        gpmc_wait2_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad gpmc_wait2";
        gpmc_wait2_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad gpmc_wait2";
        gpmc_wait2_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad gpmc_wait2. This is an active low signal";
        gpmc_wait2_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad gpmc_wait2";
        gpmc_wait2_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad gpmc_wait2";
        _ 3 mbz;
        gpmc_wait2_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad gpmc_wait2";
        gpmc_wait2_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad gpmc_wait2";
        gpmc_wait2_muxmode 3 rw type(gpmc_wait2_muxmode_status) "Functional multiplexing selection for pad gpmc_wait2";
        gpmc_wait1_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        gpmc_wait1_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        gpmc_wait1_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad gpmc_wait1";
        gpmc_wait1_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad gpmc_wait1";
        gpmc_wait1_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad gpmc_wait1";
        gpmc_wait1_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad gpmc_wait1. This is an active low signal";
        gpmc_wait1_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad gpmc_wait1";
        gpmc_wait1_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad gpmc_wait1";
        _ 3 mbz;
        gpmc_wait1_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad gpmc_wait1";
        gpmc_wait1_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad gpmc_wait1";
        gpmc_wait1_muxmode 3 rw type(gpmc_wait1_muxmode_status) "Functional multiplexing selection for pad gpmc_wait1";
    };

    constants gpmc_ncs5_muxmode_status width(3) "" {
        GPMC_NCS5_MUXMODE_0 = 0 "Select gpmc_ncs5";
        GPMC_NCS5_MUXMODE_1 = 1 "Select dsi1_te1";
        GPMC_NCS5_MUXMODE_2 = 2 "Select c2c_clkin1";
        GPMC_NCS5_MUXMODE_3 = 3 "Select gpio_102";
        GPMC_NCS5_MUXMODE_4 = 4 "Select sys_ndmareq2";
        GPMC_NCS5_MUXMODE_7 = 7 "Select safe_mode";
    };

    constants gpmc_ncs4_muxmode_status width(3) "" {
        GPMC_NCS4_MUXMODE_0 = 0 "Select gpmc_ncs4";
        GPMC_NCS4_MUXMODE_1 = 1 "Select dsi1_te0";
        GPMC_NCS4_MUXMODE_2 = 2 "Select c2c_clkin0";
        GPMC_NCS4_MUXMODE_3 = 3 "Select gpio_101";
        GPMC_NCS4_MUXMODE_4 = 4 "Select sys_ndmareq1";
        GPMC_NCS4_MUXMODE_7 = 7 "Select safe_mode";
    };
    
    register control_core_pad0_gpmc_ncs4_pad1_gpmc_ncs5 addr(base, 0x90) "Register control for Pads gpmc_ncs4 and gpmc_ncs5 Access conditions. Read: unrestricted, Write: unrestricted" {
        gpmc_ncs5_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        gpmc_ncs5_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        gpmc_ncs5_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad gpmc_ncs5";
        gpmc_ncs5_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad gpmc_ncs5";
        gpmc_ncs5_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad gpmc_ncs5";
        gpmc_ncs5_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad gpmc_ncs5 . This is an active low signal";
        gpmc_ncs5_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad gpmc_ncs5";
        gpmc_ncs5_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad gpmc_ncs5";
        _ 3 mbz;
        gpmc_ncs5_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad gpmc_ncs5";
        gpmc_ncs5_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad gpmc_ncs5";
        gpmc_ncs5_muxmode 3 rw type(gpmc_ncs5_muxmode_status) "Functional multiplexing selection for pad gpmc_ncs5";
        gpmc_ncs4_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        gpmc_ncs4_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        gpmc_ncs4_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad gpmc_ncs4";
        gpmc_ncs4_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad gpmc_ncs4";
        gpmc_ncs4_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad gpmc_ncs4";
        gpmc_ncs4_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad gpmc_ncs4. This is an active low signal";
        gpmc_ncs4_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad gpmc_ncs4";
        gpmc_ncs4_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad gpmc_ncs4";
        _ 3 mbz;
        gpmc_ncs4_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad gpmc_ncs4";
        gpmc_ncs4_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad gpmc_cs4";
        gpmc_ncs4_muxmode 3 rw type(gpmc_ncs4_muxmode_status) "Functional multiplexing selection for pad gpmc_ncs4";
    };

    constants gpmc_ncs7_muxmode_status width(3) "" {
        GPMC_NCS7_MUXMODE_0 = 0 "Select gpmc_ncs7";
        GPMC_NCS7_MUXMODE_1 = 1 "Select dsi2_te1";
        GPMC_NCS7_MUXMODE_2 = 2 "Select c2c_dataout1";
        GPMC_NCS7_MUXMODE_3 = 3 "Select gpio_104";
        GPMC_NCS7_MUXMODE_7 = 7 "Select safe_mode";
    };

    constants gpmc_ncs6_muxmode_status width(3) "" {
        GPMC_NCS6_MUXMODE_0 = 0 "Select gpmc_ncs6";
        GPMC_NCS6_MUXMODE_1 = 1 "Select dsi2_te0";
        GPMC_NCS6_MUXMODE_2 = 2 "Select c2c_dataout0";
        GPMC_NCS6_MUXMODE_3 = 3 "Select gpio_103";
        GPMC_NCS6_MUXMODE_4 = 4 "Select sys_ndmareq3";
        GPMC_NCS6_MUXMODE_7 = 7 "Select safe_mode";
    };
    
    register control_core_pad0_gpmc_ncs6_pad1_gpmc_ncs7 addr(base, 0x94) "Register control for Pads gpmc_ncs6 and gpmc_ncs7 Access conditions. Read: unrestricted, Write: unrestricted" {
        gpmc_ncs7_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        gpmc_ncs7_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        gpmc_ncs7_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad gpmc_ncs7";
        gpmc_ncs7_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad gpmc_ncs7";
        gpmc_ncs7_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad gpmc_ncs7";
        gpmc_ncs7_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad gpmc_ncs7. This is an active low signal";
        gpmc_ncs7_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad gpmc_ncs7";
        gpmc_ncs7_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad gpmc_ncs7";
        _ 3 mbz;
        gpmc_ncs7_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad gpmc_ncs7";
        gpmc_ncs7_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad gpmc_ncs7";
        gpmc_ncs7_muxmode 3 rw type(gpmc_ncs7_muxmode_status) "Functional multiplexing selection for pad gpmc_ncs7";
        gpmc_ncs6_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        gpmc_ncs6_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        gpmc_ncs6_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad gpmc_ncs6";
        gpmc_ncs6_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad gpmc_ncs6";
        gpmc_ncs6_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad gpmc_ncs6";
        gpmc_ncs6_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad gpmc_ncs6. This is an active low signal";
        gpmc_ncs6_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad gpmc_ncs6";
        gpmc_ncs6_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad gpmc_ncs6";
        _ 3 mbz;
        gpmc_ncs6_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad gpmc_ncs6";
        gpmc_ncs6_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad gpmc_ncs6";
        gpmc_ncs6_muxmode 3 rw type(gpmc_ncs6_muxmode_status) "Functional multiplexing selection for pad gpmc_ncs6";
    };

    constants gpio64_muxmode_status width(3) "" {
        GPIO64_MUXMODE_0 = 0 "Reserved";
        GPIO64_MUXMODE_3 = 3 "Select gpio_64";
        GPIO64_MUXMODE_7 = 7 "Select safe_mode";
    };

    constants gpio63_muxmode_status width(3) "" {
        GPIO63_MUXMODE_0 = 0 "Reserved";
        GPIO63_MUXMODE_3 = 3 "Select gpio_63";
        GPIO63_MUXMODE_7 = 7 "Select safe_mode";
    };
    
    register control_core_pad0_gpio63_pad1_gpio64 addr(base, 0x98) "Register control for Pads gpio63 and gpio64 Access conditions. Read: unrestricted, Write: unrestricted" {
        gpio64_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        gpio64_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        gpio64_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad gpio64";
        gpio64_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad gpio64";
        gpio64_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad gpio64";
        gpio64_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad gpio64. This is an active low signal";
        gpio64_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad gpio64";
        gpio64_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad gpio64";
        _ 3 mbz;
        gpio64_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad gpio64";
        gpio64_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad gpio64";
        gpio64_muxmode 3 rw type(gpio64_muxmode_status) "Functional multiplexing selection for pad gpio64";
        gpio63_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        gpio63_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        gpio63_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad gpio63";
        gpio63_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad gpio63";
        gpio63_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad gpio63";
        gpio63_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad gpio63. This is an active low signal";
        gpio63_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad gpio63";
        gpio63_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad gpio63";
        _ 3 mbz;
        gpio63_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad gpio63";
        gpio63_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad gpio63";
        gpio63_muxmode 3 rw type(gpio63_muxmode_status) "Functional multiplexing selection for pad gpio63";
    };

    constants gpio66_muxmode_status width(3) "" {
        GPIO66_MUXMODE_0 = 0 "Reserved";
        GPIO66_MUXMODE_3 = 3 "Select gpio_66";
        GPIO66_MUXMODE_7 = 7 "Select safe_mode";
    };

    constants gpio65_muxmode_status width(3) "" {
        GPIO65_MUXMODE_0 = 0 "Reserved";
        GPIO65_MUXMODE_3 = 3 "Select gpio_65";
        GPIO65_MUXMODE_7 = 7 "Select safe_mode";
    };
    
    register control_core_pad0_gpio65_pad1_gpio66 addr(base, 0x9C) "Register control for Pads gpio65 and gpio66 Access conditions. Read: unrestricted, Write: unrestricted" {
        gpio66_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        gpio66_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        gpio66_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad gpio66";
        gpio66_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad gpio66";
        gpio66_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad gpio66";
        gpio66_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad gpio66. This is an active low signal";
        gpio66_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad gpio66";
        gpio66_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad gpio66";
        _ 3 mbz;
        gpio66_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad gpio66";
        gpio66_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad gpio66";
        gpio66_muxmode 3 rw type(gpio66_muxmode_status) "Functional multiplexing selection for pad gpio66";
        gpio65_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        gpio65_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        gpio65_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad gpio65";
        gpio65_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad gpio65";
        gpio65_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad GPIO65";
        gpio65_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad gpio65. This is an active low signal";
        gpio65_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad gpio65";
        gpio65_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad gpio65";
        _ 3 mbz;
        gpio65_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad gpio65";
        gpio65_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad gpio65";
        gpio65_muxmode 3 rw type(gpio65_muxmode_status) "Functional multiplexing selection for pad gpio65";
    };

    constants csi21_dy0_muxmode_status width(3) "" {
        CSI21_DY0_MUXMODE_0 = 0 "Select csi21_dy0";
        CSI21_DY0_MUXMODE_3 = 3 "Select gpi_68";
        CSI21_DY0_MUXMODE_7 = 7 "Select safe_mode";
    };

    constants csi21_dx0_muxmode_status width(3) "" {
        CSI21_DX0_MUXMODE_0 = 0 "Select csi21_dx0";
        CSI21_DX0_MUXMODE_3 = 3 "Select gpi_67";
        CSI21_DX0_MUXMODE_7 = 7 "Select safe_mode";
    };
    
    register control_core_pad0_csi21_dx0_pad1_csi21_dy0 addr(base, 0xA0) "Register control for Pads csi21_dx0 and csi21_dy0 Access conditions. Read: unrestricted, Write: unrestricted" {
        csi21_dy0_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        csi21_dy0_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        _ 5 mbz;
        csi21_dy0_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad csi21_dy0";
        _ 3 mbz;
        csi21_dy0_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad csi21_dy0";
        csi21_dy0_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad csi21_dy0";
        csi21_dy0_muxmode 3 rw type(csi21_dy0_muxmode_status) "Functional multiplexing selection for pad csi21_dy0";
        csi21_dx0_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        csi21_dx0_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        _ 5 mbz;
        csi21_dx0_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad csi21_dx0";
        _ 3 mbz;
        csi21_dx0_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad csi21_dx0";
        csi21_dx0_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad csi21_dx0";
        csi21_dx0_muxmode 3 rw type(csi21_dx0_muxmode_status) "Functional multiplexing selection for pad csi21_dx0";
    };

    constants csi21_dy1_muxmode_status width(3) "" {
        CSI21_DY1_MUXMODE_0 = 0 "Select csi21_dy1";
        CSI21_DY1_MUXMODE_3 = 3 "Select gpi_70";
        CSI21_DY1_MUXMODE_7 = 7 "Select safe_mode";
    };

    constants csi21_dx1_muxmode_status width(3) "" {
        CSI21_DX1_MUXMODE_0 = 0 "Select csi21_dx1";
        CSI21_DX1_MUXMODE_3 = 3 "Select gpi_69";
        CSI21_DX1_MUXMODE_7 = 7 "Select safe_mode";
    };
    
    register control_core_pad0_csi21_dx1_pad1_csi21_dy1 addr(base, 0xA4) "Register control for Pads csi21_dx1 and csi21_dy1 Access conditions. Read: unrestricted, Write: unrestricted" {
        csi21_dy1_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        csi21_dy1_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        _ 5 mbz;
        csi21_dy1_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad csi21_dy1";
        _ 3 mbz;
        csi21_dy1_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad csi21_dy1";
        csi21_dy1_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad csi21_dy1";
        csi21_dy1_muxmode 3 rw type(csi21_dy1_muxmode_status) "Functional multiplexing selection for pad csi21_dy1";
        csi21_dx1_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        csi21_dx1_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        _ 5 mbz;
        csi21_dx1_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad csi21_dx1";
        _ 3 mbz;
        csi21_dx1_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad csi21_dx1";
        csi21_dx1_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad csi21_dx1";
        csi21_dx1_muxmode 3 rw type(csi21_dx1_muxmode_status) "Functional multiplexing selection for pad csi21_dx1";
    };

    constants csi21_dy2_muxmode_status width(3) "" {
        CSI21_DY2_MUXMODE_0 = 0 "Select csi21_dy2";
        CSI21_DY2_MUXMODE_3 = 3 "Select gpi_72";
        CSI21_DY2_MUXMODE_7 = 7 "Select safe_mode";
    };

    constants csi21_dx2_muxmode_status width(3) "" {
        CSI21_DX2_MUXMODE_0 = 0 "Select csi21_dx2";
        CSI21_DX2_MUXMODE_3 = 3 "Select gpi_71";
        CSI21_DX2_MUXMODE_7 = 7 "Select safe_mode";
    };
    
    register control_core_pad0_csi21_dx2_pad1_csi21_dy2 addr(base, 0xA8) "Register control for Pads csi21_dx2 and csi21_dy2 Access conditions. Read: unrestricted, Write: unrestricted" {
        csi21_dy2_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        csi21_dy2_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        _ 5 mbz;
        csi21_dy2_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad csi21_dy2";
        _ 3 mbz;
        csi21_dy2_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad csi21_dy2";
        csi21_dy2_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad csi21_dy2";
        csi21_dy2_muxmode 3 rw type(csi21_dy2_muxmode_status) "Functional multiplexing selection for pad csi21_dy2";
        csi21_dx2_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        csi21_dx2_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        _ 5 mbz;
        csi21_dx2_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad csi21_dx2";
        _ 3 mbz;
        csi21_dx2_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad csi21_dx2";
        csi21_dx2_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad csi21_dx2";
        csi21_dx2_muxmode 3 rw type(csi21_dx2_muxmode_status) "Functional multiplexing selection for pad csi21_dx2";
    };

    constants csi21_dy3_muxmode_status width(3) "" {
        CSI21_DY3_MUXMODE_0 = 0 "Select csi21_dy3";
        CSI21_DY3_MUXMODE_1 = 1 "Select cam2_d6";
        CSI21_DY3_MUXMODE_3 = 3 "Select gpi_74";
        CSI21_DY3_MUXMODE_7 = 7 "Select safe_mode";
    };

    constants csi21_dx3_muxmode_status width(3) "" {
        CSI21_DX3_MUXMODE_0 = 0 "Select csi21_dx3";
        CSI21_DX3_MUXMODE_1 = 1 "Select cam2_d7";
        CSI21_DX3_MUXMODE_3 = 3 "Select gpi_73";
        CSI21_DX3_MUXMODE_7 = 7 "Select safe_mode";
    };
    
    register control_core_pad0_csi21_dx3_pad1_csi21_dy3 addr(base, 0xAC) "Register control for Pads csi21_dx3 and csi21_dy3 Access conditions. Read: unrestricted, Write: unrestricted" {
        csi21_dy3_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        csi21_dy3_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        _ 5 mbz;
        csi21_dy3_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad csi21_dy3";
        _ 3 mbz;
        csi21_dy3_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad csi21_dy3";
        csi21_dy3_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad csi21_dy3";
        csi21_dy3_muxmode 3 rw type(csi21_dy3_muxmode_status) "Functional multiplexing selection for pad csi21_dy3";
        csi21_dx3_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        csi21_dx3_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        _ 5 mbz;
        csi21_dx3_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad csi21_dx3";
        _ 3 mbz;
        csi21_dx3_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad csi21_dx3";
        csi21_dx3_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad csi21_dx3";
        csi21_dx3_muxmode 3 rw type(csi21_dx3_muxmode_status) "Functional multiplexing selection for pad csi21_dx3";
    };

    constants csi21_dy4_muxmode_status width(3) "" {
        CSI21_DY4_MUXMODE_0 = 0 "Select csi21_dy4";
        CSI21_DY4_MUXMODE_1 = 1 "Select cam2_d4";
        CSI21_DY4_MUXMODE_3 = 3 "Select gpi_76";
        CSI21_DY4_MUXMODE_7 = 7 "Select safe_mode";
    };

    constants csi21_dx4_muxmode_status width(3) "" {
        CSI21_DX4_MUXMODE_0 = 0 "Select csi21_dx4";
        CSI21_DX4_MUXMODE_1 = 1 "Select cam2_d5";
        CSI21_DX4_MUXMODE_3 = 3 "Select gpi_75";
        CSI21_DX4_MUXMODE_7 = 7 "Select safe_mode";
    };
    
    register control_core_pad0_csi21_dx4_pad1_csi21_dy4 addr(base, 0xB0) "Register control for Pads csi21_dx4 and csi21_dy4 Access conditions. Read: unrestricted, Write: unrestricted" {
        csi21_dy4_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        csi21_dy4_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        _ 5 mbz;
        csi21_dy4_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad csi21_dy4";
        _ 3 mbz;
        csi21_dy4_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad csi21_dy4";
        csi21_dy4_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad csi21_dy4";
        csi21_dy4_muxmode 3 rw type(csi21_dy4_muxmode_status) "Functional multiplexing selection for pad csi21_dy4";
        csi21_dx4_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        csi21_dx4_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        _ 5 mbz;
        csi21_dx4_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad csi21_dx4";
        _ 3 mbz;
        csi21_dx4_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad csi21_dx4";
        csi21_dx4_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad csi21_dx4";
        csi21_dx4_muxmode 3 rw type(csi21_dx4_muxmode_status) "Functional multiplexing selection for pad csi21_dx4";
    };

    constants csi22_dy0_muxmode_status width(3) "" {
        CSI22_DY0_MUXMODE_0 = 0 "Select csi22_dy0";
        CSI22_DY0_MUXMODE_1 = 1 "Select cam2_d2";
        CSI22_DY0_MUXMODE_2 = 2 "Select cam2_d13";
        CSI22_DY0_MUXMODE_3 = 3 "Select gpi_78";
        CSI22_DY0_MUXMODE_7 = 7 "Select safe_mode";
    };

    constants csi22_dx0_muxmode_status width(3) "" {
        CSI22_DX0_MUXMODE_0 = 0 "Select csi22_dx0";
        CSI22_DX0_MUXMODE_1 = 1 "Select cam2_d3";
        CSI22_DX0_MUXMODE_2 = 2 "Select cam2_d12";
        CSI22_DX0_MUXMODE_3 = 3 "Select gpi_77";
        CSI22_DX0_MUXMODE_7 = 7 "Select safe_mode";
    };
    
    register control_core_pad0_csi22_dx0_pad1_csi22_dy0 addr(base, 0xB4) "Register control for Pads csi22_dx0 and csi22_dy0 Access conditions. Read: unrestricted, Write: unrestricted" {
        csi22_dy0_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        csi22_dy0_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        _ 5 mbz;
        csi22_dy0_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad csi22_dy0";
        _ 3 mbz;
        csi22_dy0_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad csi22_dy0";
        csi22_dy0_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad csi22_dy0";
        csi22_dy0_muxmode 3 rw type(csi22_dy0_muxmode_status) "Functional multiplexing selection for pad csi22_dy0";
        csi22_dx0_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        csi22_dx0_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        _ 5 mbz;
        csi22_dx0_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad csi22_dx0";
        _ 3 mbz;
        csi22_dx0_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad csi22_dx0";
        csi22_dx0_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad csi22_dx0";
        csi22_dx0_muxmode 3 rw type(csi22_dx0_muxmode_status) "Functional multiplexing selection for pad csi22_dx0";
    };

    constants csi22_dy1_muxmode_status width(3) "" {
        CSI22_DY1_MUXMODE_0 = 0 "Select csi22_dy1";
        CSI22_DY1_MUXMODE_1 = 1 "Select cam2_d0";
        CSI22_DY1_MUXMODE_2 = 2 "Select cam2_d15";
        CSI22_DY1_MUXMODE_3 = 3 "Select gpi_80";
        CSI22_DY1_MUXMODE_7 = 7 "Select safe_mode";
    };

    constants csi22_dx1_muxmode_status width(3) "" {
        CSI22_DX1_MUXMODE_0 = 0 "Select csi22_dx1";
        CSI22_DX1_MUXMODE_1 = 1 "Select cam2_d1";
        CSI22_DX1_MUXMODE_2 = 2 "Select cam2_14";
        CSI22_DX1_MUXMODE_3 = 3 "Select gpi_79";
        CSI22_DX1_MUXMODE_7 = 7 "Select safe_mode";
    };
    
    register control_core_pad0_csi22_dx1_pad1_csi22_dy1 addr(base, 0xB8) "Register control for Pads csi22_dx1 and csi22_dy1 Access conditions. Read: unrestricted, Write: unrestricted" {
        csi22_dy1_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        csi22_dy1_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        _ 5 mbz;
        csi22_dy1_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad csi22_dy1";
        _ 3 mbz;
        csi22_dy1_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad csi22_dy1";
        csi22_dy1_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad csi22_dy1";
        csi22_dy1_muxmode 3 rw type(csi22_dy1_muxmode_status) "Functional multiplexing selection for pad csi22_dy1";
        csi22_dx1_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        csi22_dx1_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        _ 5 mbz;
        csi22_dx1_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad csi22_dx1";
        _ 3 mbz;
        csi22_dx1_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad csi22_dx1";
        csi22_dx1_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad csi22_dx1";
        csi22_dx1_muxmode 3 rw type(csi22_dx1_muxmode_status) "Functional multiplexing selection for pad csi22_dx1";
    };

    constants cam_strobe_muxmode_status width(3) "" {
        CAM_STROBE_MUXMODE_0 = 0 "Select cam_strobe";
        CAM_STROBE_MUXMODE_2 = 2 "Select cam2_vs";
        CAM_STROBE_MUXMODE_3 = 3 "Select gpio_82";
        CAM_STROBE_MUXMODE_7 = 7 "Select safe_mode";
    };

    constants cam_shutter_muxmode_status width(3) "" {
        CAM_SHUTTER_MUXMODE_0 = 0 "Select cam_shutter";
        CAM_SHUTTER_MUXMODE_2 = 2 "Select cam2_hs";
        CAM_SHUTTER_MUXMODE_3 = 3 "Select gpio_81";
        CAM_SHUTTER_MUXMODE_7 = 7 "Select safe_mode";
    };
    
    register control_core_pad0_cam_shutter_pad1_cam_strobe addr(base, 0xBC) "Register control for Pads cam_shutter and cam_strobe Access conditions. Read: unrestricted, Write: unrestricted" {
        cam_strobe_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        cam_strobe_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        cam_strobe_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad cam_strobe";
        cam_strobe_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad cam_strobe";
        cam_strobe_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad cam_strobe";
        cam_strobe_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad cam_strobe. This is an active low signal";
        cam_strobe_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad cam_strobe";
        cam_strobe_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad cam_strobe";
        _ 3 mbz;
        cam_strobe_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad cam_strobe";
        cam_strobe_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad cam_strobe";
        cam_strobe_muxmode 3 rw type(cam_strobe_muxmode_status) "Functional multiplexing selection for pad cam_strobe";
        cam_shutter_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        cam_shutter_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        cam_shutter_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad cam_shutter";
        cam_shutter_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad cam_shutter";
        cam_shutter_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad cam_shutter";
        cam_shutter_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad cam_shutter. This is an active low signal";
        cam_shutter_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad cam_shutter";
        cam_shutter_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad cam_shutter";
        _ 3 mbz;
        cam_shutter_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad cam_shutter";
        cam_shutter_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad cam_shutter";
        cam_shutter_muxmode 3 rw type(cam_shutter_muxmode_status) "Functional multiplexing selection for pad cam_shutter";
    };

    constants usbb1_ulpitll_clk_muxmode_status width(3) "" {
        USBB1_ULPITLL_CLK_MUXMODE_0 = 0 "Select usbb1_ulpitll_clk";
        USBB1_ULPITLL_CLK_MUXMODE_1 = 1 "Select hsi1_cawake";
        USBB1_ULPITLL_CLK_MUXMODE_3 = 3 "Select gpio_84";
        USBB1_ULPITLL_CLK_MUXMODE_4 = 4 "Select usbb1_ulpiphy_clk";
        USBB1_ULPITLL_CLK_MUXMODE_6 = 6 "Select hw_dbg20";
        USBB1_ULPITLL_CLK_MUXMODE_7 = 7 "Select safe_mode";
    };

    constants cam_globalreset_muxmode_status width(3) "" {
        CAM_GLOBALRESET_MUXMODE_0 = 0 "Select cam_globalreset";
        CAM_GLOBALRESET_MUXMODE_2 = 2 "Select cam2_pclk";
        CAM_GLOBALRESET_MUXMODE_3 = 3 "Select gpio_83";
        CAM_GLOBALRESET_MUXMODE_7 = 7 "Select safe_mode";
    };
    
    register control_core_pad0_cam_globalreset_pad1_usbb1_ulpitll_clk addr(base, 0xC0) "Register control for Pads cam_globalreset and usbb1_ulpitll_clk Access conditions. Read: unrestricted, Write: unrestricted" {
        usbb1_ulpitll_clk_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        usbb1_ulpitll_clk_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        usbb1_ulpitll_clk_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad usbb1_ulpitll_clk";
        usbb1_ulpitll_clk_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad usbb1_ulpitll_clk";
        usbb1_ulpitll_clk_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad usbb1_ulpitll_clk";
        usbb1_ulpitll_clk_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad usbb1_ulpitll_clk. This is an active low signal";
        usbb1_ulpitll_clk_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad usbb1_ulpitll_clk";
        usbb1_ulpitll_clk_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad usbb1_ulpitll_clk";
        _ 3 mbz;
        usbb1_ulpitll_clk_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad usbb1_ulpitll_clk";
        usbb1_ulpitll_clk_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad usbb1_ulpitll_clk";
        usbb1_ulpitll_clk_muxmode 3 rw type(usbb1_ulpitll_clk_muxmode_status) "Functional multiplexing selection for pad usbb1_ulpitll_clk";
        cam_globalreset_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        cam_globalreset_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        cam_globalreset_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad cam_globalreset";
        cam_globalreset_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad cam_globalreset";
        cam_globalreset_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad cam_globalreset";
        cam_globalreset_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad cam_globalreset. This is an active low signal";
        cam_globalreset_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad cam_globalreset";
        cam_globalreset_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad cam_globalreset";
        _ 3 mbz;
        cam_globalreset_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad cam_globalreset";
        cam_globalreset_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad cam_globalreset";
        cam_globalreset_muxmode 3 rw type(cam_globalreset_muxmode_status) "Functional multiplexing selection for pad cam_globalreset";
    };

    constants usbb1_ulpitll_dir_muxmode_status width(3) "" {
        USBB1_ULPITLL_DIR_MUXMODE_0 = 0 "Select usbb1_ulpitll_dir";
        USBB1_ULPITLL_DIR_MUXMODE_1 = 1 "Select hsi1_caflag";
        USBB1_ULPITLL_DIR_MUXMODE_2 = 2 "Select mcbsp4_fsr";
        USBB1_ULPITLL_DIR_MUXMODE_3 = 3 "Select gpio_86";
        USBB1_ULPITLL_DIR_MUXMODE_4 = 4 "Select usbb1_ulpiphy_dir";
        USBB1_ULPITLL_DIR_MUXMODE_6 = 6 "Select hw_dbg22";
        USBB1_ULPITLL_DIR_MUXMODE_7 = 7 "Select safe_mode";
    };

    constants usbb1_ulpitll_stp_muxmode_status width(3) "" {
        USBB1_ULPITLL_STP_MUXMODE_0 = 0 "Select usbb1_ulpitll_stp";
        USBB1_ULPITLL_STP_MUXMODE_1 = 1 "Select hsi1_cadata";
        USBB1_ULPITLL_STP_MUXMODE_2 = 2 "Select mcbsp4_clkr";
        USBB1_ULPITLL_STP_MUXMODE_3 = 3 "Select gpio_85";
        USBB1_ULPITLL_STP_MUXMODE_4 = 4 "Select usbb1_ulpiphy_stp";
        USBB1_ULPITLL_STP_MUXMODE_5 = 5 "Select usbb1_mm_rxdp";
        USBB1_ULPITLL_STP_MUXMODE_6 = 6 "Select hw_dbg21";
        USBB1_ULPITLL_STP_MUXMODE_7 = 7 "Select safe_mode";
    };
    
    register control_core_pad0_usbb1_ulpitll_stp_pad1_usbb1_ulpitll_dir addr(base, 0xC4) "Register control for Pads usbb1_ulpitll_stp and usbb1_ulpitll_dir Access conditions. Read: unrestricted, Write: unrestricted" {
        usbb1_ulpitll_dir_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        usbb1_ulpitll_dir_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        usbb1_ulpitll_dir_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad usbb1_ulpitll_dir";
        usbb1_ulpitll_dir_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad usbb1_ulpitll_dir";
        usbb1_ulpitll_dir_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad usbb1_ulpitll_dir";
        usbb1_ulpitll_dir_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad usbb1_ulpitll_dir. This is an active low signal";
        usbb1_ulpitll_dir_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad usbb1_ulpitll_dir";
        usbb1_ulpitll_dir_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad usbb1_ulpitll_dir";
        _ 3 mbz;
        usbb1_ulpitll_dir_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad usbb1_ulpitll_dir";
        usbb1_ulpitll_dir_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad usbb1_ulpitll_dir";
        usbb1_ulpitll_dir_muxmode 3 rw type(usbb1_ulpitll_dir_muxmode_status) "Functional multiplexing selection for pad usbb1_ulpitll_dir";
        usbb1_ulpitll_stp_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        usbb1_ulpitll_stp_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        usbb1_ulpitll_stp_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad usbb1_ulpitll_stp";
        usbb1_ulpitll_stp_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad usbb1_ulpitll_stp";
        usbb1_ulpitll_stp_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad usbb1_ulpitll_stp";
        usbb1_ulpitll_stp_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad usbb1_ulpitll_stp. This is an active low signal";
        usbb1_ulpitll_stp_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad usbb1_ulpitll_stp";
        usbb1_ulpitll_stp_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad usbb1_ulpitll_stp";
        _ 3 mbz;
        usbb1_ulpitll_stp_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad usbb1_ulpitll_stp";
        usbb1_ulpitll_stp_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad usbb1_ulpitll_stp";
        usbb1_ulpitll_stp_muxmode 3 rw type(usbb1_ulpitll_stp_muxmode_status) "Functional multiplexing selection for pad usbb1_ulpitll_stp";
    };

    constants usbb1_ulpitll_dat0_muxmode_status width(3) "" {
        USBB1_ULPITLL_DAT0_MUXMODE_0 = 0 "Select usbb1_ulpitll_dat0";
        USBB1_ULPITLL_DAT0_MUXMODE_1 = 1 "Select hsi1_acwake";
        USBB1_ULPITLL_DAT0_MUXMODE_2 = 2 "Select mcbsp4_clkx";
        USBB1_ULPITLL_DAT0_MUXMODE_3 = 3 "Select gpio_88";
        USBB1_ULPITLL_DAT0_MUXMODE_4 = 4 "Select usbb1_ulpiphy_dat0";
        USBB1_ULPITLL_DAT0_MUXMODE_5 = 5 "Select usbb1_mm_txen";
        USBB1_ULPITLL_DAT0_MUXMODE_6 = 6 "Select hw_dbg24";
        USBB1_ULPITLL_DAT0_MUXMODE_7 = 7 "Select safe_mode";
    };

    constants usbb1_ulpitll_nxt_muxmode_status width(3) "" {
        USBB1_ULPITLL_NXT_MUXMODE_0 = 0 "Select usbb1_ulpitll_nxt";
        USBB1_ULPITLL_NXT_MUXMODE_1 = 1 "Select hsi1_acready";
        USBB1_ULPITLL_NXT_MUXMODE_2 = 2 "Select mcbsp4_fsx";
        USBB1_ULPITLL_NXT_MUXMODE_3 = 3 "Select gpio_87";
        USBB1_ULPITLL_NXT_MUXMODE_4 = 4 "Select usbb1_ulpiphy_nxt";
        USBB1_ULPITLL_NXT_MUXMODE_5 = 5 "Select usbb1_mm_rxdm";
        USBB1_ULPITLL_NXT_MUXMODE_6 = 6 "Select hw_dbg23";
        USBB1_ULPITLL_NXT_MUXMODE_7 = 7 "Select safe_mode";
    };
    
    register control_core_pad0_usbb1_ulpitll_nxt_pad1_usbb1_ulpitll_dat0 addr(base, 0xC8) "Register control for Pads usbb1_ulpitll_nxt and usbb1_ulpitll_dat0 Access conditions. Read: unrestricted, Write: unrestricted" {
        usbb1_ulpitll_dat0_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        usbb1_ulpitll_dat0_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        usbb1_ulpitll_dat0_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad usbb1_ulpitll_dat0";
        usbb1_ulpitll_dat0_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad usbb1_ulpitll_dat0";
        usbb1_ulpitll_dat0_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad usbb1_ulpitll_dat0";
        usbb1_ulpitll_dat0_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad usbb1_ulpitll_dat0. This is an active low signal";
        usbb1_ulpitll_dat0_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad usbb1_ulpitll_dat0";
        usbb1_ulpitll_dat0_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad usbb1_ulpitll_dat0";
        _ 3 mbz;
        usbb1_ulpitll_dat0_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad usbb1_ulpitll_dat0";
        usbb1_ulpitll_dat0_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad usbb1_ulpitll_dat0";
        usbb1_ulpitll_dat0_muxmode 3 rw type(usbb1_ulpitll_dat0_muxmode_status) "Functional multiplexing selection for pad usbb1_ulpitll_dat0";
        usbb1_ulpitll_nxt_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        usbb1_ulpitll_nxt_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        usbb1_ulpitll_nxt_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad usbb1_ulpitll_nxt";
        usbb1_ulpitll_nxt_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad usbb1_ulpitll_nxt";
        usbb1_ulpitll_nxt_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad usbb1_ulpitll_nxt";
        usbb1_ulpitll_nxt_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad usbb1_ulpitll_nxt. This is an active low signal";
        usbb1_ulpitll_nxt_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad usbb1_ulpitll_nxt";
        usbb1_ulpitll_nxt_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad usbb1_ulpitll_nxt";
        _ 3 mbz;
        usbb1_ulpitll_nxt_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad usbb1_ulpitll_nxt";
        usbb1_ulpitll_nxt_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad usbb1_ulpitll_nxt";
        usbb1_ulpitll_nxt_muxmode 3 rw type(usbb1_ulpitll_nxt_muxmode_status) "Functional multiplexing selection for pad usbb1_ulpitll_nxt";
    };

    constants usbb1_ulpitll_dat2_muxmode_status width(3) "" {
        USBB1_ULPITLL_DAT2_MUXMODE_0 = 0 "Select usbb1_ulpitll_dat2";
        USBB1_ULPITLL_DAT2_MUXMODE_1 = 1 "Select hsi1_acflag";
        USBB1_ULPITLL_DAT2_MUXMODE_2 = 2 "Select mcbsp4_dr";
        USBB1_ULPITLL_DAT2_MUXMODE_3 = 3 "Select gpio_90";
        USBB1_ULPITLL_DAT2_MUXMODE_4 = 4 "Select usbb1_ulpiphy_dat2";
        USBB1_ULPITLL_DAT2_MUXMODE_5 = 5 "Select usbb1_mm_txse0";
        USBB1_ULPITLL_DAT2_MUXMODE_6 = 6 "Select hw_dbg26";
        USBB1_ULPITLL_DAT2_MUXMODE_7 = 7 "Select safe_mode";
    };

    constants usbb1_ulpitll_dat1_muxmode_status width(3) "" {
        USBB1_ULPITLL_DAT1_MUXMODE_0 = 0 "Select usbb1_ulpitll_dat1";
        USBB1_ULPITLL_DAT1_MUXMODE_1 = 1 "Select hsi1_acdata";
        USBB1_ULPITLL_DAT1_MUXMODE_2 = 2 "Select mcbsp4_dx";
        USBB1_ULPITLL_DAT1_MUXMODE_3 = 3 "Select gpio_89";
        USBB1_ULPITLL_DAT1_MUXMODE_4 = 4 "Select usbb1_ulpiphy_dat1";
        USBB1_ULPITLL_DAT1_MUXMODE_5 = 5 "Select usbb1_mm_txdat";
        USBB1_ULPITLL_DAT1_MUXMODE_6 = 6 "Select hw_dbg25";
        USBB1_ULPITLL_DAT1_MUXMODE_7 = 7 "Select safe_mode";
    };
    
    register control_core_pad0_usbb1_ulpitll_dat1_pad1_usbb1_ulpitll_dat2 addr(base, 0xCC) "Register control for Pads usbb1_ulpitll_dat1 and usbb1_ulpitll_dat2 Access conditions. Read: unrestricted, Write: unrestricted" {
        usbb1_ulpitll_dat2_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        usbb1_ulpitll_dat2_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        usbb1_ulpitll_dat2_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad usbb1_ulpitll_dat2";
        usbb1_ulpitll_dat2_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad usbb1_ulpitll_dat2";
        usbb1_ulpitll_dat2_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad usbb1_ulpitll_dat2";
        usbb1_ulpitll_dat2_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad usbb1_ulpitll_dat2. This is an active low signal";
        usbb1_ulpitll_dat2_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad usbb1_ulpitll_dat2";
        usbb1_ulpitll_dat2_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad usbb1_ulpitll_dat2";
        _ 3 mbz;
        usbb1_ulpitll_dat2_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad usbb1_ulpitll_dat2";
        usbb1_ulpitll_dat2_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad usbb1_ulpitll_dat2";
        usbb1_ulpitll_dat2_muxmode 3 rw type(usbb1_ulpitll_dat2_muxmode_status) "Functional multiplexing selection for pad usbb1_ulpitll_dat2";
        usbb1_ulpitll_dat1_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        usbb1_ulpitll_dat1_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        usbb1_ulpitll_dat1_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad usbb1_ulpitll_dat1";
        usbb1_ulpitll_dat1_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad usbb1_ulpitll_dat1";
        usbb1_ulpitll_dat1_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad usbb1_ulpitll_dat1";
        usbb1_ulpitll_dat1_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad usbb1_ulpitll_dat1. This is an active low signal";
        usbb1_ulpitll_dat1_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad usbb1_ulpitll_dat1";
        usbb1_ulpitll_dat1_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad usbb1_ulpitll_dat1";
        _ 3 mbz;
        usbb1_ulpitll_dat1_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad usbb1_ulpitll_dat1";
        usbb1_ulpitll_dat1_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad usbb1_ulpitll_dat1";
        usbb1_ulpitll_dat1_muxmode 3 rw type(usbb1_ulpitll_dat1_muxmode_status) "Functional multiplexing selection for pad usbb1_ulpitll_dat1";
    };

    constants usbb1_ulpitll_dat4_muxmode_status width(3) "" {
        USBB1_ULPITLL_DAT4_MUXMODE_0 = 0 "Select usbb1_ulpitll_dat4";
        USBB1_ULPITLL_DAT4_MUXMODE_1 = 1 "Select dmtimer8_pwm_evt";
        USBB1_ULPITLL_DAT4_MUXMODE_2 = 2 "Select abe_mcbsp3_dr";
        USBB1_ULPITLL_DAT4_MUXMODE_3 = 3 "Select gpio_92";
        USBB1_ULPITLL_DAT4_MUXMODE_4 = 4 "Select usbb1_ulpiphy_dat4";
        USBB1_ULPITLL_DAT4_MUXMODE_6 = 6 "Select hw_dbg28";
        USBB1_ULPITLL_DAT4_MUXMODE_7 = 7 "Select safe_mode";
    };

    constants usbb1_ulpitll_dat3_muxmode_status width(3) "" {
        USBB1_ULPITLL_DAT3_MUXMODE_0 = 0 "Select usbb1_ulpitll_dat3";
        USBB1_ULPITLL_DAT3_MUXMODE_1 = 1 "Select hsi1_caready";
        USBB1_ULPITLL_DAT3_MUXMODE_3 = 3 "Select gpio_91";
        USBB1_ULPITLL_DAT3_MUXMODE_4 = 4 "Select usbb1_ulpiphy_dat3";
        USBB1_ULPITLL_DAT3_MUXMODE_5 = 5 "Select usbb1_mm_rxrcv";
        USBB1_ULPITLL_DAT3_MUXMODE_6 = 6 "Select hw_dbg27";
        USBB1_ULPITLL_DAT3_MUXMODE_7 = 7 "Select safe_mode";
    };
    
    register control_core_pad0_usbb1_ulpitll_dat3_pad1_usbb1_ulpitll_dat4 addr(base, 0xD0) "Register control for Pads usbb1_ulpitll_dat3 and usbb1_ulpitll_dat4 Access conditions. Read: unrestricted, Write: unrestricted" {
        usbb1_ulpitll_dat4_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        usbb1_ulpitll_dat4_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        usbb1_ulpitll_dat4_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad usbb1_ulpitll_dat4";
        usbb1_ulpitll_dat4_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad usbb1_ulpitll_dat4";
        usbb1_ulpitll_dat4_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad usbb1_ulpitll_dat4";
        usbb1_ulpitll_dat4_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad usbb1_ulpitll_dat4. This is an active low signal";
        usbb1_ulpitll_dat4_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad usbb1_ulpitll_dat4";
        usbb1_ulpitll_dat4_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad usbb1_ulpitll_dat4";
        _ 3 mbz;
        usbb1_ulpitll_dat4_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad usbb1_ulpitll_dat4";
        usbb1_ulpitll_dat4_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad usbb1_ulpitll_dat4";
        usbb1_ulpitll_dat4_muxmode 3 rw type(usbb1_ulpitll_dat4_muxmode_status) "Functional multiplexing selection for pad usbb1_ulpitll_dat4";
        usbb1_ulpitll_dat3_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        usbb1_ulpitll_dat3_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        usbb1_ulpitll_dat3_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad usbb1_ulpitll_dat3";
        usbb1_ulpitll_dat3_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad usbb1_ulpitll_dat3";
        usbb1_ulpitll_dat3_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad usbb1_ulpitll_dat3";
        usbb1_ulpitll_dat3_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad usbb1_ulpitll_dat3. This is an active low signal";
        usbb1_ulpitll_dat3_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad usbb1_ulpitll_dat3";
        usbb1_ulpitll_dat3_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad usbb1_ulpitll_dat3";
        _ 3 mbz;
        usbb1_ulpitll_dat3_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad usbb1_ulpitll_dat3";
        usbb1_ulpitll_dat3_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad usbb1_ulpitll_dat3";
        usbb1_ulpitll_dat3_muxmode 3 rw type(usbb1_ulpitll_dat3_muxmode_status) "Functional multiplexing selection for pad usbb1_ulpitll_dat3";
    };

    constants usbb1_ulpitll_dat6_muxmode_status width(3) "" {
        USBB1_ULPITLL_DAT6_MUXMODE_0 = 0 "Select usbb1_ulpitll_dat6";
        USBB1_ULPITLL_DAT6_MUXMODE_1 = 1 "Select dmtimer10_pwm_evt";
        USBB1_ULPITLL_DAT6_MUXMODE_2 = 2 "Select abe_mcbsp3_clkx";
        USBB1_ULPITLL_DAT6_MUXMODE_3 = 3 "Select gpio_94";
        USBB1_ULPITLL_DAT6_MUXMODE_4 = 4 "Select usbb1_ulpiphy_dat6";
        USBB1_ULPITLL_DAT6_MUXMODE_5 = 5 "Select abe_dmic_din3";
        USBB1_ULPITLL_DAT6_MUXMODE_6 = 6 "Select hw_dbg30";
        USBB1_ULPITLL_DAT6_MUXMODE_7 = 7 "Select safe_mode";
    };

    constants usbb1_ulpitll_dat5_muxmode_status width(3) "" {
        USBB1_ULPITLL_DAT5_MUXMODE_0 = 0 "Select usbb1_ulpitll_dat5";
        USBB1_ULPITLL_DAT5_MUXMODE_1 = 1 "Select dmtimer9_pwm_evt";
        USBB1_ULPITLL_DAT5_MUXMODE_2 = 2 "Select abe_mcbsp3_dx";
        USBB1_ULPITLL_DAT5_MUXMODE_3 = 3 "Select gpio_93";
        USBB1_ULPITLL_DAT5_MUXMODE_4 = 4 "Select usbb1_ulpiphy_dat5";
        USBB1_ULPITLL_DAT5_MUXMODE_6 = 6 "Select hw_dbg29";
        USBB1_ULPITLL_DAT5_MUXMODE_7 = 7 "Select safe_mode";
    };
    
    register control_core_pad0_usbb1_ulpitll_dat5_pad1_usbb1_ulpitll_dat6 addr(base, 0xD4) "Register control for Pads usbb1_ulpitll_dat5 and usbb1_ulpitll_dat6 Access conditions. Read: unrestricted, Write: unrestricted" {
        usbb1_ulpitll_dat6_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        usbb1_ulpitll_dat6_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        usbb1_ulpitll_dat6_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad usbb1_ulpitll_dat6";
        usbb1_ulpitll_dat6_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad usbb1_ulpitll_dat6";
        usbb1_ulpitll_dat6_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad usbb1_ulpitll_dat6";
        usbb1_ulpitll_dat6_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad usbb1_ulpitll_dat6. This is an active low signal";
        usbb1_ulpitll_dat6_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad usbb1_ulpitll_dat6";
        usbb1_ulpitll_dat6_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad usbb1_ulpitll_dat6";
        _ 3 mbz;
        usbb1_ulpitll_dat6_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad usbb1_ulpitll_dat6";
        usbb1_ulpitll_dat6_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad usbb1_ulpitll_dat6";
        usbb1_ulpitll_dat6_muxmode 3 rw type(usbb1_ulpitll_dat6_muxmode_status) "Functional multiplexing selection for pad usbb1_ulpitll_dat6";
        usbb1_ulpitll_dat5_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        usbb1_ulpitll_dat5_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        usbb1_ulpitll_dat5_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad usbb1_ulpitll_dat5";
        usbb1_ulpitll_dat5_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad usbb1_ulpitll_dat5";
        usbb1_ulpitll_dat5_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad usbb1_ulpitll_dat5";
        usbb1_ulpitll_dat5_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad usbb1_ulpitll_dat5. This is an active low signal";
        usbb1_ulpitll_dat5_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad usbb1_ulpitll_dat5";
        usbb1_ulpitll_dat5_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad usbb1_ulpitll_dat5";
        _ 3 mbz;
        usbb1_ulpitll_dat5_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad usbb1_ulpitll_dat5";
        usbb1_ulpitll_dat5_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad usbb1_ulpitll_dat5";
        usbb1_ulpitll_dat5_muxmode 3 rw type(usbb1_ulpitll_dat5_muxmode_status) "Functional multiplexing selection for pad usbb1_ulpitll_dat5";
    };

    constants usbb1_hsic_data_muxmode_status width(3) "" {
        USBB1_HSIC_DATA_MUXMODE_0 = 0 "Select usbb1_hsic_data";
        USBB1_HSIC_DATA_MUXMODE_3 = 3 "Select gpio_96";
        USBB1_HSIC_DATA_MUXMODE_7 = 7 "Select safe_mode";
    };

    constants usbb1_ulpitll_dat7_muxmode_status width(3) "" {
        USBB1_ULPITLL_DAT7_MUXMODE_0 = 0 "Select usbb1_ulpitll_dat7";
        USBB1_ULPITLL_DAT7_MUXMODE_1 = 1 "Select dmtimer11_pwm_evt";
        USBB1_ULPITLL_DAT7_MUXMODE_2 = 2 "Select abe_mcbsp3_fsx";
        USBB1_ULPITLL_DAT7_MUXMODE_3 = 3 "Select gpio_95";
        USBB1_ULPITLL_DAT7_MUXMODE_4 = 4 "Select usbb1_ulpiphy_dat7";
        USBB1_ULPITLL_DAT7_MUXMODE_5 = 5 "Select abe_dmic_clk3";
        USBB1_ULPITLL_DAT7_MUXMODE_6 = 6 "Select hw_dbg31";
        USBB1_ULPITLL_DAT7_MUXMODE_7 = 7 "Select safe_mode";
    };
    
    register control_core_pad0_usbb1_ulpitll_dat7_pad1_usbb1_hsic_data addr(base, 0xD8) "Register control for Pads usbb1_ulpitll_dat7 and usbb1_hsic_data Access conditions. Read: unrestricted, Write: unrestricted" {
        usbb1_hsic_data_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        usbb1_hsic_data_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        _ 2 mbz;
        usbb1_hsic_data_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad usbb1_hsic_data";
        usbb1_hsic_data_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad usbb1_hsic_data. This is an active low signal";
        usbb1_hsic_data_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad usbb1_hsic_data";
        _ 6 mbz;
        usbb1_hsic_data_muxmode 3 rw type(usbb1_hsic_data_muxmode_status) "Functional multiplexing selection for pad usbb1_hsic_data";
        usbb1_ulpitll_dat7_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        usbb1_ulpitll_dat7_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        usbb1_ulpitll_dat7_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad usbb1_ulpitll_dat7";
        usbb1_ulpitll_dat7_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad usbb1_ulpitll_dat7";
        usbb1_ulpitll_dat7_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad usbb1_ulpitll_dat7";
        usbb1_ulpitll_dat7_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad usbb1_ulpitll_dat7. This is an active low signal";
        usbb1_ulpitll_dat7_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad usbb1_ulpitll_dat7";
        usbb1_ulpitll_dat7_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad usbb1_ulpitll_dat7";
        _ 3 mbz;
        usbb1_ulpitll_dat7_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad usbb1_ulpitll_dat7";
        usbb1_ulpitll_dat7_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad usbb1_ulpitll_dat7";
        usbb1_ulpitll_dat7_muxmode 3 rw type(usbb1_ulpitll_dat7_muxmode_status) "Functional multiplexing selection for pad usbb1_ulpitll_dat7";
    };

    constants usbc1_icusb_dp_muxmode_status width(3) "" {
        USBC1_ICUSB_DP_MUXMODE_0 = 0 "Select usbc1_icusb_dp";
        USBC1_ICUSB_DP_MUXMODE_3 = 3 "Select gpio_98";
        USBC1_ICUSB_DP_MUXMODE_7 = 7 "Select safe_mode";
    };

    constants usbb1_hsic_strobe_muxmode_status width(3) "" {
        USBB1_HSIC_STROBE_MUXMODE_0 = 0 "Select usbb1_hsic_strobe";
        USBB1_HSIC_STROBE_MUXMODE_3 = 3 "Select gpio_97";
        USBB1_HSIC_STROBE_MUXMODE_7 = 7 "Select safe_mode";
    };
    
    register control_core_pad0_usbb1_hsic_strobe_pad1_usbc1_icusb_dp addr(base, 0xDC) "Register control for Pads usbb1_hsic_strobe and usbc1_icusb_dp Access conditions. Read: unrestricted, Write: unrestricted" {
        usbc1_icusb_dp_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        usbc1_icusb_dp_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        usbc1_icusb_dp_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad usbc1_icusb_dp";
        usbc1_icusb_dp_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad usbc1_icusb_dp";
        usbc1_icusb_dp_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad usbc1_icusb_dp";
        usbc1_icusb_dp_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad usbc1_icusb_dp. This is an active low signal";
        usbc1_icusb_dp_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad usbc1_icusb_dp";
        usbc1_icusb_dp_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad usbc1_icusb_dp";
        _ 3 mbz;
        usbc1_icusb_dp_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad usbc1_icusb_dp";
        usbc1_icusb_dp_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad usbc1_icusb_dp";
        usbc1_icusb_dp_muxmode 3 rw type(usbc1_icusb_dp_muxmode_status) "Functional multiplexing selection for pad usbc1_icusb_dp";
        usbb1_hsic_strobe_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        usbb1_hsic_strobe_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        _ 2 mbz;
        usbb1_hsic_strobe_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad usbb1_hsic_strobe";
        usbb1_hsic_strobe_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad usbb1_hsic_strobe. This is an active low signal";
        usbb1_hsic_strobe_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad usbb1_hsic_strobe";
        _ 6 mbz;
        usbb1_hsic_strobe_muxmode 3 rw type(usbb1_hsic_strobe_muxmode_status) "Functional multiplexing selection for pad usbb1_hsic_strobe";
    };

    constants sdmmc1_clk_muxmode_status width(3) "" {
        SDMMC1_CLK_MUXMODE_0 = 0 "Select sdmmc1_clk";
        SDMMC1_CLK_MUXMODE_2 = 2 "Select dpm_emu19";
        SDMMC1_CLK_MUXMODE_3 = 3 "Select gpio_100";
        SDMMC1_CLK_MUXMODE_7 = 7 "Select safe_mode";
    };

    constants usbc1_icusb_dm_muxmode_status width(3) "" {
        USBC1_ICUSB_DM_MUXMODE_0 = 0 "Select usbc1_icusb_dm";
        USBC1_ICUSB_DM_MUXMODE_3 = 3 "Select gpio_99";
        USBC1_ICUSB_DM_MUXMODE_7 = 7 "Select safe_mode";
    };
    
    register control_core_pad0_usbc1_icusb_dm_pad1_sdmmc1_clk addr(base, 0xE0) "Register control for Pads usbc1_icusb_dm and sdmmc1_clk Access conditions. Read: unrestricted, Write: unrestricted" {
        sdmmc1_clk_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        sdmmc1_clk_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        sdmmc1_clk_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad sdmmc1_clk";
        sdmmc1_clk_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad sdmmc1_clk";
        sdmmc1_clk_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad sdmmc1_clk";
        sdmmc1_clk_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad sdmmc1_clk. This is an active low signal";
        sdmmc1_clk_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad sdmmc1_clk";
        sdmmc1_clk_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad sdmmc1_clk";
        _ 3 mbz;
        sdmmc1_clk_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad sdmmc1_clk";
        sdmmc1_clk_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad sdmmc1_clk";
        sdmmc1_clk_muxmode 3 rw type(sdmmc1_clk_muxmode_status) "Functional multiplexing selection for pad sdmmc1_clk";
        usbc1_icusb_dm_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        usbc1_icusb_dm_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        usbc1_icusb_dm_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad usbc1_icusb_dm";
        usbc1_icusb_dm_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad usbc1_icusb_dm";
        usbc1_icusb_dm_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad usbc1_icusb_dm";
        usbc1_icusb_dm_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad usbc1_icusb_dm. This is an active low signal";
        usbc1_icusb_dm_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad usbc1_icusb_dm";
        usbc1_icusb_dm_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad usbc1_icusb_dm";
        _ 3 mbz;
        usbc1_icusb_dm_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad usbc1_icusb_dm";
        usbc1_icusb_dm_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad usbc1_icusb_dm";
        usbc1_icusb_dm_muxmode 3 rw type(usbc1_icusb_dm_muxmode_status) "Functional multiplexing selection for pad usbc1_icusb_dm";
    };

    constants sdmmc1_dat0_muxmode_status width(3) "" {
        SDMMC1_DAT0_MUXMODE_0 = 0 "Select sdmmc1_dat0";
        SDMMC1_DAT0_MUXMODE_2 = 2 "Select dpm_emu18";
        SDMMC1_DAT0_MUXMODE_3 = 3 "Select gpio_102";
        SDMMC1_DAT0_MUXMODE_7 = 7 "Select safe_mode";
    };

    constants sdmmc1_cmd_muxmode_status width(3) "" {
        SDMMC1_CMD_MUXMODE_0 = 0 "Select sdmmc1_cmd";
        SDMMC1_CMD_MUXMODE_2 = 2 "Select uart1_rx";
        SDMMC1_CMD_MUXMODE_3 = 3 "Select gpio_101";
        SDMMC1_CMD_MUXMODE_7 = 7 "Select safe_mode";
    };
    
    register control_core_pad0_sdmmc1_cmd_pad1_sdmmc1_dat0 addr(base, 0xE4) "Register control for Pads sdmmc1_cmd and sdmmc1_dat0 Access conditions. Read: unrestricted, Write: unrestricted" {
        sdmmc1_dat0_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        sdmmc1_dat0_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        sdmmc1_dat0_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad sdmmc1_dat0";
        sdmmc1_dat0_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad sdmmc1_dat0";
        sdmmc1_dat0_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad sdmmc1_dat0";
        sdmmc1_dat0_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad sdmmc1_dat0. This is an active low signal";
        sdmmc1_dat0_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad sdmmc1_dat0";
        sdmmc1_dat0_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad sdmmc1_dat0";
        _ 3 mbz;
        sdmmc1_dat0_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad sdmmc1_dat0";
        sdmmc1_dat0_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad sdmmc1_dat0";
        sdmmc1_dat0_muxmode 3 rw type(sdmmc1_dat0_muxmode_status) "Functional multiplexing selection for pad sdmmc1_dat0";
        sdmmc1_cmd_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        sdmmc1_cmd_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        sdmmc1_cmd_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad sdmmc1_cmd";
        sdmmc1_cmd_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad sdmmc1_cmd";
        sdmmc1_cmd_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad sdmmc1_cmd";
        sdmmc1_cmd_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad sdmmc1_cmd. This is an active low signal";
        sdmmc1_cmd_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad sdmmc1_cmd";
        sdmmc1_cmd_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad sdmmc1_cmd";
        _ 3 mbz;
        sdmmc1_cmd_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad sdmmc1_cmd";
        sdmmc1_cmd_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad sdmmc1_cmd";
        sdmmc1_cmd_muxmode 3 rw type(sdmmc1_cmd_muxmode_status) "Functional multiplexing selection for pad sdmmc1_cmd";
    };

    constants sdmmc1_dat2_muxmode_status width(3) "" {
        SDMMC1_DAT2_MUXMODE_0 = 0 "Select sdmmc1_dat2";
        SDMMC1_DAT2_MUXMODE_2 = 2 "Select dpm_emu16";
        SDMMC1_DAT2_MUXMODE_3 = 3 "Select gpio_104";
        SDMMC1_DAT2_MUXMODE_4 = 4 "Select jtag_tms_tmsc";
        SDMMC1_DAT2_MUXMODE_7 = 7 "Select safe_mode";
    };

    constants sdmmc1_dat1_muxmode_status width(3) "" {
        SDMMC1_DAT1_MUXMODE_0 = 0 "Select sdmmc1_dat1";
        SDMMC1_DAT1_MUXMODE_2 = 2 "Select dpm_emu17";
        SDMMC1_DAT1_MUXMODE_3 = 3 "Select gpio_103";
        SDMMC1_DAT1_MUXMODE_7 = 7 "Select safe_mode";
    };
    
    register control_core_pad0_sdmmc1_dat1_pad1_sdmmc1_dat2 addr(base, 0xE8) "Register control for Pads sdmmc1_dat1 and sdmmc1_dat2 Access conditions. Read: unrestricted, Write: unrestricted" {
        sdmmc1_dat2_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        sdmmc1_dat2_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        sdmmc1_dat2_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad sdmmc1_dat2";
        sdmmc1_dat2_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad sdmmc1_dat2";
        sdmmc1_dat2_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad sdmmc1_dat2";
        sdmmc1_dat2_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad sdmmc1_dat2. This is an active low signal";
        sdmmc1_dat2_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad sdmmc1_dat2";
        sdmmc1_dat2_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad sdmmc1_dat2";
        _ 3 mbz;
        sdmmc1_dat2_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad sdmmc1_dat2";
        sdmmc1_dat2_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad sdmmc1_dat2";
        sdmmc1_dat2_muxmode 3 rw type(sdmmc1_dat2_muxmode_status) "Functional multiplexing selection for pad sdmmc1_dat2";
        sdmmc1_dat1_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        sdmmc1_dat1_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        sdmmc1_dat1_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad sdmmc1_dat1";
        sdmmc1_dat1_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad sdmmc1_dat1";
        sdmmc1_dat1_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad sdmmc1_dat1";
        sdmmc1_dat1_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad sdmmc1_dat1. This is an active low signal";
        sdmmc1_dat1_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad sdmmc1_dat1";
        sdmmc1_dat1_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad sdmmc1_dat1";
        _ 3 mbz;
        sdmmc1_dat1_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad sdmmc1_dat1";
        sdmmc1_dat1_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad sdmmc1_dat1";
        sdmmc1_dat1_muxmode 3 rw type(sdmmc1_dat1_muxmode_status) "Functional multiplexing selection for pad sdmmc1_dat1";
    };

    constants sdmmc1_dat4_muxmode_status width(3) "" {
        SDMMC1_DAT4_MUXMODE_0 = 0 "Select sdmmc1_dat4";
        SDMMC1_DAT4_MUXMODE_3 = 3 "Select gpio_106";
        SDMMC1_DAT4_MUXMODE_7 = 7 "Select safe_mode";
    };

    constants sdmmc1_dat3_muxmode_status width(3) "" {
        SDMMC1_DAT3_MUXMODE_0 = 0 "Select sdmmc1_dat3";
        SDMMC1_DAT3_MUXMODE_2 = 2 "Select dpm_emu15";
        SDMMC1_DAT3_MUXMODE_3 = 3 "Select gpio_105";
        SDMMC1_DAT3_MUXMODE_4 = 4 "Select jtag_tck";
        SDMMC1_DAT3_MUXMODE_7 = 7 "Select safe_mode";
    };
    
    register control_core_pad0_sdmmc1_dat3_pad1_sdmmc1_dat4 addr(base, 0xEC) "Register control for Pads sdmmc1_dat3 and sdmmc1_dat4 Access conditions. Read: unrestricted, Write: unrestricted" {
        sdmmc1_dat4_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        sdmmc1_dat4_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        sdmmc1_dat4_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad sdmmc1_dat4";
        sdmmc1_dat4_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad sdmmc1_dat4";
        sdmmc1_dat4_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad sdmmc1_dat4";
        sdmmc1_dat4_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad sdmmc1_dat4. This is an active low signal";
        sdmmc1_dat4_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad sdmmc1_dat4";
        sdmmc1_dat4_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad sdmmc1_dat4";
        _ 3 mbz;
        sdmmc1_dat4_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad sdmmc1_dat4";
        sdmmc1_dat4_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad sdmmc1_dat4";
        sdmmc1_dat4_muxmode 3 rw type(sdmmc1_dat4_muxmode_status) "Functional multiplexing selection for pad sdmmc1_dat4";
        sdmmc1_dat3_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        sdmmc1_dat3_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        sdmmc1_dat3_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad sdmmc1_dat3";
        sdmmc1_dat3_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad sdmmc1_dat3";
        sdmmc1_dat3_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad sdmmc1_dat3";
        sdmmc1_dat3_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad sdmmc1_dat3. This is an active low signal";
        sdmmc1_dat3_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad sdmmc1_dat3";
        sdmmc1_dat3_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad sdmmc1_dat3";
        _ 3 mbz;
        sdmmc1_dat3_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad sdmmc1_dat3";
        sdmmc1_dat3_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad sdmmc1_dat3";
        sdmmc1_dat3_muxmode 3 rw type(sdmmc1_dat3_muxmode_status) "Functional multiplexing selection for pad sdmmc1_dat3";
    };

    constants sdmmc1_dat6_muxmode_status width(3) "" {
        SDMMC1_DAT6_MUXMODE_0 = 0 "Select sdmmc1_dat6";
        SDMMC1_DAT6_MUXMODE_3 = 3 "Select gpio_108";
        SDMMC1_DAT6_MUXMODE_7 = 7 "Select safe_mode";
    };

    constants sdmmc1_dat5_muxmode_status width(3) "" {
        SDMMC1_DAT5_MUXMODE_0 = 0 "Select sdmmc1_dat5";
        SDMMC1_DAT5_MUXMODE_3 = 3 "Select gpio_107";
        SDMMC1_DAT5_MUXMODE_7 = 7 "Select safe_mode";
    };
    
    register control_core_pad0_sdmmc1_dat5_pad1_sdmmc1_dat6 addr(base, 0xF0) "Register control for Pads sdmmc1_dat5 and sdmmc1_dat6 Access conditions. Read: unrestricted, Write: unrestricted" {
        sdmmc1_dat6_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        sdmmc1_dat6_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        sdmmc1_dat6_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad sdmmc1_dat6";
        sdmmc1_dat6_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad sdmmc1_dat6";
        sdmmc1_dat6_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad sdmmc1_dat6";
        sdmmc1_dat6_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad sdmmc1_dat6. This is an active low signal";
        sdmmc1_dat6_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad sdmmc1_dat6";
        sdmmc1_dat6_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad sdmmc1_dat6";
        _ 3 mbz;
        sdmmc1_dat6_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad sdmmc1_dat6";
        sdmmc1_dat6_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad sdmmc1_dat6";
        sdmmc1_dat6_muxmode 3 rw type(sdmmc1_dat6_muxmode_status) "Functional multiplexing selection for pad sdmmc1_dat6";
        sdmmc1_dat5_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        sdmmc1_dat5_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        sdmmc1_dat5_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad sdmmc1_dat5";
        sdmmc1_dat5_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad sdmmc1_dat5";
        sdmmc1_dat5_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad sdmmc1_dat5";
        sdmmc1_dat5_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad sdmmc1_dat5. This is an active low signal";
        sdmmc1_dat5_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad sdmmc1_dat5";
        sdmmc1_dat5_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad sdmmc1_dat5";
        _ 3 mbz;
        sdmmc1_dat5_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad sdmmc1_dat5";
        sdmmc1_dat5_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad sdmmc1_dat5";
        sdmmc1_dat5_muxmode 3 rw type(sdmmc1_dat5_muxmode_status) "Functional multiplexing selection for pad sdmmc1_dat5";
    };

    constants abe_mcbsp2_clkx_muxmode_status width(3) "" {
        ABE_MCBSP2_CLKX_MUXMODE_0 = 0 "Select abe_mcbsp2_clkx";
        ABE_MCBSP2_CLKX_MUXMODE_1 = 1 "Select mcspi2_clk";
        ABE_MCBSP2_CLKX_MUXMODE_2 = 2 "Select abe_mcasp_ahclkx";
        ABE_MCBSP2_CLKX_MUXMODE_3 = 3 "Select gpio_110";
        ABE_MCBSP2_CLKX_MUXMODE_4 = 4 "Select usbb2_mm_rxdm";
        ABE_MCBSP2_CLKX_MUXMODE_7 = 7 "Select safe_mode";
    };

    constants sdmmc1_dat7_muxmode_status width(3) "" {
        SDMMC1_DAT7_MUXMODE_0 = 0 "Select sdmmc1_dat7";
        SDMMC1_DAT7_MUXMODE_3 = 3 "Select gpio_109";
        SDMMC1_DAT7_MUXMODE_7 = 7 "Select safe_mode";
    };
    
    register control_core_pad0_sdmmc1_dat7_pad1_abe_mcbsp2_clkx addr(base, 0xF4) "Register control for Pads sdmmc1_dat7 and abe_mcbsp2_clkx Access conditions. Read: unrestricted, Write: unrestricted" {
        abe_mcbsp2_clkx_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        abe_mcbsp2_clkx_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        abe_mcbsp2_clkx_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad abe_mcbsp2_clkx";
        abe_mcbsp2_clkx_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad abe_mcbsp2_clkx";
        abe_mcbsp2_clkx_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad abe_mcbsp2_clkx";
        abe_mcbsp2_clkx_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad abe_mcbsp2_clkx. This is an active low signal";
        abe_mcbsp2_clkx_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad abe_mcbsp2_clkx";
        abe_mcbsp2_clkx_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad abe_mcbsp2_clkx";
        _ 3 mbz;
        abe_mcbsp2_clkx_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad abe_mcbsp2_clkx";
        abe_mcbsp2_clkx_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad abe_mcbsp2_clkx";
        abe_mcbsp2_clkx_muxmode 3 rw type(abe_mcbsp2_clkx_muxmode_status) "Functional multiplexing selection for pad abe_mcbsp2_clkx";
        sdmmc1_dat7_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        sdmmc1_dat7_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        sdmmc1_dat7_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad sdmmc1_dat7";
        sdmmc1_dat7_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad sdmmc1_dat7";
        sdmmc1_dat7_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad sdmmc1_dat7";
        sdmmc1_dat7_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad sdmmc1_dat7. This is an active low signal";
        sdmmc1_dat7_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad sdmmc1_dat7";
        sdmmc1_dat7_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad sdmmc1_dat7";
        _ 3 mbz;
        sdmmc1_dat7_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad sdmmc1_dat7";
        sdmmc1_dat7_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad sdmmc1_dat7";
        sdmmc1_dat7_muxmode 3 rw type(sdmmc1_dat7_muxmode_status) "Functional multiplexing selection for pad sdmmc1_dat7";
    };

    constants abe_mcbsp2_dx_muxmode_status width(3) "" {
        ABE_MCBSP2_DX_MUXMODE_0 = 0 "Select abe_mcbsp2_dx";
        ABE_MCBSP2_DX_MUXMODE_1 = 1 "Select mcspi2_simo";
        ABE_MCBSP2_DX_MUXMODE_2 = 2 "Select abe_mcasp_amute";
        ABE_MCBSP2_DX_MUXMODE_3 = 3 "Select gpio_112";
        ABE_MCBSP2_DX_MUXMODE_4 = 4 "Select usbb2_mm_rxrcv";
        ABE_MCBSP2_DX_MUXMODE_7 = 7 "Select safe_mode";
    };

    constants abe_mcbsp2_dr_muxmode_status width(3) "" {
        ABE_MCBSP2_DR_MUXMODE_0 = 0 "Select abe_mcbsp2_dr";
        ABE_MCBSP2_DR_MUXMODE_1 = 1 "Select mcspi2_somi";
        ABE_MCBSP2_DR_MUXMODE_2 = 2 "Select abe_mcasp_axr";
        ABE_MCBSP2_DR_MUXMODE_3 = 3 "Select gpio_111";
        ABE_MCBSP2_DR_MUXMODE_4 = 4 "Select usbb2_mm_rxdp";
        ABE_MCBSP2_DR_MUXMODE_7 = 7 "Select safe_mode";
    };
    
    register control_core_pad0_abe_mcbsp2_dr_pad1_abe_mcbsp2_dx addr(base, 0xF8) "Register control for Pads abe_mcbsp2_dr and abe_mcbsp2_dx Access conditions. Read: unrestricted, Write: unrestricted" {
        abe_mcbsp2_dx_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        abe_mcbsp2_dx_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        abe_mcbsp2_dx_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad abe_mcbsp2_dx";
        abe_mcbsp2_dx_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad abe_mcbsp2_dx";
        abe_mcbsp2_dx_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad abe_mcbsp2_dx";
        abe_mcbsp2_dx_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad abe_mcbsp2_dx. This is an active low signal";
        abe_mcbsp2_dx_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad abe_mcbsp2_dx";
        abe_mcbsp2_dx_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad abe_mcbsp2_dx";
        _ 3 mbz;
        abe_mcbsp2_dx_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad abe_mcbsp2_dx";
        abe_mcbsp2_dx_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad abe_mcbsp2_dx";
        abe_mcbsp2_dx_muxmode 3 rw type(abe_mcbsp2_dx_muxmode_status) "Functional multiplexing selection for pad abe_mcbsp2_dx";
        abe_mcbsp2_dr_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        abe_mcbsp2_dr_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        abe_mcbsp2_dr_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad abe_mcbsp2_dr";
        abe_mcbsp2_dr_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad abe_mcbsp2_dr";
        abe_mcbsp2_dr_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad abe_mcbsp2_dr";
        abe_mcbsp2_dr_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad abe_mcbsp2_dr. This is an active low signal";
        abe_mcbsp2_dr_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad abe_mcbsp2_dr";
        abe_mcbsp2_dr_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad abe_mcbsp2_dr";
        _ 3 mbz;
        abe_mcbsp2_dr_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad abe_mcbsp2_dr";
        abe_mcbsp2_dr_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad abe_mcbsp2_dr";
        abe_mcbsp2_dr_muxmode 3 rw type(abe_mcbsp2_dr_muxmode_status) "Functional multiplexing selection for pad abe_mcbsp2_dr";
    };

    constants abe_mcbsp1_clkx_muxmode_status width(3) "" {
        ABE_MCBSP1_CLKX_MUXMODE_0 = 0 "Select abe_mcbsp1_clkx";
        ABE_MCBSP1_CLKX_MUXMODE_1 = 1 "Select abe_slimbus1_clock";
        ABE_MCBSP1_CLKX_MUXMODE_3 = 3 "Select gpio_114";
        ABE_MCBSP1_CLKX_MUXMODE_7 = 7 "Select safe_mode";
    };

    constants abe_mcbsp2_fsx_muxmode_status width(3) "" {
        ABE_MCBSP2_FSX_MUXMODE_0 = 0 "Select abe_mcbsp2_fsx";
        ABE_MCBSP2_FSX_MUXMODE_1 = 1 "Select mcspi2_cs0";
        ABE_MCBSP2_FSX_MUXMODE_2 = 2 "Select abe_mcasp_afsx";
        ABE_MCBSP2_FSX_MUXMODE_3 = 3 "Select gpio_113";
        ABE_MCBSP2_FSX_MUXMODE_4 = 4 "Select usbb2_mm_txen";
        ABE_MCBSP2_FSX_MUXMODE_7 = 7 "Select safe_mode";
    };
    
    register control_core_pad0_abe_mcbsp2_fsx_pad1_abe_mcbsp1_clkx addr(base, 0xFC) "Register control for Pads abe_mcbsp2_fsx and abe_mcbsp1_clkx Access conditions. Read: unrestricted, Write: unrestricted" {
        abe_mcbsp1_clkx_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        abe_mcbsp1_clkx_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        abe_mcbsp1_clkx_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad abe_mcbsp1_clkx";
        abe_mcbsp1_clkx_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad abe_mcbsp1_clkx";
        abe_mcbsp1_clkx_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad abe_mcbsp1_clkx";
        abe_mcbsp1_clkx_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad abe_mcbsp1_clkx. This is an active low signal";
        abe_mcbsp1_clkx_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad abe_mcbsp1_clkx";
        abe_mcbsp1_clkx_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad abe_mcbsp1_clkx";
        _ 3 mbz;
        abe_mcbsp1_clkx_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad abe_mcbsp1_clkx";
        abe_mcbsp1_clkx_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad abe_mcbsp1_clkx";
        abe_mcbsp1_clkx_muxmode 3 rw type(abe_mcbsp1_clkx_muxmode_status) "Functional multiplexing selection for pad abe_mcbsp1_clkx";
        abe_mcbsp2_fsx_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        abe_mcbsp2_fsx_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        abe_mcbsp2_fsx_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad abe_mcbsp2_fsx";
        abe_mcbsp2_fsx_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad abe_mcbsp2_fsx";
        abe_mcbsp2_fsx_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad abe_mcbsp2_fsx";
        abe_mcbsp2_fsx_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad abe_mcbsp2_fsx. This is an active low signal";
        abe_mcbsp2_fsx_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad abe_mcbsp2_fsx";
        abe_mcbsp2_fsx_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad abe_mcbsp2_fsx";
        _ 3 mbz;
        abe_mcbsp2_fsx_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad abe_mcbsp2_fsx";
        abe_mcbsp2_fsx_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad abe_mcbsp2_fsx";
        abe_mcbsp2_fsx_muxmode 3 rw type(abe_mcbsp2_fsx_muxmode_status) "Functional multiplexing selection for pad abe_mcbsp2_fsx";
    };

    constants abe_mcbsp1_dx_muxmode_status width(3) "" {
        ABE_MCBSP1_DX_MUXMODE_0 = 0 "Select abe_mcbsp1_dx";
        ABE_MCBSP1_DX_MUXMODE_1 = 1 "Select sdmmc3_dat2";
        ABE_MCBSP1_DX_MUXMODE_2 = 2 "Select abe_mcasp_aclkx";
        ABE_MCBSP1_DX_MUXMODE_3 = 3 "Select gpio_116";
        ABE_MCBSP1_DX_MUXMODE_7 = 7 "Select safe_mode";
    };

    constants abe_mcbsp1_dr_muxmode_status width(3) "" {
        ABE_MCBSP1_DR_MUXMODE_0 = 0 "Select abe_mcbsp1_dr";
        ABE_MCBSP1_DR_MUXMODE_1 = 1 "Select abe_slimbus1_data";
        ABE_MCBSP1_DR_MUXMODE_3 = 3 "Select gpio_115";
        ABE_MCBSP1_DR_MUXMODE_7 = 7 "Select safe_mode";
    };
    
    register control_core_pad0_abe_mcbsp1_dr_pad1_abe_mcbsp1_dx addr(base, 0x100) "Register control for Pads abe_mcbsp1_dr and abe_mcbsp1_dx Access conditions. Read: unrestricted, Write: unrestricted" {
        abe_mcbsp1_dx_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        abe_mcbsp1_dx_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        abe_mcbsp1_dx_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad abe_mcbsp1_dx";
        abe_mcbsp1_dx_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad abe_mcbsp1_dx";
        abe_mcbsp1_dx_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad abe_mcbsp1_dx";
        abe_mcbsp1_dx_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad abe_mcbsp1_dx. This is an active low signal";
        abe_mcbsp1_dx_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad abe_mcbsp1_dx";
        abe_mcbsp1_dx_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad abe_mcbsp1_dx";
        _ 3 mbz;
        abe_mcbsp1_dx_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad abe_mcbsp1_dx";
        abe_mcbsp1_dx_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad abe_mcbsp1_dx";
        abe_mcbsp1_dx_muxmode 3 rw type(abe_mcbsp1_dx_muxmode_status) "Functional multiplexing selection for pad abe_mcbsp1_dx";
        abe_mcbsp1_dr_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        abe_mcbsp1_dr_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        abe_mcbsp1_dr_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad abe_mcbsp1_dr";
        abe_mcbsp1_dr_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad abe_mcbsp1_dr";
        abe_mcbsp1_dr_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad abe_mcbsp1_dr";
        abe_mcbsp1_dr_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad abe_mcbsp1_dr. This is an active low signal";
        abe_mcbsp1_dr_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad abe_mcbsp1_dr";
        abe_mcbsp1_dr_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad abe_mcbsp1_dr";
        _ 3 mbz;
        abe_mcbsp1_dr_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad abe_mcbsp1_dr";
        abe_mcbsp1_dr_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad abe_mcbsp1_dr";
        abe_mcbsp1_dr_muxmode 3 rw type(abe_mcbsp1_dr_muxmode_status) "Functional multiplexing selection for pad abe_mcbsp1_dr";
    };

    constants abe_pdm_ul_data_muxmode_status width(3) "" {
        ABE_PDM_UL_DATA_MUXMODE_0 = 0 "Select abe_pdm_ul_data";
        ABE_PDM_UL_DATA_MUXMODE_1 = 1 "Select abe_mcbsp3_dr";
        ABE_PDM_UL_DATA_MUXMODE_7 = 7 "Select safe_mode";
    };

    constants abe_mcbsp1_fsx_muxmode_status width(3) "" {
        ABE_MCBSP1_FSX_MUXMODE_0 = 0 "Select abe_mcbsp1_fsx";
        ABE_MCBSP1_FSX_MUXMODE_1 = 1 "Select sdmmc3_dat3";
        ABE_MCBSP1_FSX_MUXMODE_2 = 2 "Select abe_mcasp_amutein";
        ABE_MCBSP1_FSX_MUXMODE_3 = 3 "Select gpio_117";
        ABE_MCBSP1_FSX_MUXMODE_7 = 7 "Select safe_mode";
    };
    
    register control_core_pad0_abe_mcbsp1_fsx_pad1_abe_pdm_ul_data addr(base, 0x104) "Register control for Pads abe_mcbsp1_fsx and abe_pdm_ul_data Access conditions. Read: unrestricted, Write: unrestricted" {
        abe_pdm_ul_data_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        abe_pdm_ul_data_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        _ 5 mbz;
        abe_pdm_ul_data_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad abe_pdm_ul_data";
        _ 3 mbz;
        abe_pdm_ul_data_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad abe_pdm_ul_data";
        abe_pdm_ul_data_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad abe_pdm_ul_data";
        abe_pdm_ul_data_muxmode 3 rw type(abe_pdm_ul_data_muxmode_status) "Functional multiplexing selection for pad abe_pdm_ul_data";
        abe_mcbsp1_fsx_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        abe_mcbsp1_fsx_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        abe_mcbsp1_fsx_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad abe_mcbsp1_fsx";
        abe_mcbsp1_fsx_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad abe_mcbsp1_fsx";
        abe_mcbsp1_fsx_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad abe_mcbsp1_fsx";
        abe_mcbsp1_fsx_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad abe_mcbsp1_fsx. This is an active low signal";
        abe_mcbsp1_fsx_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad abe_mcbsp1_fsx";
        abe_mcbsp1_fsx_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad abe_mcbsp1_fsx";
        _ 3 mbz;
        abe_mcbsp1_fsx_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad abe_mcbsp1_fsx";
        abe_mcbsp1_fsx_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad abe_mcbsp1_fsx";
        abe_mcbsp1_fsx_muxmode 3 rw type(abe_mcbsp1_fsx_muxmode_status) "Functional multiplexing selection for pad abe_mcbsp1_fsx";
    };

    constants abe_pdm_frame_muxmode_status width(3) "" {
        ABE_PDM_FRAME_MUXMODE_0 = 0 "Select abe_pdm_frame";
        ABE_PDM_FRAME_MUXMODE_1 = 1 "Select abe_mcbsp3_clkx";
        ABE_PDM_FRAME_MUXMODE_7 = 7 "Select safe_mode";
    };

    constants abe_pdm_dl_data_muxmode_status width(3) "" {
        ABE_PDM_DL_DATA_MUXMODE_0 = 0 "Select abe_pdm_dl_data";
        ABE_PDM_DL_DATA_MUXMODE_1 = 1 "Select abe_mcbsp3_dx";
        ABE_PDM_DL_DATA_MUXMODE_7 = 7 "Select safe_mode";
    };
    
    register control_core_pad0_abe_pdm_dl_data_pad1_abe_pdm_frame addr(base, 0x108) "Register control for Pads abe_pdm_dl_data and abe_pdm_frame Access conditions. Read: unrestricted, Write: unrestricted" {
        abe_pdm_frame_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        abe_pdm_frame_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        abe_pdm_frame_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad abe_pdm_frame";
        abe_pdm_frame_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad abe_pdm_frame";
        abe_pdm_frame_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad abe_pdm_frame";
        abe_pdm_frame_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad abe_pdm_frame. This is an active low signal";
        abe_pdm_frame_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad abe_pdm_frame";
        abe_pdm_frame_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad abe_pdm_frame";
        _ 3 mbz;
        abe_pdm_frame_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad abe_pdm_frame";
        abe_pdm_frame_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad abe_pdm_frame";
        abe_pdm_frame_muxmode 3 rw type(abe_pdm_frame_muxmode_status) "Functional multiplexing selection for pad abe_pdm_frame";
        abe_pdm_dl_data_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        abe_pdm_dl_data_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        abe_pdm_dl_data_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad abe_pdm_dl_data";
        abe_pdm_dl_data_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad abe_pdm_dl_data";
        abe_pdm_dl_data_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad abe_pdm_dl_data";
        abe_pdm_dl_data_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad abe_pdm_dl_data. This is an active low signal";
        abe_pdm_dl_data_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad abe_pdm_dl_data";
        abe_pdm_dl_data_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad abe_pdm_dl_data";
        _ 3 mbz;
        abe_pdm_dl_data_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad abe_pdm_dl_data";
        abe_pdm_dl_data_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad abe_pdm_dl_data";
        abe_pdm_dl_data_muxmode 3 rw type(abe_pdm_dl_data_muxmode_status) "Functional multiplexing selection for pad abe_pdm_dl_data";
    };

    constants abe_clks_muxmode_status width(3) "" {
        ABE_CLKS_MUXMODE_0 = 0 "Select abe_clks";
        ABE_CLKS_MUXMODE_3 = 3 "Select gpio_118";
        ABE_CLKS_MUXMODE_7 = 7 "Select safe_mode";
    };

    constants abe_pdm_lb_clk_muxmode_status width(3) "" {
        ABE_PDM_LB_CLK_MUXMODE_0 = 0 "Select abe_pdm_lb_clk";
        ABE_PDM_LB_CLK_MUXMODE_1 = 1 "Select abe_mcbsp3_fsx";
        ABE_PDM_LB_CLK_MUXMODE_7 = 7 "Select safe_mode";
    };
    
    register control_core_pad0_abe_pdm_lb_clk_pad1_abe_clks addr(base, 0x10C) "Register control for Pads abe_pdm_lb_clk and abe_clks Access conditions. Read: unrestricted, Write: unrestricted" {
        abe_clks_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        abe_clks_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        abe_clks_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad abe_clks";
        abe_clks_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad abe_clks";
        abe_clks_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad abe_clks";
        abe_clks_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad abe_clks. This is an active low signal";
        abe_clks_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad abe_clks";
        abe_clks_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad abe_clks";
        _ 3 mbz;
        abe_clks_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad abe_clks";
        abe_clks_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad abe_clks";
        abe_clks_muxmode 3 rw type(abe_clks_muxmode_status) "Functional multiplexing selection for pad abe_clks";
        abe_pdm_lb_clk_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        abe_pdm_lb_clk_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        abe_pdm_lb_clk_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad abe_pdm_lb_clk";
        abe_pdm_lb_clk_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad abe_pdm_lb_clk";
        abe_pdm_lb_clk_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad abe_pdm_lb_clk";
        abe_pdm_lb_clk_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad abe_pdm_lb_clk. This is an active low signal";
        abe_pdm_lb_clk_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad abe_pdm_lb_clk";
        abe_pdm_lb_clk_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad abe_pdm_lb_clk";
        _ 3 mbz;
        abe_pdm_lb_clk_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad abe_pdm_lb_clk";
        abe_pdm_lb_clk_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad abe_pdm_lb_clk";
        abe_pdm_lb_clk_muxmode 3 rw type(abe_pdm_lb_clk_muxmode_status) "Functional multiplexing selection for pad abe_pdm_lb_clk";
    };

    constants abe_dmic_din1_muxmode_status width(3) "" {
        ABE_DMIC_DIN1_MUXMODE_0 = 0 "Select abe_dmic_din1";
        ABE_DMIC_DIN1_MUXMODE_3 = 3 "Select gpio_120";
        ABE_DMIC_DIN1_MUXMODE_4 = 4 "Select usbb2_mm_txdat";
        ABE_DMIC_DIN1_MUXMODE_5 = 5 "Select uart4_rts";
        ABE_DMIC_DIN1_MUXMODE_7 = 7 "Select safe_mode";
    };

    constants abe_dmic_clk1_muxmode_status width(3) "" {
        ABE_DMIC_CLK1_MUXMODE_0 = 0 "Select abe_dmic_clk1";
        ABE_DMIC_CLK1_MUXMODE_3 = 3 "Select gpio_119";
        ABE_DMIC_CLK1_MUXMODE_4 = 4 "Select usbb2_mm_txse0";
        ABE_DMIC_CLK1_MUXMODE_5 = 5 "Select uart4_cts";
        ABE_DMIC_CLK1_MUXMODE_7 = 7 "Select safe_mode";
    };
    
    register control_core_pad0_abe_dmic_clk1_pad1_abe_dmic_din1 addr(base, 0x110) "Register control for Pads abe_dmic_clk1 and abe_dmic_din1 Access conditions. Read: unrestricted, Write: unrestricted" {
        abe_dmic_din1_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        abe_dmic_din1_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        abe_dmic_din1_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad abe_dmic_din1";
        abe_dmic_din1_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad abe_dmic_din1";
        abe_dmic_din1_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad abe_dmic_din1";
        abe_dmic_din1_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad abe_dmic_din1. This is an active low signal";
        abe_dmic_din1_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad abe_dmic_din1";
        abe_dmic_din1_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad abe_dmic_din1";
        _ 3 mbz;
        abe_dmic_din1_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad abe_dmic_din1";
        abe_dmic_din1_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad abe_dmic_din1";
        abe_dmic_din1_muxmode 3 rw type(abe_dmic_din1_muxmode_status) "Functional multiplexing selection for pad abe_dmic_din1";
        abe_dmic_clk1_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        abe_dmic_clk1_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        abe_dmic_clk1_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad abe_dmic_clk1";
        abe_dmic_clk1_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad abe_dmic_clk1";
        abe_dmic_clk1_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad abe_dmic_clk1";
        abe_dmic_clk1_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad abe_dmic_clk1. This is an active low signal";
        abe_dmic_clk1_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad abe_dmic_clk1";
        abe_dmic_clk1_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad abe_dmic_clk1";
        _ 3 mbz;
        abe_dmic_clk1_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad abe_dmic_clk1";
        abe_dmic_clk1_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad abe_dmic_clk1";
        abe_dmic_clk1_muxmode 3 rw type(abe_dmic_clk1_muxmode_status) "Functional multiplexing selection for pad abe_dmic_clk1";
    };

    constants abe_dmic_din3_muxmode_status width(3) "" {
        ABE_DMIC_DIN3_MUXMODE_0 = 0 "Select abe_dmic_din3";
        ABE_DMIC_DIN3_MUXMODE_1 = 1 "Select slimbus2_data";
        ABE_DMIC_DIN3_MUXMODE_2 = 2 "Select abe_dmic_clk2";
        ABE_DMIC_DIN3_MUXMODE_3 = 3 "Select gpio_122";
        ABE_DMIC_DIN3_MUXMODE_5 = 5 "Select dmtimer9_pwm_evt";
        ABE_DMIC_DIN3_MUXMODE_7 = 7 "Select safe_mode";
    };

    constants abe_dmic_din2_muxmode_status width(3) "" {
        ABE_DMIC_DIN2_MUXMODE_0 = 0 "Select abe_dmic_din2";
        ABE_DMIC_DIN2_MUXMODE_1 = 1 "Select slimbus2_clock";
        ABE_DMIC_DIN2_MUXMODE_2 = 2 "Select abe_mcasp_axr";
        ABE_DMIC_DIN2_MUXMODE_3 = 3 "Select gpio_121";
        ABE_DMIC_DIN2_MUXMODE_5 = 5 "Select dmtimer11_pwm_evt";
        ABE_DMIC_DIN2_MUXMODE_7 = 7 "Select safe_mode";
    };
    
    register control_core_pad0_abe_dmic_din2_pad1_abe_dmic_din3 addr(base, 0x114) "Register control for Pads abe_dmic_din2 and abe_dmic_din3 Access conditions. Read: unrestricted, Write: unrestricted" {
        abe_dmic_din3_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        abe_dmic_din3_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        abe_dmic_din3_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad abe_dmic_din3";
        abe_dmic_din3_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad abe_dmic_din3";
        abe_dmic_din3_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad abe_dmic_din3";
        abe_dmic_din3_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad abe_dmic_din3. This is an active low signal";
        abe_dmic_din3_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad abe_dmic_din3";
        abe_dmic_din3_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad abe_dmic_din3";
        _ 3 mbz;
        abe_dmic_din3_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad abe_dmic_din3";
        abe_dmic_din3_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad abe_dmic_din3";
        abe_dmic_din3_muxmode 3 rw type(abe_dmic_din3_muxmode_status) "Functional multiplexing selection for pad abe_dmic_din3";
        abe_dmic_din2_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        abe_dmic_din2_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        abe_dmic_din2_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad abe_dmic_din2";
        abe_dmic_din2_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad abe_dmic_din2";
        abe_dmic_din2_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad abe_dmic_din2";
        abe_dmic_din2_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad abe_dmic_din2. This is an active low signal";
        abe_dmic_din2_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad abe_dmic_din2";
        abe_dmic_din2_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad abe_dmic_din2";
        _ 3 mbz;
        abe_dmic_din2_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad abe_dmic_din2";
        abe_dmic_din2_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad abe_dmic_din2";
        abe_dmic_din2_muxmode 3 rw type(abe_dmic_din2_muxmode_status) "Functional multiplexing selection for pad abe_dmic_din2";
    };

    constants uart2_rts_muxmode_status width(3) "" {
        UART2_RTS_MUXMODE_0 = 0 "Select uart2_rts";
        UART2_RTS_MUXMODE_1 = 1 "Select sdmmc3_cmd";
        UART2_RTS_MUXMODE_3 = 3 "Select gpio_124";
        UART2_RTS_MUXMODE_7 = 7 "Select safe_mode";
    };

    constants uart2_cts_muxmode_status width(3) "" {
        UART2_CTS_MUXMODE_0 = 0 "Select uart2_cts";
        UART2_CTS_MUXMODE_1 = 1 "Select sdmmc3_clk";
        UART2_CTS_MUXMODE_3 = 3 "Select gpio_123";
        UART2_CTS_MUXMODE_7 = 7 "Select safe_mode";
    };
    
    register control_core_pad0_uart2_cts_pad1_uart2_rts addr(base, 0x118) "Register control for Pads uart2_cts and uart2_rts Access conditions. Read: unrestricted, Write: unrestricted" {
        uart2_rts_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        uart2_rts_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        uart2_rts_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad uart2_rts";
        uart2_rts_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad uart2_rts";
        uart2_rts_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad uart2_rts";
        uart2_rts_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad uart2_rts. This is an active low signal";
        uart2_rts_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad uart2_rts";
        uart2_rts_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad uart2_rts";
        _ 3 mbz;
        uart2_rts_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad uart2_rts";
        uart2_rts_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad uart2_rts";
        uart2_rts_muxmode 3 rw type(uart2_rts_muxmode_status) "Functional multiplexing selection for pad uart2_rts";
        uart2_cts_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        uart2_cts_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        uart2_cts_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad uart2_cts";
        uart2_cts_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad uart2_cts";
        uart2_cts_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad uart2_cts";
        uart2_cts_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad uart2_cts. This is an active low signal";
        uart2_cts_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad uart2_cts";
        uart2_cts_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad uart2_cts";
        _ 3 mbz;
        uart2_cts_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad uart2_cts";
        uart2_cts_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad uart2_cts";
        uart2_cts_muxmode 3 rw type(uart2_cts_muxmode_status) "Functional multiplexing selection for pad uart2_cts";
    };

    constants uart2_tx_muxmode_status width(3) "" {
        UART2_TX_MUXMODE_0 = 0 "Select uart2_tx";
        UART2_TX_MUXMODE_1 = 1 "Select sdmmc3_dat1";
        UART2_TX_MUXMODE_3 = 3 "Select gpio_126";
        UART2_TX_MUXMODE_7 = 7 "Select safe_mode";
    };

    constants uart2_rx_muxmode_status width(3) "" {
        UART2_RX_MUXMODE_0 = 0 "Select uart2_rx";
        UART2_RX_MUXMODE_1 = 1 "Select sdmmc3_dat0";
        UART2_RX_MUXMODE_3 = 3 "Select gpio_125";
        UART2_RX_MUXMODE_7 = 7 "Select safe_mode";
    };
    
    register control_core_pad0_uart2_rx_pad1_uart2_tx addr(base, 0x11C) "Register control for Pads uart2_rx and uart2_tx Access conditions. Read: unrestricted, Write: unrestricted" {
        uart2_tx_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        uart2_tx_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        uart2_tx_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad uart2_tx";
        uart2_tx_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad uart2_tx";
        uart2_tx_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad uart2_tx";
        uart2_tx_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad uart2_tx. This is an active low signal";
        uart2_tx_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad uart2_tx";
        uart2_tx_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad uart2_tx";
        _ 3 mbz;
        uart2_tx_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad uart2_tx";
        uart2_tx_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad uart2_tx";
        uart2_tx_muxmode 3 rw type(uart2_tx_muxmode_status) "Functional multiplexing selection for pad uart2_tx";
        uart2_rx_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        uart2_rx_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        uart2_rx_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad uart2_rx";
        uart2_rx_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad uart2_rx";
        uart2_rx_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad uart2_rx";
        uart2_rx_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad uart2_rx. This is an active low signal";
        uart2_rx_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad uart2_rx";
        uart2_rx_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad uart2_rx";
        _ 3 mbz;
        uart2_rx_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad uart2_rx";
        uart2_rx_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad uart2_rx";
        uart2_rx_muxmode 3 rw type(uart2_rx_muxmode_status) "Functional multiplexing selection for pad uart2_rx";
    };

    constants hdq_sio_offmodepulltypeselect_status width(1) "" {
        HDQ_SIO_OFFMODEPULLTYPESELECT_0 = 0 "Offmode Pull-Down selected";
        HDQ_SIO_OFFMODEPULLTYPESELECT_1 = 1 "Offmode Pull-Up selected";
    };

    constants hdq_sio_offmodepulludenable_status width(1) "" {
        HDQ_SIO_OFFMODEPULLUDENABLE_0 = 0 "Offmode Pull-Up/Down disabled";
        HDQ_SIO_OFFMODEPULLUDENABLE_1 = 1 "Offmode Pull-Up/Down enabled";
    };

    constants hdq_sio_pulltypeselect_status width(1) "" {
        HDQ_SIO_PULLTYPESELECT_0 = 0 "Pull-Down selected";
        HDQ_SIO_PULLTYPESELECT_1 = 1 "Pull-Up selected";
    };

    constants hdq_sio_pulludenable_status width(1) "" {
        HDQ_SIO_PULLUDENABLE_0 = 0 "Pull-Up/Down disabled";
        HDQ_SIO_PULLUDENABLE_1 = 1 "Pull-Up/Down enabled";
    };

    constants hdq_sio_muxmode_status width(3) "" {
        HDQ_SIO_MUXMODE_0 = 0 "Select hdq_sio";
        HDQ_SIO_MUXMODE_1 = 1 "Select i2c3_sccb";
        HDQ_SIO_MUXMODE_2 = 2 "Select i2c2_sccb";
        HDQ_SIO_MUXMODE_3 = 3 "Select gpio_127";
        HDQ_SIO_MUXMODE_7 = 7 "Select safe_mode";
    };
    
    register control_core_pad0_hdq_sio_pad1_i2c1_scl addr(base, 0x120) "Register control for Pads hdq_sio and i2c1_scl Access conditions. Read: unrestricted, Write: unrestricted" {
        i2c1_scl_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        i2c1_scl_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        _ 5 mbz;
        i2c1_scl_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad i2c1_scl";
        _ 3 mbz;
        i2c1_scl_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad i2c1_scl";
        i2c1_scl_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad i2c1_scl";
        _ 3 mbz;
        hdq_sio_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        hdq_sio_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        hdq_sio_offmodepulltypeselect 1 rw type(hdq_sio_offmodepulltypeselect_status) "OffMode mode Pull-Up/Down selection for pad hdq_sio";
        hdq_sio_offmodepulludenable 1 rw type(hdq_sio_offmodepulludenable_status) "OffMode mode Pull-Up/Down enable for pad hdq_sio";
        hdq_sio_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad hdq_sio";
        hdq_sio_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad hdq_sio. This is an active low signal";
        hdq_sio_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad hdq_sio";
        hdq_sio_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad hdq_sio";
        _ 3 mbz;
        hdq_sio_pulltypeselect 1 rw type(hdq_sio_pulltypeselect_status) "Pull-Up/Down selection for pad hdq_sio";
        hdq_sio_pulludenable 1 rw type(hdq_sio_pulludenable_status) "Pull-Up/Down enable for pad hdq_sio";
        hdq_sio_muxmode 3 rw type(hdq_sio_muxmode_status) "Functional multiplexing selection for pad hdq_sio";
    };

    constants i2c2_scl_muxmode_status width(3) "" {
        I2C2_SCL_MUXMODE_0 = 0 "Select i2c2_scl";
        I2C2_SCL_MUXMODE_1 = 1 "Select uart1_rx";
        I2C2_SCL_MUXMODE_3 = 3 "Select gpio_128";
        I2C2_SCL_MUXMODE_7 = 7 "Select safe_mode";
    };
    
    register control_core_pad0_i2c1_sda_pad1_i2c2_scl addr(base, 0x124) "Register control for Pads i2c1_sda and i2c2_scl Access conditions. Read: unrestricted, Write: unrestricted" {
        i2c2_scl_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        i2c2_scl_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        i2c2_scl_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad i2c2_scl";
        i2c2_scl_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad i2c2_scl";
        i2c2_scl_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad i2c2_scl";
        i2c2_scl_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad i2c2_scl. This is an active low signal";
        i2c2_scl_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad i2c2_scl";
        i2c2_scl_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad i2c2_scl";
        _ 3 mbz;
        i2c2_scl_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad i2c2_scl";
        i2c2_scl_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad i2c2_scl";
        i2c2_scl_muxmode 3 rw type(i2c2_scl_muxmode_status) "Functional multiplexing selection for pad i2c2_scl";
        i2c1_sda_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        i2c1_sda_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        _ 5 mbz;
        i2c1_sda_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad i2c1_sda";
        _ 3 mbz;
        i2c1_sda_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad i2c1_sda";
        i2c1_sda_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad i2c1_sda";
        _ 3 mbz;
    };

    constants i2c3_scl_muxmode_status width(3) "" {
        I2C3_SCL_MUXMODE_0 = 0 "Select i2c3_scl";
        I2C3_SCL_MUXMODE_3 = 3 "Select gpio_130";
        I2C3_SCL_MUXMODE_7 = 7 "Select safe_mode";
    };

    constants i2c2_sda_muxmode_status width(3) "" {
        I2C2_SDA_MUXMODE_0 = 0 "Select i2c2_sda";
        I2C2_SDA_MUXMODE_1 = 1 "Select uart1_tx";
        I2C2_SDA_MUXMODE_3 = 3 "Select gpio_129";
        I2C2_SDA_MUXMODE_7 = 7 "Select safe_mode";
    };
    
    register control_core_pad0_i2c2_sda_pad1_i2c3_scl addr(base, 0x128) "Register control for Pads i2c2_sda and i2c3_scl Access conditions. Read: unrestricted, Write: unrestricted" {
        i2c3_scl_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        i2c3_scl_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        i2c3_scl_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad i2c3_scl";
        i2c3_scl_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad i2c3_scl";
        i2c3_scl_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad i2c3_scl";
        i2c3_scl_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad i2c3_scl. This is an active low signal";
        i2c3_scl_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad i2c3_scl";
        i2c3_scl_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad i2c3_scl";
        _ 3 mbz;
        i2c3_scl_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad i2c3_scl";
        i2c3_scl_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad i2c3_scl";
        i2c3_scl_muxmode 3 rw type(i2c3_scl_muxmode_status) "Functional multiplexing selection for pad i2c3_scl";
        i2c2_sda_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        i2c2_sda_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        i2c2_sda_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad i2c2_sda";
        i2c2_sda_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad i2c2_sda";
        i2c2_sda_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad i2c2_sda";
        i2c2_sda_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad i2c2_sda. This is an active low signal";
        i2c2_sda_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad i2c2_sda";
        i2c2_sda_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad i2c2_sda";
        _ 3 mbz;
        i2c2_sda_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad i2c2_sda";
        i2c2_sda_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad i2c2_sda";
        i2c2_sda_muxmode 3 rw type(i2c2_sda_muxmode_status) "Functional multiplexing selection for pad i2c2_sda";
    };

    constants i2c4_scl_muxmode_status width(3) "" {
        I2C4_SCL_MUXMODE_0 = 0 "Select i2c4_scl";
        I2C4_SCL_MUXMODE_3 = 3 "Select gpio_132";
        I2C4_SCL_MUXMODE_7 = 7 "Select safe_mode";
    };

    constants i2c3_sda_muxmode_status width(3) "" {
        I2C3_SDA_MUXMODE_0 = 0 "Select i2c3_sda";
        I2C3_SDA_MUXMODE_3 = 3 "Select gpio_131";
        I2C3_SDA_MUXMODE_7 = 7 "Select safe_mode";
    };
    
    register control_core_pad0_i2c3_sda_pad1_i2c4_scl addr(base, 0x12C) "Register control for Pads i2c3_sda and i2c4_scl Access conditions. Read: unrestricted, Write: unrestricted" {
        i2c4_scl_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        i2c4_scl_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        i2c4_scl_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad i2c4_scl";
        i2c4_scl_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad i2c4_scl";
        i2c4_scl_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad i2c4_scl";
        i2c4_scl_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad i2c4_scl. This is an active low signal";
        i2c4_scl_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad i2c4_scl";
        i2c4_scl_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad i2c4_scl";
        _ 3 mbz;
        i2c4_scl_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad i2c4_scl";
        i2c4_scl_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad i2c4_scl";
        i2c4_scl_muxmode 3 rw type(i2c4_scl_muxmode_status) "Functional multiplexing selection for pad i2c4_scl";
        i2c3_sda_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        i2c3_sda_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        i2c3_sda_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad i2c3_sda";
        i2c3_sda_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad i2c3_sda";
        i2c3_sda_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad i2c3_sda";
        i2c3_sda_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad i2c3_sda. This is an active low signal";
        i2c3_sda_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad i2c3_sda";
        i2c3_sda_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad i2c3_sda";
        _ 3 mbz;
        i2c3_sda_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad i2c3_sda";
        i2c3_sda_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad i2c3_sda";
        i2c3_sda_muxmode 3 rw type(i2c3_sda_muxmode_status) "Functional multiplexing selection for pad i2c3_sda";
    };

    constants mcspi1_clk_muxmode_status width(3) "" {
        MCSPI1_CLK_MUXMODE_0 = 0 "Select mcspi1_clk";
        MCSPI1_CLK_MUXMODE_3 = 3 "Select gpio_134";
        MCSPI1_CLK_MUXMODE_7 = 7 "Select safe_mode";
    };

    constants i2c4_sda_muxmode_status width(3) "" {
        I2C4_SDA_MUXMODE_0 = 0 "Select i2c4_sda";
        I2C4_SDA_MUXMODE_3 = 3 "Select gpio_133";
        I2C4_SDA_MUXMODE_7 = 7 "Select safe_mode";
    };
    
    register control_core_pad0_i2c4_sda_pad1_mcspi1_clk addr(base, 0x130) "Register control for Pads i2c4_sda and mcspi1_clk Access conditions. Read: unrestricted, Write: unrestricted" {
        mcspi1_clk_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        mcspi1_clk_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        mcspi1_clk_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad mcspi1_clk";
        mcspi1_clk_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad mcspi1_clk";
        mcspi1_clk_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad mcspi1_clk";
        mcspi1_clk_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad mcspi1_clk. This is an active low signal";
        mcspi1_clk_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad mcspi1_clk";
        mcspi1_clk_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad mcspi1_clk";
        _ 3 mbz;
        mcspi1_clk_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad mcspi1_clk";
        mcspi1_clk_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad mcspi1_clk";
        mcspi1_clk_muxmode 3 rw type(mcspi1_clk_muxmode_status) "Functional multiplexing selection for pad mcspi1_clk";
        i2c4_sda_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        i2c4_sda_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        i2c4_sda_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad i2c4_sda";
        i2c4_sda_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad i2c4_sda";
        i2c4_sda_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad i2c4_sda";
        i2c4_sda_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad i2c4_sda. This is an active low signal";
        i2c4_sda_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad i2c4_sda";
        i2c4_sda_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad i2c4_sda";
        _ 3 mbz;
        i2c4_sda_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad i2c4_sda";
        i2c4_sda_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad i2c4_sda";
        i2c4_sda_muxmode 3 rw type(i2c4_sda_muxmode_status) "Functional multiplexing selection for pad i2c4_sda";
    };

    constants mcspi1_simo_muxmode_status width(3) "" {
        MCSPI1_SIMO_MUXMODE_0 = 0 "Select mcspi1_simo";
        MCSPI1_SIMO_MUXMODE_3 = 3 "Select gpio_136";
        MCSPI1_SIMO_MUXMODE_7 = 7 "Select safe_mode";
    };

    constants mcspi1_somi_muxmode_status width(3) "" {
        MCSPI1_SOMI_MUXMODE_0 = 0 "Select mcspi1_somi";
        MCSPI1_SOMI_MUXMODE_3 = 3 "Select gpio_135";
        MCSPI1_SOMI_MUXMODE_7 = 7 "Select safe_mode";
    };
    
    register control_core_pad0_mcspi1_somi_pad1_mcspi1_simo addr(base, 0x134) "Register control for Pads mcspi1_somi and mcspi1_simo Access conditions. Read: unrestricted, Write: unrestricted" {
        mcspi1_simo_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        mcspi1_simo_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        mcspi1_simo_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad mcspi1_simo";
        mcspi1_simo_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad mcspi1_simo";
        mcspi1_simo_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad mcspi1_simo";
        mcspi1_simo_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad mcspi1_simo. This is an active low signal";
        mcspi1_simo_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad mcspi1_simo";
        mcspi1_simo_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad mcspi1_simo";
        _ 3 mbz;
        mcspi1_simo_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad mcspi1_simo";
        mcspi1_simo_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad mcspi1_simo";
        mcspi1_simo_muxmode 3 rw type(mcspi1_simo_muxmode_status) "Functional multiplexing selection for pad mcspi1_simo";
        mcspi1_somi_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        mcspi1_somi_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        mcspi1_somi_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad mcspi1_somi";
        mcspi1_somi_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad mcspi1_somi";
        mcspi1_somi_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad mcspi1_somi";
        mcspi1_somi_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad mcspi1_somi. This is an active low signal";
        mcspi1_somi_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad mcspi1_somi";
        mcspi1_somi_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad mcspi1_somi";
        _ 3 mbz;
        mcspi1_somi_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad mcspi1_somi";
        mcspi1_somi_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad mcspi1_somi";
        mcspi1_somi_muxmode 3 rw type(mcspi1_somi_muxmode_status) "Functional multiplexing selection for pad mcspi1_somi";
    };

    constants mcspi1_cs1_muxmode_status width(3) "" {
        MCSPI1_CS1_MUXMODE_0 = 0 "Select mcspi1_cs1";
        MCSPI1_CS1_MUXMODE_1 = 1 "Select uart1_rx";
        MCSPI1_CS1_MUXMODE_3 = 3 "Select gpio_138";
        MCSPI1_CS1_MUXMODE_7 = 7 "Select safe_mode";
    };

    constants mcspi1_cs0_muxmode_status width(3) "" {
        MCSPI1_CS0_MUXMODE_0 = 0 "Select mcspi1_cs0";
        MCSPI1_CS0_MUXMODE_3 = 3 "Select gpio_137";
        MCSPI1_CS0_MUXMODE_7 = 7 "Select safe_mode";
    };
    
    register control_core_pad0_mcspi1_cs0_pad1_mcspi1_cs1 addr(base, 0x138) "Register control for Pads mcspi1_cs0 and mcspi1_cs1 Access conditions. Read: unrestricted, Write: unrestricted" {
        mcspi1_cs1_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        mcspi1_cs1_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        mcspi1_cs1_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad mcspi1_cs1";
        mcspi1_cs1_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad mcspi1_cs1";
        mcspi1_cs1_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad mcspi1_cs1";
        mcspi1_cs1_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad mcspi1_cs1. This is an active low signal";
        mcspi1_cs1_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad mcspi1_cs1";
        mcspi1_cs1_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad mcspi1_cs1";
        _ 3 mbz;
        mcspi1_cs1_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad mcspi1_cs1";
        mcspi1_cs1_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad mcspi1_cs1";
        mcspi1_cs1_muxmode 3 rw type(mcspi1_cs1_muxmode_status) "Functional multiplexing selection for pad mcspi1_cs1";
        mcspi1_cs0_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        mcspi1_cs0_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        mcspi1_cs0_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad mcspi1_cs0";
        mcspi1_cs0_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad mcspi1_cs0";
        mcspi1_cs0_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad mcspi1_cs0";
        mcspi1_cs0_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad mcspi1_cs0. This is an active low signal";
        mcspi1_cs0_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad mcspi1_cs0";
        mcspi1_cs0_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad mcspi1_cs0";
        _ 3 mbz;
        mcspi1_cs0_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad mcspi1_cs0";
        mcspi1_cs0_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad mcspi1_cs0";
        mcspi1_cs0_muxmode 3 rw type(mcspi1_cs0_muxmode_status) "Functional multiplexing selection for pad mcspi1_cs0";
    };

    constants mcspi1_cs3_muxmode_status width(3) "" {
        MCSPI1_CS3_MUXMODE_0 = 0 "Select mcspi1_cs3";
        MCSPI1_CS3_MUXMODE_1 = 1 "Select uart1_rts";
        MCSPI1_CS3_MUXMODE_2 = 2 "Select slimbus2_data";
        MCSPI1_CS3_MUXMODE_3 = 3 "Select gpio_140";
        MCSPI1_CS3_MUXMODE_7 = 7 "Select safe_mode";
    };

    constants mcspi1_cs2_muxmode_status width(3) "" {
        MCSPI1_CS2_MUXMODE_0 = 0 "Select mcspi1_cs2";
        MCSPI1_CS2_MUXMODE_1 = 1 "Select uart1_cts";
        MCSPI1_CS2_MUXMODE_2 = 2 "Select slimbus2_clock";
        MCSPI1_CS2_MUXMODE_3 = 3 "Select gpio_139";
        MCSPI1_CS2_MUXMODE_7 = 7 "Select safe_mode";
    };
    
    register control_core_pad0_mcspi1_cs2_pad1_mcspi1_cs3 addr(base, 0x13C) "Register control for Pads mcspi1_cs2 and mcspi1_cs3 Access conditions. Read: unrestricted, Write: unrestricted" {
        mcspi1_cs3_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        mcspi1_cs3_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        mcspi1_cs3_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad mcspi1_cs3";
        mcspi1_cs3_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad mcspi1_cs3";
        mcspi1_cs3_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad mcspi1_cs3";
        mcspi1_cs3_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad mcspi1_cs3. This is an active low signal";
        mcspi1_cs3_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad mcspi1_cs3";
        mcspi1_cs3_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad mcspi1_cs3";
        _ 3 mbz;
        mcspi1_cs3_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad mcspi1_cs3";
        mcspi1_cs3_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad mcspi1_cs3";
        mcspi1_cs3_muxmode 3 rw type(mcspi1_cs3_muxmode_status) "Functional multiplexing selection for pad mcspi1_cs3";
        mcspi1_cs2_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        mcspi1_cs2_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        mcspi1_cs2_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad mcspi1_cs2";
        mcspi1_cs2_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad mcspi1_cs2";
        mcspi1_cs2_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad mcspi1_cs2";
        mcspi1_cs2_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad mcspi1_cs2. This is an active low signal";
        mcspi1_cs2_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad mcspi1_cs2";
        mcspi1_cs2_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad mcspi1_cs2";
        _ 3 mbz;
        mcspi1_cs2_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad mcspi1_cs2";
        mcspi1_cs2_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad mcspi1_cs2";
        mcspi1_cs2_muxmode 3 rw type(mcspi1_cs2_muxmode_status) "Functional multiplexing selection for pad mcspi1_cs2";
    };

    constants uart3_rts_sd_muxmode_status width(3) "" {
        UART3_RTS_SD_MUXMODE_0 = 0 "Select uart3_rts_sd";
        UART3_RTS_SD_MUXMODE_2 = 2 "Select cam_globalreset";
        UART3_RTS_SD_MUXMODE_3 = 3 "Select gpio_142";
        UART3_RTS_SD_MUXMODE_7 = 7 "Select safe_mode";
    };

    constants uart3_cts_rctx_muxmode_status width(3) "" {
        UART3_CTS_RCTX_MUXMODE_0 = 0 "Select uart3_cts_rctx";
        UART3_CTS_RCTX_MUXMODE_1 = 1 "Select uart1_tx";
        UART3_CTS_RCTX_MUXMODE_3 = 3 "Select gpio_141";
        UART3_CTS_RCTX_MUXMODE_7 = 7 "Select safe_mode";
    };
    
    register control_core_pad0_uart3_cts_rctx_pad1_uart3_rts_sd addr(base, 0x140) "Register control for Pads uart3_cts_rctx and uart3_rts_sd Access conditions. Read: unrestricted, Write: unrestricted" {
        uart3_rts_sd_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        uart3_rts_sd_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        uart3_rts_sd_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad uart3_rts_sd";
        uart3_rts_sd_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad uart3_rts_sd";
        uart3_rts_sd_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad uart3_rts_sd";
        uart3_rts_sd_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad uart3_rts_sd. This is an active low signal";
        uart3_rts_sd_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad uart3_rts_sd";
        uart3_rts_sd_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad uart3_rts_sd";
        _ 3 mbz;
        uart3_rts_sd_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad uart3_rts_sd";
        uart3_rts_sd_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad uart3_rts_sd";
        uart3_rts_sd_muxmode 3 rw type(uart3_rts_sd_muxmode_status) "Functional multiplexing selection for pad uart3_rts_sd";
        uart3_cts_rctx_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        uart3_cts_rctx_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        uart3_cts_rctx_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad uart3_cts_rctx";
        uart3_cts_rctx_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad uart3_cts_rctx";
        uart3_cts_rctx_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad uart3_cts_rctx";
        uart3_cts_rctx_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad uart3_cts_rctx. This is an active low signal";
        uart3_cts_rctx_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad uart3_cts_rctx";
        uart3_cts_rctx_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad uart3_cts_rctx";
        _ 3 mbz;
        uart3_cts_rctx_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad uart3_cts_rctx";
        uart3_cts_rctx_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad uart3_cts_rctx";
        uart3_cts_rctx_muxmode 3 rw type(uart3_cts_rctx_muxmode_status) "Functional multiplexing selection for pad uart3_cts_rctx";
    };

    constants uart3_tx_irtx_muxmode_status width(3) "" {
        UART3_TX_IRTX_MUXMODE_0 = 0 "Select uart3_tx_irtx";
        UART3_TX_IRTX_MUXMODE_1 = 1 "Select dmtimer9_pwm_evt";
        UART3_TX_IRTX_MUXMODE_2 = 2 "Select cam_strobe";
        UART3_TX_IRTX_MUXMODE_3 = 3 "Select gpio_144";
        UART3_TX_IRTX_MUXMODE_7 = 7 "Select safe_mode";
    };

    constants uart3_rx_irrx_muxmode_status width(3) "" {
        UART3_RX_IRRX_MUXMODE_0 = 0 "Select uart3_rx_irrx";
        UART3_RX_IRRX_MUXMODE_1 = 1 "Select dmtimer8_pwm_evt";
        UART3_RX_IRRX_MUXMODE_2 = 2 "Select cam_shutter";
        UART3_RX_IRRX_MUXMODE_3 = 3 "Select gpio_143";
        UART3_RX_IRRX_MUXMODE_7 = 7 "Select safe_mode";
    };
    
    register control_core_pad0_uart3_rx_irrx_pad1_uart3_tx_irtx addr(base, 0x144) "Register control for Pads uart3_rx_irrx and uart3_tx_irtx Access conditions. Read: unrestricted, Write: unrestricted" {
        uart3_tx_irtx_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        uart3_tx_irtx_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        uart3_tx_irtx_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad uart3_tx_irtx";
        uart3_tx_irtx_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad uart3_tx_irtx";
        uart3_tx_irtx_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad uart3_tx_irtx";
        uart3_tx_irtx_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad uart3_tx_irtx. This is an active low signal";
        uart3_tx_irtx_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad uart3_tx_irtx";
        uart3_tx_irtx_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad uart3_tx_irtx";
        _ 3 mbz;
        uart3_tx_irtx_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad uart3_tx_irtx";
        uart3_tx_irtx_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad uart3_tx_irtx";
        uart3_tx_irtx_muxmode 3 rw type(uart3_tx_irtx_muxmode_status) "Functional multiplexing selection for pad uart3_tx_irtx";
        uart3_rx_irrx_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        uart3_rx_irrx_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        uart3_rx_irrx_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad uart3_rx_irrx";
        uart3_rx_irrx_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad uart3_rx_irrx";
        uart3_rx_irrx_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad uart3_rx_irrx";
        uart3_rx_irrx_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad uart3_rx_irrx. This is an active low signal";
        uart3_rx_irrx_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad uart3_rx_irrx";
        uart3_rx_irrx_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad uart3_rx_irrx";
        _ 3 mbz;
        uart3_rx_irrx_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad uart3_rx_irrx";
        uart3_rx_irrx_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad uart3_rx_irrx";
        uart3_rx_irrx_muxmode 3 rw type(uart3_rx_irrx_muxmode_status) "Functional multiplexing selection for pad uart3_rx_irrx";
    };

    constants sdmmc5_cmd_muxmode_status width(3) "" {
        SDMMC5_CMD_MUXMODE_0 = 0 "Select sdmmc5_cmd";
        SDMMC5_CMD_MUXMODE_1 = 1 "Select mcspi2_simo";
        SDMMC5_CMD_MUXMODE_2 = 2 "Select usbc1_icusb_dm";
        SDMMC5_CMD_MUXMODE_3 = 3 "Select gpio_146";
        SDMMC5_CMD_MUXMODE_5 = 5 "Select sdmmc2_cmd";
        SDMMC5_CMD_MUXMODE_7 = 7 "Select safe_mode";
    };

    constants sdmmc5_clk_muxmode_status width(3) "" {
        SDMMC5_CLK_MUXMODE_0 = 0 "Select sdmmc5_clk";
        SDMMC5_CLK_MUXMODE_1 = 1 "Select mcspi2_clk";
        SDMMC5_CLK_MUXMODE_2 = 2 "Select usbc1_icusb_dp";
        SDMMC5_CLK_MUXMODE_3 = 3 "Select gpio_145";
        SDMMC5_CLK_MUXMODE_5 = 5 "Select sdmmc2_clk";
        SDMMC5_CLK_MUXMODE_7 = 7 "Select safe_mode";
    };
    
    register control_core_pad0_sdmmc5_clk_pad1_sdmmc5_cmd addr(base, 0x148) "Register control for Pads sdmmc5_clk and sdmmc5_cmd Access conditions. Read: unrestricted, Write: unrestricted" {
        sdmmc5_cmd_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        sdmmc5_cmd_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        sdmmc5_cmd_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad sdmmc5_cmd";
        sdmmc5_cmd_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad sdmmc5_cmd";
        sdmmc5_cmd_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad sdmmc5_cmd";
        sdmmc5_cmd_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad sdmmc5_cmd. This is an active low signal";
        sdmmc5_cmd_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad sdmmc5_cmd";
        sdmmc5_cmd_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad sdmmc5_cmd";
        _ 3 mbz;
        sdmmc5_cmd_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad sdmmc5_cmd";
        sdmmc5_cmd_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad sdmmc5_cmd";
        sdmmc5_cmd_muxmode 3 rw type(sdmmc5_cmd_muxmode_status) "Functional multiplexing selection for pad sdmmc5_cmd";
        sdmmc5_clk_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        sdmmc5_clk_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        sdmmc5_clk_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad sdmmc5_clk";
        sdmmc5_clk_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad sdmmc5_clk";
        sdmmc5_clk_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad sdmmc5_clk";
        sdmmc5_clk_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad sdmmc5_clk. This is an active low signal";
        sdmmc5_clk_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad sdmmc5_clk";
        sdmmc5_clk_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad sdmmc5_clk";
        _ 3 mbz;
        sdmmc5_clk_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad sdmmc5_clk";
        sdmmc5_clk_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad sdmmc5_clk";
        sdmmc5_clk_muxmode 3 rw type(sdmmc5_clk_muxmode_status) "Functional multiplexing selection for pad sdmmc5_clk";
    };

    constants sdmmc5_dat1_muxmode_status width(3) "" {
        SDMMC5_DAT1_MUXMODE_0 = 0 "Select sdmmc5_dat1";
        SDMMC5_DAT1_MUXMODE_2 = 2 "Select usbc1_icusb_txen";
        SDMMC5_DAT1_MUXMODE_3 = 3 "Select gpio_148";
        SDMMC5_DAT1_MUXMODE_5 = 5 "Select sdmmc2_dat1";
        SDMMC5_DAT1_MUXMODE_7 = 7 "Select safe_mode";
    };

    constants sdmmc5_dat0_muxmode_status width(3) "" {
        SDMMC5_DAT0_MUXMODE_0 = 0 "Select sdmmc5_dat0";
        SDMMC5_DAT0_MUXMODE_1 = 1 "Select mcspi2_somi";
        SDMMC5_DAT0_MUXMODE_2 = 2 "Select usbc1_icusb_rcv";
        SDMMC5_DAT0_MUXMODE_3 = 3 "Select gpio_147";
        SDMMC5_DAT0_MUXMODE_5 = 5 "sdmmc2_dat0";
        SDMMC5_DAT0_MUXMODE_7 = 7 "Select safe_mode";
    };
    
    register control_core_pad0_sdmmc5_dat0_pad1_sdmmc5_dat1 addr(base, 0x14C) "Register control for Pads sdmmc5_dat0 and sdmmc5_dat1 Access conditions. Read: unrestricted, Write: unrestricted" {
        sdmmc5_dat1_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        sdmmc5_dat1_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        sdmmc5_dat1_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad sdmmc5_dat1";
        sdmmc5_dat1_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad sdmmc5_dat1";
        sdmmc5_dat1_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad sdmmc5_dat1";
        sdmmc5_dat1_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad sdmmc5_dat1. This is an active low signal";
        sdmmc5_dat1_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad sdmmc5_dat1";
        sdmmc5_dat1_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad sdmmc5_dat1";
        _ 3 mbz;
        sdmmc5_dat1_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad sdmmc5_dat1";
        sdmmc5_dat1_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad sdmmc5_dat1";
        sdmmc5_dat1_muxmode 3 rw type(sdmmc5_dat1_muxmode_status) "Functional multiplexing selection for pad sdmmc5_dat1";
        sdmmc5_dat0_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        sdmmc5_dat0_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        sdmmc5_dat0_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad sdmmc5_dat0";
        sdmmc5_dat0_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad sdmmc5_dat0";
        sdmmc5_dat0_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad sdmmc5_dat0";
        sdmmc5_dat0_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad sdmmc5_dat0. This is an active low signal";
        sdmmc5_dat0_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad sdmmc5_dat0";
        sdmmc5_dat0_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad sdmmc5_dat0";
        _ 3 mbz;
        sdmmc5_dat0_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad sdmmc5_dat0";
        sdmmc5_dat0_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad sdmmc5_dat0";
        sdmmc5_dat0_muxmode 3 rw type(sdmmc5_dat0_muxmode_status) "Functional multiplexing selection for pad sdmmc5_dat0";
    };

    constants sdmmc5_dat3_muxmode_status width(3) "" {
        SDMMC5_DAT3_MUXMODE_0 = 0 "Select sdmmc5_dat3";
        SDMMC5_DAT3_MUXMODE_1 = 1 "Select mcspi2_cs0";
        SDMMC5_DAT3_MUXMODE_3 = 3 "Select gpio_150";
        SDMMC5_DAT3_MUXMODE_5 = 5 "Select sdmmc2_dat3";
        SDMMC5_DAT3_MUXMODE_7 = 7 "Select safe_mode";
    };

    constants sdmmc5_dat2_muxmode_status width(3) "" {
        SDMMC5_DAT2_MUXMODE_0 = 0 "Select sdmmc5_dat2";
        SDMMC5_DAT2_MUXMODE_1 = 1 "Select mcspi2_cs1";
        SDMMC5_DAT2_MUXMODE_3 = 3 "Select gpio_149";
        SDMMC5_DAT2_MUXMODE_5 = 5 "Select sdmmc2_dat2";
        SDMMC5_DAT2_MUXMODE_7 = 7 "Select safe_mode";
    };
    
    register control_core_pad0_sdmmc5_dat2_pad1_sdmmc5_dat3 addr(base, 0x150) "Register control for Pads sdmmc5_dat2 and sdmmc5_dat3 Access conditions. Read: unrestricted, Write: unrestricted" {
        sdmmc5_dat3_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        sdmmc5_dat3_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        sdmmc5_dat3_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad sdmmc5_dat3";
        sdmmc5_dat3_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad sdmmc5_dat3";
        sdmmc5_dat3_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad sdmmc5_dat3";
        sdmmc5_dat3_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad sdmmc5_dat3. This is an active low signal";
        sdmmc5_dat3_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad sdmmc5_dat3";
        sdmmc5_dat3_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad sdmmc5_dat3";
        _ 3 mbz;
        sdmmc5_dat3_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad sdmmc5_dat3";
        sdmmc5_dat3_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad sdmmc5_dat3";
        sdmmc5_dat3_muxmode 3 rw type(sdmmc5_dat3_muxmode_status) "Functional multiplexing selection for pad sdmmc5_dat3";
        sdmmc5_dat2_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        sdmmc5_dat2_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        sdmmc5_dat2_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad sdmmc5_dat2";
        sdmmc5_dat2_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad sdmmc5_dat2";
        sdmmc5_dat2_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad sdmmc5_dat2";
        sdmmc5_dat2_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad sdmmc5_dat2. This is an active low signal";
        sdmmc5_dat2_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad sdmmc5_dat2";
        sdmmc5_dat2_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad sdmmc5_dat2";
        _ 3 mbz;
        sdmmc5_dat2_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad sdmmc5_dat2";
        sdmmc5_dat2_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad sdmmc5_dat2";
        sdmmc5_dat2_muxmode 3 rw type(sdmmc5_dat2_muxmode_status) "Functional multiplexing selection for pad sdmmc5_dat2";
    };

    constants mcspi4_simo_muxmode_status width(3) "" {
        MCSPI4_SIMO_MUXMODE_0 = 0 "Select mcspi4_simo";
        MCSPI4_SIMO_MUXMODE_1 = 1 "Select sdmmc4_cmd";
        MCSPI4_SIMO_MUXMODE_2 = 2 "Select kpd_col7";
        MCSPI4_SIMO_MUXMODE_3 = 3 "Select gpio_152";
        MCSPI4_SIMO_MUXMODE_7 = 7 "Select safe_mode";
    };

    constants mcspi4_clk_muxmode_status width(3) "" {
        MCSPI4_CLK_MUXMODE_0 = 0 "Select mcspi4_clk";
        MCSPI4_CLK_MUXMODE_1 = 1 "Select sdmmc4_clk";
        MCSPI4_CLK_MUXMODE_2 = 2 "Select kpd_col6";
        MCSPI4_CLK_MUXMODE_3 = 3 "Select gpio_151";
        MCSPI4_CLK_MUXMODE_7 = 7 "Select safe_mode";
    };
    
    register control_core_pad0_mcspi4_clk_pad1_mcspi4_simo addr(base, 0x154) "Register control for Pads mcspi4_clk and mcspi4_simo Access conditions. Read: unrestricted, Write: unrestricted" {
        mcspi4_simo_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        mcspi4_simo_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        mcspi4_simo_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad mcspi4_simo";
        mcspi4_simo_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad mcspi4_simo";
        mcspi4_simo_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad mcspi4_simo";
        mcspi4_simo_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad mcspi4_simo. This is an active low signal";
        mcspi4_simo_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad mcspi4_simo";
        mcspi4_simo_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad mcspi4_simo";
        _ 3 mbz;
        mcspi4_simo_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad mcspi4_simo";
        mcspi4_simo_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad mcspi4_simo";
        mcspi4_simo_muxmode 3 rw type(mcspi4_simo_muxmode_status) "Functional multiplexing selection for pad mcspi4_simo";
        mcspi4_clk_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        mcspi4_clk_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        mcspi4_clk_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad mcspi4_clk";
        mcspi4_clk_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad mcspi4_clk";
        mcspi4_clk_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad mcspi4_clk";
        mcspi4_clk_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad mcspi4_clk. This is an active low signal";
        mcspi4_clk_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad mcspi4_clk";
        mcspi4_clk_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad mcspi4_clk";
        _ 3 mbz;
        mcspi4_clk_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad mcspi4_clk";
        mcspi4_clk_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad mcspi4_clk";
        mcspi4_clk_muxmode 3 rw type(mcspi4_clk_muxmode_status) "Functional multiplexing selection for pad mcspi4_clk";
    };

    constants mcspi4_cs0_muxmode_status width(3) "" {
        MCSPI4_CS0_MUXMODE_0 = 0 "Select mcspi4_cs0";
        MCSPI4_CS0_MUXMODE_1 = 1 "Select sdmmc4_dat3";
        MCSPI4_CS0_MUXMODE_2 = 2 "Select kpd_row7";
        MCSPI4_CS0_MUXMODE_3 = 3 "Select gpio_154";
        MCSPI4_CS0_MUXMODE_7 = 7 "Select safe_mode";
    };

    constants mcspi4_somi_muxmode_status width(3) "" {
        MCSPI4_SOMI_MUXMODE_0 = 0 "Select mcspi4_somi";
        MCSPI4_SOMI_MUXMODE_1 = 1 "Select sdmmc4_dat0";
        MCSPI4_SOMI_MUXMODE_2 = 2 "Select kpd_row6";
        MCSPI4_SOMI_MUXMODE_3 = 3 "Select gpio_153";
        MCSPI4_SOMI_MUXMODE_7 = 7 "Select safe_mode";
    };
    
    register control_core_pad0_mcspi4_somi_pad1_mcspi4_cs0 addr(base, 0x158) "Register control for Pads mcspi4_somi and mcspi4_cs0 Access conditions. Read: unrestricted, Write: unrestricted" {
        mcspi4_cs0_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        mcspi4_cs0_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        mcspi4_cs0_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad mcspi4_cs0";
        mcspi4_cs0_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad mcspi4_cs0";
        mcspi4_cs0_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad mcspi4_cs0";
        mcspi4_cs0_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad mcspi4_cs0. This is an active low signal";
        mcspi4_cs0_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad mcspi4_cs0";
        mcspi4_cs0_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad mcspi4_cs0";
        _ 3 mbz;
        mcspi4_cs0_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad mcspi4_cs0";
        mcspi4_cs0_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad mcspi4_cs0";
        mcspi4_cs0_muxmode 3 rw type(mcspi4_cs0_muxmode_status) "Functional multiplexing selection for pad mcspi4_cs0";
        mcspi4_somi_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        mcspi4_somi_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        mcspi4_somi_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad mcspi4_somi";
        mcspi4_somi_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad mcspi4_somi";
        mcspi4_somi_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad mcspi4_somi";
        mcspi4_somi_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad mcspi4_somi. This is an active low signal";
        mcspi4_somi_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad mcspi4_somi";
        mcspi4_somi_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad mcspi4_somi";
        _ 3 mbz;
        mcspi4_somi_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad mcspi4_somi";
        mcspi4_somi_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad mcspi4_somi";
        mcspi4_somi_muxmode 3 rw type(mcspi4_somi_muxmode_status) "Functional multiplexing selection for pad mcspi4_somi";
    };

    constants uart4_tx_muxmode_status width(3) "" {
        UART4_TX_MUXMODE_0 = 0 "Select uart4_tx";
        UART4_TX_MUXMODE_1 = 1 "Select sdmmc4_dat1";
        UART4_TX_MUXMODE_2 = 2 "Select kpd_col8";
        UART4_TX_MUXMODE_3 = 3 "Select gpio_156";
        UART4_TX_MUXMODE_7 = 7 "Select safe_mode";
    };

    constants uart4_rx_muxmode_status width(3) "" {
        UART4_RX_MUXMODE_0 = 0 "Select uart4_rx";
        UART4_RX_MUXMODE_1 = 1 "Select sdmmc4_dat2";
        UART4_RX_MUXMODE_2 = 2 "Select kpd_row8";
        UART4_RX_MUXMODE_3 = 3 "Select gpio_155";
        UART4_RX_MUXMODE_7 = 7 "Select safe_mode";
    };
    
    register control_core_pad0_uart4_rx_pad1_uart4_tx addr(base, 0x15C) "Register control for Pads uart4_rx and uart4_tx Access conditions. Read: unrestricted, Write: unrestricted" {
        uart4_tx_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        uart4_tx_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        uart4_tx_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad uart4_tx";
        uart4_tx_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad uart4_tx";
        uart4_tx_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad uart4_tx";
        uart4_tx_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad uart4_tx. This is an active low signal";
        uart4_tx_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad uart4_tx";
        uart4_tx_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad uart4_tx";
        _ 3 mbz;
        uart4_tx_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad uart4_tx";
        uart4_tx_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad uart4_tx";
        uart4_tx_muxmode 3 rw type(uart4_tx_muxmode_status) "Functional multiplexing selection for pad uart4_tx";
        uart4_rx_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        uart4_rx_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        uart4_rx_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad uart4_rx";
        uart4_rx_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad uart4_rx";
        uart4_rx_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad uart4_rx";
        uart4_rx_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad uart4_rx. This is an active low signal";
        uart4_rx_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad uart4_rx";
        uart4_rx_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad uart4_rx";
        _ 3 mbz;
        uart4_rx_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad uart4_rx";
        uart4_rx_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad uart4_rx";
        uart4_rx_muxmode 3 rw type(uart4_rx_muxmode_status) "Functional multiplexing selection for pad uart4_rx";
    };

    constants usbb2_ulpitll_stp_muxmode_status width(3) "" {
        USBB2_ULPITLL_STP_MUXMODE_0 = 0 "Select usbb2_ulpitll_stp";
        USBB2_ULPITLL_STP_MUXMODE_1 = 1 "Select usbb2_ulpiphy_stp";
        USBB2_ULPITLL_STP_MUXMODE_2 = 2 "Select sdmmc4_clk";
        USBB2_ULPITLL_STP_MUXMODE_3 = 3 "Select gpio_158";
        USBB2_ULPITLL_STP_MUXMODE_4 = 4 "Select hsi2_cadata";
        USBB2_ULPITLL_STP_MUXMODE_5 = 5 "Select dispc2_data23";
        USBB2_ULPITLL_STP_MUXMODE_7 = 7 "Select safe_mode";
    };

    constants usbb2_ulpitll_clk_muxmode_status width(3) "" {
        USBB2_ULPITLL_CLK_MUXMODE_0 = 0 "Select usbb2_ulpitll_clk";
        USBB2_ULPITLL_CLK_MUXMODE_1 = 1 "Select usbb2_ulpiphy_clk";
        USBB2_ULPITLL_CLK_MUXMODE_2 = 2 "Select sdmmc4_cmd";
        USBB2_ULPITLL_CLK_MUXMODE_3 = 3 "Select gpio_157";
        USBB2_ULPITLL_CLK_MUXMODE_4 = 4 "Select hsi2_cawake";
        USBB2_ULPITLL_CLK_MUXMODE_7 = 7 "Select safe_mode";
    };
    
    register control_core_pad0_usbb2_ulpitll_clk_pad1_usbb2_ulpitll_stp addr(base, 0x160) "Register control for Pads usbb2_ulpitll_clk and usbb2_ulpitll_stp Access conditions. Read: unrestricted, Write: unrestricted" {
        usbb2_ulpitll_stp_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        usbb2_ulpitll_stp_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        usbb2_ulpitll_stp_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad usbb2_ulpitll_stp";
        usbb2_ulpitll_stp_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad usbb2_ulpitll_stp";
        usbb2_ulpitll_stp_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad usbb2_ulpitll_stp";
        usbb2_ulpitll_stp_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad usbb2_ulpitll_stp. This is an active low signal";
        usbb2_ulpitll_stp_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad usbb2_ulpitll_stp";
        usbb2_ulpitll_stp_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad usbb2_ulpitll_stp";
        _ 3 mbz;
        usbb2_ulpitll_stp_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad usbb2_ulpitll_stp";
        usbb2_ulpitll_stp_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad usbb2_ulpitll_stp";
        usbb2_ulpitll_stp_muxmode 3 rw type(usbb2_ulpitll_stp_muxmode_status) "Functional multiplexing selection for pad usbb2_ulpitll_stp";
        usbb2_ulpitll_clk_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        usbb2_ulpitll_clk_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        usbb2_ulpitll_clk_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad usbb2_ulpitll_clk";
        usbb2_ulpitll_clk_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad usbb2_ulpitll_clk";
        usbb2_ulpitll_clk_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad usbb2_ulpitll_clk";
        usbb2_ulpitll_clk_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad usbb2_ulpitll_clk. This is an active low signal";
        usbb2_ulpitll_clk_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad usbb2_ulpitll_clk";
        usbb2_ulpitll_clk_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad usbb2_ulpitll_clk";
        _ 3 mbz;
        usbb2_ulpitll_clk_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad usbb2_ulpitll_clk";
        usbb2_ulpitll_clk_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad usbb2_ulpitll_clk";
        usbb2_ulpitll_clk_muxmode 3 rw type(usbb2_ulpitll_clk_muxmode_status) "Functional multiplexing selection for pad usbb2_ulpitll_clk";
    };

    constants usbb2_ulpitll_nxt_muxmode_status width(3) "" {
        USBB2_ULPITLL_NXT_MUXMODE_0 = 0 "Select usbb2_ulpitll_nxt";
        USBB2_ULPITLL_NXT_MUXMODE_1 = 1 "Select usbb2_ulpiphy_nxt";
        USBB2_ULPITLL_NXT_MUXMODE_2 = 2 "Select sdmmc4_dat1";
        USBB2_ULPITLL_NXT_MUXMODE_3 = 3 "Select gpio_160";
        USBB2_ULPITLL_NXT_MUXMODE_4 = 4 "Select hsi2_acready";
        USBB2_ULPITLL_NXT_MUXMODE_5 = 5 "Select dispc2_data21";
        USBB2_ULPITLL_NXT_MUXMODE_7 = 7 "Select safe_mode";
    };

    constants usbb2_ulpitll_dir_muxmode_status width(3) "" {
        USBB2_ULPITLL_DIR_MUXMODE_0 = 0 "Select usbb2_ulpitll_dir";
        USBB2_ULPITLL_DIR_MUXMODE_1 = 1 "Select usbb2_ulpiphy_dir";
        USBB2_ULPITLL_DIR_MUXMODE_2 = 2 "Select sdmmc4_dat0";
        USBB2_ULPITLL_DIR_MUXMODE_3 = 3 "Select gpio_159";
        USBB2_ULPITLL_DIR_MUXMODE_4 = 4 "Select hsi2_caflag";
        USBB2_ULPITLL_DIR_MUXMODE_5 = 5 "Select dispc2_data22";
        USBB2_ULPITLL_DIR_MUXMODE_7 = 7 "Select safe_mode";
    };
    
    register control_core_pad0_usbb2_ulpitll_dir_pad1_usbb2_ulpitll_nxt addr(base, 0x164) "Register control for Pads usbb2_ulpitll_dir and usbb2_ulpitll_nxt Access conditions. Read: unrestricted, Write: unrestricted" {
        usbb2_ulpitll_nxt_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        usbb2_ulpitll_nxt_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        usbb2_ulpitll_nxt_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad usbb2_ulpitll_nxt";
        usbb2_ulpitll_nxt_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad usbb2_ulpitll_nxt";
        usbb2_ulpitll_nxt_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad usbb2_ulpitll_nxt";
        usbb2_ulpitll_nxt_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad usbb2_ulpitll_nxt. This is an active low signal";
        usbb2_ulpitll_nxt_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad usbb2_ulpitll_nxt";
        usbb2_ulpitll_nxt_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad usbb2_ulpitll_nxt";
        _ 3 mbz;
        usbb2_ulpitll_nxt_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad usbb2_ulpitll_nxt";
        usbb2_ulpitll_nxt_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad usbb2_ulpitll_nxt";
        usbb2_ulpitll_nxt_muxmode 3 rw type(usbb2_ulpitll_nxt_muxmode_status) "Functional multiplexing selection for pad usbb2_ulpitll_nxt";
        usbb2_ulpitll_dir_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        usbb2_ulpitll_dir_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        usbb2_ulpitll_dir_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad usbb2_ulpitll_dir";
        usbb2_ulpitll_dir_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad usbb2_ulpitll_dir";
        usbb2_ulpitll_dir_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad usbb2_ulpitll_dir";
        usbb2_ulpitll_dir_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad usbb2_ulpitll_dir. This is an active low signal";
        usbb2_ulpitll_dir_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad usbb2_ulpitll_dir";
        usbb2_ulpitll_dir_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad usbb2_ulpitll_dir";
        _ 3 mbz;
        usbb2_ulpitll_dir_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad usbb2_ulpitll_dir";
        usbb2_ulpitll_dir_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad usbb2_ulpitll_dir";
        usbb2_ulpitll_dir_muxmode 3 rw type(usbb2_ulpitll_dir_muxmode_status) "Functional multiplexing selection for pad usbb2_ulpitll_dir";
    };

    constants usbb2_ulpitll_dat1_muxmode_status width(3) "" {
        USBB2_ULPITLL_DAT1_MUXMODE_0 = 0 "Select usbb2_ulpitll_dat1";
        USBB2_ULPITLL_DAT1_MUXMODE_1 = 1 "Select usbb2_ulpiphy_dat1";
        USBB2_ULPITLL_DAT1_MUXMODE_2 = 2 "Select sdmmc4_dat3";
        USBB2_ULPITLL_DAT1_MUXMODE_3 = 3 "Select gpio_162";
        USBB2_ULPITLL_DAT1_MUXMODE_4 = 4 "Select hsi2_acdata";
        USBB2_ULPITLL_DAT1_MUXMODE_5 = 5 "Select dispc2_data19";
        USBB2_ULPITLL_DAT1_MUXMODE_6 = 6 "Select usbb2_mm_txdat";
        USBB2_ULPITLL_DAT1_MUXMODE_7 = 7 "Select safe_mode";
    };

    constants usbb2_ulpitll_dat0_muxmode_status width(3) "" {
        USBB2_ULPITLL_DAT0_MUXMODE_0 = 0 "Select usbb2_ulpitll_dat0";
        USBB2_ULPITLL_DAT0_MUXMODE_1 = 1 "Select usbb2_ulpiphy_dat0";
        USBB2_ULPITLL_DAT0_MUXMODE_2 = 2 "Select sdmmc4_dat2";
        USBB2_ULPITLL_DAT0_MUXMODE_3 = 3 "Select gpio_161";
        USBB2_ULPITLL_DAT0_MUXMODE_4 = 4 "Select hsi2_acwake";
        USBB2_ULPITLL_DAT0_MUXMODE_5 = 5 "Select dispc2_data20";
        USBB2_ULPITLL_DAT0_MUXMODE_6 = 6 "Select usbb2_mm_txen";
        USBB2_ULPITLL_DAT0_MUXMODE_7 = 7 "Select safe_mode";
    };
    
    register control_core_pad0_usbb2_ulpitll_dat0_pad1_usbb2_ulpitll_dat1 addr(base, 0x168) "Register control for Pads usbb2_ulpitll_dat0 and usbb2_ulpitll_dat1 Access conditions. Read: unrestricted, Write: unrestricted" {
        usbb2_ulpitll_dat1_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        usbb2_ulpitll_dat1_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        usbb2_ulpitll_dat1_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad usbb2_ulpitll_dat1";
        usbb2_ulpitll_dat1_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad usbb2_ulpitll_dat1";
        usbb2_ulpitll_dat1_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad usbb2_ulpitll_dat1";
        usbb2_ulpitll_dat1_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad usbb2_ulpitll_dat1. This is an active low signal";
        usbb2_ulpitll_dat1_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad usbb2_ulpitll_dat1";
        usbb2_ulpitll_dat1_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad usbb2_ulpitll_dat1";
        _ 3 mbz;
        usbb2_ulpitll_dat1_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad usbb2_ulpitll_dat1";
        usbb2_ulpitll_dat1_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad usbb2_ulpitll_dat1";
        usbb2_ulpitll_dat1_muxmode 3 rw type(usbb2_ulpitll_dat1_muxmode_status) "Functional multiplexing selection for pad usbb2_ulpitll_dat1";
        usbb2_ulpitll_dat0_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        usbb2_ulpitll_dat0_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        usbb2_ulpitll_dat0_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad usbb2_ulpitll_dat0";
        usbb2_ulpitll_dat0_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad usbb2_ulpitll_dat0";
        usbb2_ulpitll_dat0_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad usbb2_ulpitll_dat0";
        usbb2_ulpitll_dat0_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad usbb2_ulpitll_dat0. This is an active low signal";
        usbb2_ulpitll_dat0_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad usbb2_ulpitll_dat0";
        usbb2_ulpitll_dat0_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad usbb2_ulpitll_dat0";
        _ 3 mbz;
        usbb2_ulpitll_dat0_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad usbb2_ulpitll_dat0";
        usbb2_ulpitll_dat0_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad usbb2_ulpitll_dat0";
        usbb2_ulpitll_dat0_muxmode 3 rw type(usbb2_ulpitll_dat0_muxmode_status) "Functional multiplexing selection for pad usbb2_ulpitll_dat0";
    };

    constants usbb2_ulpitll_dat3_muxmode_status width(3) "" {
        USBB2_ULPITLL_DAT3_MUXMODE_0 = 0 "Select usbb2_ulpitll_dat3";
        USBB2_ULPITLL_DAT3_MUXMODE_1 = 1 "Select usbb2_ulpiphy_dat3";
        USBB2_ULPITLL_DAT3_MUXMODE_2 = 2 "Select sdmmc3_dat1";
        USBB2_ULPITLL_DAT3_MUXMODE_3 = 3 "Select gpio_164";
        USBB2_ULPITLL_DAT3_MUXMODE_4 = 4 "Select hsi2_caready";
        USBB2_ULPITLL_DAT3_MUXMODE_5 = 5 "Select dispc2_data15";
        USBB2_ULPITLL_DAT3_MUXMODE_6 = 6 "Select rfbi_data15";
        USBB2_ULPITLL_DAT3_MUXMODE_7 = 7 "Select safe_mode";
    };

    constants usbb2_ulpitll_dat2_muxmode_status width(3) "" {
        USBB2_ULPITLL_DAT2_MUXMODE_0 = 0 "Select usbb2_ulpitll_dat2";
        USBB2_ULPITLL_DAT2_MUXMODE_1 = 1 "Select usbb2_ulpiphy_dat2";
        USBB2_ULPITLL_DAT2_MUXMODE_2 = 2 "Select sdmmc3_dat2";
        USBB2_ULPITLL_DAT2_MUXMODE_3 = 3 "Select gpio_163";
        USBB2_ULPITLL_DAT2_MUXMODE_4 = 4 "Select hsi2_acflag";
        USBB2_ULPITLL_DAT2_MUXMODE_5 = 5 "Select dispc2_data18";
        USBB2_ULPITLL_DAT2_MUXMODE_6 = 6 "Select usbb2_mm_txse0";
        USBB2_ULPITLL_DAT2_MUXMODE_7 = 7 "Select safe_mode";
    };
    
    register control_core_pad0_usbb2_ulpitll_dat2_pad1_usbb2_ulpitll_dat3 addr(base, 0x16C) "Register control for Pads usbb2_ulpitll_dat2 and usbb2_ulpitll_dat3 Access conditions. Read: unrestricted, Write: unrestricted" {
        usbb2_ulpitll_dat3_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        usbb2_ulpitll_dat3_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        usbb2_ulpitll_dat3_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad usbb2_ulpitll_dat3";
        usbb2_ulpitll_dat3_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad usbb2_ulpitll_dat3";
        usbb2_ulpitll_dat3_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad usbb2_ulpitll_dat3";
        usbb2_ulpitll_dat3_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad usbb2_ulpitll_dat3. This is an active low signal";
        usbb2_ulpitll_dat3_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad usbb2_ulpitll_dat3";
        usbb2_ulpitll_dat3_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad usbb2_ulpitll_dat3";
        _ 3 mbz;
        usbb2_ulpitll_dat3_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad usbb2_ulpitll_dat3";
        usbb2_ulpitll_dat3_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad usbb2_ulpitll_dat3";
        usbb2_ulpitll_dat3_muxmode 3 rw type(usbb2_ulpitll_dat3_muxmode_status) "Functional multiplexing selection for pad usbb2_ulpitll_dat3";
        usbb2_ulpitll_dat2_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        usbb2_ulpitll_dat2_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        usbb2_ulpitll_dat2_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad usbb2_ulpitll_dat2";
        usbb2_ulpitll_dat2_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad usbb2_ulpitll_dat2";
        usbb2_ulpitll_dat2_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad usbb2_ulpitll_dat2";
        usbb2_ulpitll_dat2_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad usbb2_ulpitll_dat2. This is an active low signal";
        usbb2_ulpitll_dat2_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad usbb2_ulpitll_dat2";
        usbb2_ulpitll_dat2_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad usbb2_ulpitll_dat2";
        _ 3 mbz;
        usbb2_ulpitll_dat2_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad usbb2_ulpitll_dat2";
        usbb2_ulpitll_dat2_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad usbb2_ulpitll_dat2";
        usbb2_ulpitll_dat2_muxmode 3 rw type(usbb2_ulpitll_dat2_muxmode_status) "Functional multiplexing selection for pad usbb2_ulpitll_dat2";
    };

    constants usbb2_ulpitll_dat5_muxmode_status width(3) "" {
        USBB2_ULPITLL_DAT5_MUXMODE_0 = 0 "Select usbb2_ulpitll_dat5";
        USBB2_ULPITLL_DAT5_MUXMODE_1 = 1 "Select usbb2_ulpiphy_dat5";
        USBB2_ULPITLL_DAT5_MUXMODE_2 = 2 "Select sdmmc3_dat3";
        USBB2_ULPITLL_DAT5_MUXMODE_3 = 3 "Select gpio_166";
        USBB2_ULPITLL_DAT5_MUXMODE_4 = 4 "Select mcspi3_cs0";
        USBB2_ULPITLL_DAT5_MUXMODE_5 = 5 "Select dispc2_data13";
        USBB2_ULPITLL_DAT5_MUXMODE_6 = 6 "Select rfbi_data13";
        USBB2_ULPITLL_DAT5_MUXMODE_7 = 7 "Select safe_mode";
    };

    constants usbb2_ulpitll_dat4_muxmode_status width(3) "" {
        USBB2_ULPITLL_DAT4_MUXMODE_0 = 0 "Select usbb2_ulpitll_dat4";
        USBB2_ULPITLL_DAT4_MUXMODE_1 = 1 "Select usbb2_ulpiphy_dat4";
        USBB2_ULPITLL_DAT4_MUXMODE_2 = 2 "Select sdmmc3_dat0";
        USBB2_ULPITLL_DAT4_MUXMODE_3 = 3 "Select gpio_165";
        USBB2_ULPITLL_DAT4_MUXMODE_4 = 4 "Select mcspi3_somi";
        USBB2_ULPITLL_DAT4_MUXMODE_5 = 5 "Select dispc2_data14";
        USBB2_ULPITLL_DAT4_MUXMODE_6 = 6 "Select rfbi_data14";
        USBB2_ULPITLL_DAT4_MUXMODE_7 = 7 "Select safe_mode";
    };
    
    register control_core_pad0_usbb2_ulpitll_dat4_pad1_usbb2_ulpitll_dat5 addr(base, 0x170) "Register control for Pads usbb2_ulpitll_dat4 and usbb2_ulpitll_dat5 Access conditions. Read: unrestricted, Write: unrestricted" {
        usbb2_ulpitll_dat5_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        usbb2_ulpitll_dat5_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        usbb2_ulpitll_dat5_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad usbb2_ulpitll_dat5";
        usbb2_ulpitll_dat5_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad usbb2_ulpitll_dat5";
        usbb2_ulpitll_dat5_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad usbb2_ulpitll_dat5";
        usbb2_ulpitll_dat5_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad usbb2_ulpitll_dat5. This is an active low signal";
        usbb2_ulpitll_dat5_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad usbb2_ulpitll_dat5";
        usbb2_ulpitll_dat5_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad usbb2_ulpitll_dat5";
        _ 3 mbz;
        usbb2_ulpitll_dat5_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad usbb2_ulpitll_dat5";
        usbb2_ulpitll_dat5_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad usbb2_ulpitll_dat5";
        usbb2_ulpitll_dat5_muxmode 3 rw type(usbb2_ulpitll_dat5_muxmode_status) "Functional multiplexing selection for pad usbb2_ulpitll_dat5";
        usbb2_ulpitll_dat4_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        usbb2_ulpitll_dat4_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        usbb2_ulpitll_dat4_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad usbb2_ulpitll_dat4";
        usbb2_ulpitll_dat4_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad usbb2_ulpitll_dat4";
        usbb2_ulpitll_dat4_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad usbb2_ulpitll_dat4";
        usbb2_ulpitll_dat4_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad usbb2_ulpitll_dat4. This is an active low signal";
        usbb2_ulpitll_dat4_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad usbb2_ulpitll_dat4";
        usbb2_ulpitll_dat4_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad usbb2_ulpitll_dat4";
        _ 3 mbz;
        usbb2_ulpitll_dat4_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad usbb2_ulpitll_dat4";
        usbb2_ulpitll_dat4_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad usbb2_ulpitll_dat4";
        usbb2_ulpitll_dat4_muxmode 3 rw type(usbb2_ulpitll_dat4_muxmode_status) "Functional multiplexing selection for pad usbb2_ulpitll_dat4";
    };

    constants usbb2_ulpitll_dat7_muxmode_status width(3) "" {
        USBB2_ULPITLL_DAT7_MUXMODE_0 = 0 "Select usbb2_ulpitll_dat7";
        USBB2_ULPITLL_DAT7_MUXMODE_1 = 1 "Select usbb2_ulpiphy_dat7";
        USBB2_ULPITLL_DAT7_MUXMODE_2 = 2 "Select sdmmc3_clk";
        USBB2_ULPITLL_DAT7_MUXMODE_3 = 3 "Select gpio_168";
        USBB2_ULPITLL_DAT7_MUXMODE_4 = 4 "Select mcspi3_clk";
        USBB2_ULPITLL_DAT7_MUXMODE_5 = 5 "Select dispc2_data11";
        USBB2_ULPITLL_DAT7_MUXMODE_6 = 6 "Select rfbi_data11";
        USBB2_ULPITLL_DAT7_MUXMODE_7 = 7 "Select safe_mode";
    };

    constants usbb2_ulpitll_dat6_muxmode_status width(3) "" {
        USBB2_ULPITLL_DAT6_MUXMODE_0 = 0 "Select usbb2_ulpitll_dat6";
        USBB2_ULPITLL_DAT6_MUXMODE_1 = 1 "Select usbb2_ulpiphy_dat6";
        USBB2_ULPITLL_DAT6_MUXMODE_2 = 2 "Select sdmmc3_cmd";
        USBB2_ULPITLL_DAT6_MUXMODE_3 = 3 "Select gpio_167";
        USBB2_ULPITLL_DAT6_MUXMODE_4 = 4 "Select mcspi3_simo";
        USBB2_ULPITLL_DAT6_MUXMODE_5 = 5 "Select dispc2_data12";
        USBB2_ULPITLL_DAT6_MUXMODE_6 = 6 "Select rfbi_data12";
        USBB2_ULPITLL_DAT6_MUXMODE_7 = 7 "Select safe_mode";
    };
    
    register control_core_pad0_usbb2_ulpitll_dat6_pad1_usbb2_ulpitll_dat7 addr(base, 0x174) "Register control for Pads usbb2_ulpitll_dat6 and usbb2_ulpitll_dat7 Access conditions. Read: unrestricted, Write: unrestricted" {
        usbb2_ulpitll_dat7_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        usbb2_ulpitll_dat7_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        usbb2_ulpitll_dat7_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad usbb2_ulpitll_dat7";
        usbb2_ulpitll_dat7_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad usbb2_ulpitll_dat7";
        usbb2_ulpitll_dat7_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad usbb2_ulpitll_dat7";
        usbb2_ulpitll_dat7_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad usbb2_ulpitll_dat7. This is an active low signal";
        usbb2_ulpitll_dat7_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad usbb2_ulpitll_dat7";
        usbb2_ulpitll_dat7_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad usbb2_ulpitll_dat7";
        _ 3 mbz;
        usbb2_ulpitll_dat7_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad usbb2_ulpitll_dat7";
        usbb2_ulpitll_dat7_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad usbb2_ulpitll_dat7";
        usbb2_ulpitll_dat7_muxmode 3 rw type(usbb2_ulpitll_dat7_muxmode_status) "Functional multiplexing selection for pad usbb2_ulpitll_dat7";
        usbb2_ulpitll_dat6_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        usbb2_ulpitll_dat6_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        usbb2_ulpitll_dat6_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad usbb2_ulpitll_dat6";
        usbb2_ulpitll_dat6_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad usbb2_ulpitll_dat6";
        usbb2_ulpitll_dat6_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad usbb2_ulpitll_dat6";
        usbb2_ulpitll_dat6_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad usbb2_ulpitll_dat6. This is an active low signal";
        usbb2_ulpitll_dat6_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad usbb2_ulpitll_dat6";
        usbb2_ulpitll_dat6_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad usbb2_ulpitll_dat6";
        _ 3 mbz;
        usbb2_ulpitll_dat6_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad usbb2_ulpitll_dat6";
        usbb2_ulpitll_dat6_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad usbb2_ulpitll_dat6";
        usbb2_ulpitll_dat6_muxmode 3 rw type(usbb2_ulpitll_dat6_muxmode_status) "Functional multiplexing selection for pad usbb2_ulpitll_dat6";
    };

    constants usbb2_hsic_strobe_muxmode_status width(3) "" {
        USBB2_HSIC_STROBE_MUXMODE_0 = 0 "Select usbb2_hsic_strobe";
        USBB2_HSIC_STROBE_MUXMODE_3 = 3 "Select gpio_170";
        USBB2_HSIC_STROBE_MUXMODE_7 = 7 "Select safe_mode";
    };

    constants usbb2_hsic_data_muxmode_status width(3) "" {
        USBB2_HSIC_DATA_MUXMODE_0 = 0 "Select usbb2_hsic_data";
        USBB2_HSIC_DATA_MUXMODE_3 = 3 "Select gpio_169";
        USBB2_HSIC_DATA_MUXMODE_7 = 7 "Select safe_mode";
    };
    
    register control_core_pad0_usbb2_hsic_data_pad1_usbb2_hsic_strobe addr(base, 0x178) "Register control for Pads usbb2_hsic_data and usbb2_hsic_strobe Access conditions. Read: unrestricted, Write: unrestricted" {
        usbb2_hsic_strobe_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        usbb2_hsic_strobe_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        _ 2 mbz;
        usbb2_hsic_strobe_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad usbb2_hsic_strobe";
        usbb2_hsic_strobe_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad usbb2_hsic_strobe. This is an active low signal";
        usbb2_hsic_strobe_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad usbb2_hsic_strobe";
        _ 6 mbz;
        usbb2_hsic_strobe_muxmode 3 rw type(usbb2_hsic_strobe_muxmode_status) "Functional multiplexing selection for pad usbb2_hsic_strobe";
        usbb2_hsic_data_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        usbb2_hsic_data_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        _ 2 mbz;
        usbb2_hsic_data_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad usbb2_hsic_data";
        usbb2_hsic_data_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad usbb2_hsic_data. This is an active low signal";
        usbb2_hsic_data_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad usbb2_hsic_data";
        _ 6 mbz;
        usbb2_hsic_data_muxmode 3 rw type(usbb2_hsic_data_muxmode_status) "Functional multiplexing selection for pad usbb2_hsic_data";
    };

    constants kpd_col4_muxmode_status width(3) "" {
        KPD_COL4_MUXMODE_0 = 0 "Select kpd_col4";
        KPD_COL4_MUXMODE_1 = 1 "Select kpd_col1";
        KPD_COL4_MUXMODE_2 = 2 "Select cam2_d1";
        KPD_COL4_MUXMODE_3 = 3 "Select gpio_172";
        KPD_COL4_MUXMODE_7 = 7 "Select safe_mode";
    };

    constants kpd_col3_muxmode_status width(3) "" {
        KPD_COL3_MUXMODE_0 = 0 "Select kpd_col3";
        KPD_COL3_MUXMODE_1 = 1 "Select kpd_col0";
        KPD_COL3_MUXMODE_2 = 2 "Select cam2_d0";
        KPD_COL3_MUXMODE_3 = 3 "Select gpio_171";
        KPD_COL3_MUXMODE_7 = 7 "Select safe_mode";
    };
    
    register control_core_pad0_kpd_col3_pad1_kpd_col4 addr(base, 0x17C) "Register control for Pads kpd_col3 and kpd_col4 Access conditions. Read: unrestricted, Write: unrestricted" {
        kpd_col4_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        kpd_col4_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        kpd_col4_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad kpd_col4";
        kpd_col4_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad kpd_col4";
        kpd_col4_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad kpd_col4";
        kpd_col4_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad kpd_col4. This is an active low signal";
        kpd_col4_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad kpd_col4";
        kpd_col4_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad kpd_col4";
        _ 3 mbz;
        kpd_col4_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad kpd_col4";
        kpd_col4_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad kpd_col4";
        kpd_col4_muxmode 3 rw type(kpd_col4_muxmode_status) "Functional multiplexing selection for pad kpd_col4";
        kpd_col3_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        kpd_col3_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        kpd_col3_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad kpd_col3";
        kpd_col3_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad kpd_col3";
        kpd_col3_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad kpd_col3";
        kpd_col3_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad kpd_col3. This is an active low signal";
        kpd_col3_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad kpd_col3";
        kpd_col3_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad kpd_col3";
        _ 3 mbz;
        kpd_col3_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad kpd_col3";
        kpd_col3_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad kpd_col3";
        kpd_col3_muxmode 3 rw type(kpd_col3_muxmode_status) "Functional multiplexing selection for pad kpd_col3";
    };

    constants kpd_col0_muxmode_status width(3) "" {
        KPD_COL0_MUXMODE_0 = 0 "Select kpd_col0";
        KPD_COL0_MUXMODE_1 = 1 "Select kpd_col3";
        KPD_COL0_MUXMODE_2 = 2 "Select cam2_d3";
        KPD_COL0_MUXMODE_3 = 3 "Select gpio_174";
        KPD_COL0_MUXMODE_7 = 7 "Select safe_mode";
    };

    constants kpd_col5_muxmode_status width(3) "" {
        KPD_COL5_MUXMODE_0 = 0 "Select kpd_col5";
        KPD_COL5_MUXMODE_1 = 1 "Select kpd_col2";
        KPD_COL5_MUXMODE_2 = 2 "Select cam2_d2";
        KPD_COL5_MUXMODE_3 = 3 "Select gpio_173";
        KPD_COL5_MUXMODE_7 = 7 "Select safe_mode";
    };
    
    register control_core_pad0_kpd_col5_pad1_kpd_col0 addr(base, 0x180) "Register control for Pads kpd_col5 and kpd_col0 Access conditions. Read: unrestricted, Write: unrestricted" {
        kpd_col0_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        kpd_col0_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        kpd_col0_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad kpd_col0";
        kpd_col0_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad kpd_col0";
        kpd_col0_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad kpd_col0";
        kpd_col0_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad kpd_col0. This is an active low signal";
        kpd_col0_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad kpd_col0";
        kpd_col0_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad kpd_col0";
        _ 3 mbz;
        kpd_col0_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad kpd_col0";
        kpd_col0_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad kpd_col0";
        kpd_col0_muxmode 3 rw type(kpd_col0_muxmode_status) "Functional multiplexing selection for pad kpd_col0";
        kpd_col5_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        kpd_col5_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        kpd_col5_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad kpd_col5";
        kpd_col5_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad kpd_col5";
        kpd_col5_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad kpd_col5";
        kpd_col5_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad kpd_col5. This is an active low signal";
        kpd_col5_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad kpd_col5";
        kpd_col5_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad kpd_col5";
        _ 3 mbz;
        kpd_col5_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad kpd_col5";
        kpd_col5_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad kpd_col5";
        kpd_col5_muxmode 3 rw type(kpd_col5_muxmode_status) "Functional multiplexing selection for pad kpd_col5";
    };

    constants kpd_col2_muxmode_status width(3) "" {
        KPD_COL2_MUXMODE_0 = 0 "Select kpd_col2";
        KPD_COL2_MUXMODE_1 = 1 "Select kpd_col5";
        KPD_COL2_MUXMODE_2 = 2 "Select cam2_d10";
        KPD_COL2_MUXMODE_3 = 3 "Select gpio_1";
        KPD_COL2_MUXMODE_7 = 7 "Select safe_mode";
    };

    constants kpd_col1_muxmode_status width(3) "" {
        KPD_COL1_MUXMODE_0 = 0 "Select kpd_col1";
        KPD_COL1_MUXMODE_1 = 1 "Select kpd_col4";
        KPD_COL1_MUXMODE_2 = 2 "Select cam2_d8";
        KPD_COL1_MUXMODE_3 = 3 "Select gpio_0";
        KPD_COL1_MUXMODE_7 = 7 "Select safe_mode";
    };
    
    register control_core_pad0_kpd_col1_pad1_kpd_col2 addr(base, 0x184) "Register control for Pads kpd_col1 and kpd_col2 Access conditions. Read: unrestricted, Write: unrestricted" {
        kpd_col2_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        kpd_col2_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        kpd_col2_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad kpd_col2";
        kpd_col2_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad kpd_col2";
        kpd_col2_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad kpd_col2";
        kpd_col2_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad kpd_col2. This is an active low signal";
        kpd_col2_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad kpd_col2";
        kpd_col2_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad kpd_col2";
        _ 3 mbz;
        kpd_col2_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad kpd_col2";
        kpd_col2_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad kpd_col2";
        kpd_col2_muxmode 3 rw type(kpd_col2_muxmode_status) "Functional multiplexing selection for pad kpd_col2";
        kpd_col1_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        kpd_col1_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        kpd_col1_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad kpd_col1";
        kpd_col1_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad kpd_col1";
        kpd_col1_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad kpd_col1";
        kpd_col1_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad kpd_col1. This is an active low signal";
        kpd_col1_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad kpd_col1";
        kpd_col1_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad kpd_col1";
        _ 3 mbz;
        kpd_col1_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad kpd_col1";
        kpd_col1_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad kpd_col1";
        kpd_col1_muxmode 3 rw type(kpd_col1_muxmode_status) "Functional multiplexing selection for pad kpd_col1";
    };

    constants kpd_row4_muxmode_status width(3) "" {
        KPD_ROW4_MUXMODE_0 = 0 "Select kpd_row4";
        KPD_ROW4_MUXMODE_1 = 1 "Select kpd_row1";
        KPD_ROW4_MUXMODE_2 = 2 "Select cam2_d5";
        KPD_ROW4_MUXMODE_3 = 3 "Select gpio_176";
        KPD_ROW4_MUXMODE_7 = 7 "Select safe_mode";
    };

    constants kpd_row3_muxmode_status width(3) "" {
        KPD_ROW3_MUXMODE_0 = 0 "Select kpd_row3";
        KPD_ROW3_MUXMODE_1 = 1 "Select kpd_row0";
        KPD_ROW3_MUXMODE_2 = 2 "Select cam2_d4";
        KPD_ROW3_MUXMODE_3 = 3 "Select gpio_175";
        KPD_ROW3_MUXMODE_7 = 7 "Select safe_mode";
    };
    
    register control_core_pad0_kpd_row3_pad1_kpd_row4 addr(base, 0x188) "Register control for Pads kpd_row3 and kpd_row4 Access conditions. Read: unrestricted, Write: unrestricted" {
        kpd_row4_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        kpd_row4_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        kpd_row4_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad kpd_row4";
        kpd_row4_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad kpd_row4";
        kpd_row4_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad kpd_row4";
        kpd_row4_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad kpd_row4. This is an active low signal";
        kpd_row4_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad kpd_row4";
        kpd_row4_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad kpd_row4";
        _ 3 mbz;
        kpd_row4_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad kpd_row4";
        kpd_row4_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad kpd_row4";
        kpd_row4_muxmode 3 rw type(kpd_row4_muxmode_status) "Functional multiplexing selection for pad kpd_row4";
        kpd_row3_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        kpd_row3_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        kpd_row3_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad kpd_row3";
        kpd_row3_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad kpd_row3";
        kpd_row3_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad kpd_row3";
        kpd_row3_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad kpd_row3. This is an active low signal";
        kpd_row3_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad kpd_row3";
        kpd_row3_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad kpd_row3";
        _ 3 mbz;
        kpd_row3_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad kpd_row3";
        kpd_row3_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad kpd_row3";
        kpd_row3_muxmode 3 rw type(kpd_row3_muxmode_status) "Functional multiplexing selection for pad kpd_row3";
    };

    constants kpd_row0_offmodeoutvalue_status width(1) "" {
        KPD_ROW0_OFFMODEOUTVALUE_0 = 0 "Set value at 0.";
        KPD_ROW0_OFFMODEOUTVALUE_1 = 1 "Set value at 1.";
    };

    constants kpd_row0_offmodeenable_status width(1) "" {
        KPD_ROW0_OFFMODEENABLE_0 = 0 "I/O state keeps its previous state when off mode is active.";
        KPD_ROW0_OFFMODEENABLE_1 = 1 "I/O state is forced to off mode value when off mode is active.";
    };

    constants kpd_row0_muxmode_status width(3) "" {
        KPD_ROW0_MUXMODE_0 = 0 "Select kpd_row0";
        KPD_ROW0_MUXMODE_1 = 1 "Select kpd_row3";
        KPD_ROW0_MUXMODE_2 = 2 "Select cam2_d7";
        KPD_ROW0_MUXMODE_3 = 3 "Select gpio_178";
        KPD_ROW0_MUXMODE_7 = 7 "Select safe_mode";
    };

    constants kpd_row5_muxmode_status width(3) "" {
        KPD_ROW5_MUXMODE_0 = 0 "Select kpd_row5";
        KPD_ROW5_MUXMODE_1 = 1 "Select kpd_row2";
        KPD_ROW5_MUXMODE_2 = 2 "Select cam2_d6";
        KPD_ROW5_MUXMODE_3 = 3 "Select gpio_177";
        KPD_ROW5_MUXMODE_7 = 7 "Select safe_mode";
    };
    
    register control_core_pad0_kpd_row5_pad1_kpd_row0 addr(base, 0x18C) "Register control for Pads kpd_row5 and kpd_row0 Access conditions. Read: unrestricted, Write: unrestricted" {
        kpd_row0_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        kpd_row0_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        kpd_row0_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad kpd_row0";
        kpd_row0_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad kpd_row0";
        kpd_row0_offmodeoutvalue 1 rw type(kpd_row0_offmodeoutvalue_status) "OffMode mode output value for pad kpd_row0";
        kpd_row0_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad kpd_row0. This is an active low signal.";
        kpd_row0_offmodeenable 1 rw type(kpd_row0_offmodeenable_status) "OffMode mode override control for pad kpd_row0";
        kpd_row0_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad kpd_row0";
        _ 3 mbz;
        kpd_row0_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad kpd_row0";
        kpd_row0_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad kpd_row0";
        kpd_row0_muxmode 3 rw type(kpd_row0_muxmode_status) "Functional multiplexing selection for pad kpd_row0";
        kpd_row5_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        kpd_row5_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        kpd_row5_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad kpd_row5";
        kpd_row5_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad kpd_row5";
        kpd_row5_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad kpd_row5";
        kpd_row5_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad kpd_row5. This is an active low signal";
        kpd_row5_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad kpd_row5";
        kpd_row5_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad kpd_row5";
        _ 3 mbz;
        kpd_row5_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad kpd_row5";
        kpd_row5_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad kpd_row5";
        kpd_row5_muxmode 3 rw type(kpd_row5_muxmode_status) "Functional multiplexing selection for pad kpd_row5";
    };

    constants kpd_row2_inputenable_status width(1) "" {
        KPD_ROW2_INPUTENABLE_0 = 0 "Input buffee of I/O cell is disabled";
        KPD_ROW2_INPUTENABLE_1 = 1 "Input buffer of I/O cell is enabled";
    };

    constants kpd_row2_muxmode_status width(3) "" {
        KPD_ROW2_MUXMODE_0 = 0 "Select kpd_row2";
        KPD_ROW2_MUXMODE_1 = 1 "Select kpd_row5";
        KPD_ROW2_MUXMODE_2 = 2 "Select cam2_d11";
        KPD_ROW2_MUXMODE_3 = 3 "Select gpio_3";
        KPD_ROW2_MUXMODE_7 = 7 "Select safe_mode";
    };

    constants kpd_row1_muxmode_status width(3) "" {
        KPD_ROW1_MUXMODE_0 = 0 "Select kpd_row1";
        KPD_ROW1_MUXMODE_1 = 1 "Select kpd_row4";
        KPD_ROW1_MUXMODE_2 = 2 "Select cam2_d9";
        KPD_ROW1_MUXMODE_3 = 3 "Select gpio_2";
        KPD_ROW1_MUXMODE_7 = 7 "Select safe_mode";
    };
    
    register control_core_pad0_kpd_row1_pad1_kpd_row2 addr(base, 0x190) "Register control for Pads kpd_row1 and kpd_row2 Access conditions. Read: unrestricted, Write: unrestricted" {
        kpd_row2_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        kpd_row2_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        kpd_row2_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad kpd_row2";
        kpd_row2_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad kpd_row2";
        kpd_row2_offmodeoutvalue 1 rw type(kpd_row0_offmodeoutvalue_status) "OffMode mode output value for pad kpd_row2";
        kpd_row2_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad kpd_row2. This is an active low signal.";
        kpd_row2_offmodeenable 1 rw type(kpd_row0_offmodeenable_status) "OffMode mode override control for pad kpd_row2";
        kpd_row2_inputenable 1 rw type(kpd_row2_inputenable_status) "Input enable value for pad kpd_row2";
        _ 3 mbz;
        kpd_row2_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad kpd_row2";
        kpd_row2_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad kpd_row2";
        kpd_row2_muxmode 3 rw type(kpd_row2_muxmode_status) "Functional multiplexing selection for pad kpd_row2";
        kpd_row1_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        kpd_row1_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        kpd_row1_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad kpd_row1";
        kpd_row1_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad kpd_row1";
        kpd_row1_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad kpd_row1";
        kpd_row1_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad kpd_row1. This is an active low signal";
        kpd_row1_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad kpd_row1";
        kpd_row1_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad kpd_row1";
        _ 3 mbz;
        kpd_row1_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad kpd_row1";
        kpd_row1_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad kpd_row1";
        kpd_row1_muxmode 3 rw type(kpd_row1_muxmode_status) "Functional multiplexing selection for pad kpd_row1";
    };

    constants usba0_otg_status width(1) "" {
        USBA0_OTG_0 = 0 "Wake-up detection on low level";
        USBA0_OTG_1 = 1 "Wake-up detection on high level";
    };

    constants usba0_otg_dp_pulltypeselect_status width(1) "" {
        USBA0_OTG_DP_PULLTYPESELECT_0 = 0 "Pulldown selected";
        USBA0_OTG_DP_PULLTYPESELECT_1 = 1 "Pullup selected";
    };

    constants usba0_otg_dp_pulludenable_status width(1) "" {
        USBA0_OTG_DP_PULLUDENABLE_0 = 0 "Pullup/down disabled";
        USBA0_OTG_DP_PULLUDENABLE_1 = 1 "Pullup/down enabled";
    };

    constants usba0_otg_dp_muxmode_status width(3) "" {
        USBA0_OTG_DP_MUXMODE_0 = 0 "Select usba0_otg_dp";
        USBA0_OTG_DP_MUXMODE_1 = 1 "Select uart3_rx_irrx";
        USBA0_OTG_DP_MUXMODE_2 = 2 "Select uart2_rx";
        USBA0_OTG_DP_MUXMODE_7 = 7 "Select safe_mode";
    };
    
    register control_core_pad0_usba0_otg_ce_pad1_usba0_otg_dp addr(base, 0x194) "Register control for Pads usba0_otg_ce and usba0_otg_dp Access conditions. Read: unrestricted, Write: unrestricted" {
        usba0_otg_ro 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        usba0_otg_rw 1 rw type(usba0_otg_status) "Input pad wake-up enable (and OFF mode input enable value)";
        _ 9 mbz;
        usba0_otg_dp_pulltypeselect 1 rw type(usba0_otg_dp_pulltypeselect_status) "Pullup/down selection for pad usba0_otg_dp";
        usba0_otg_dp_pulludenable 1 rw type(usba0_otg_dp_pulludenable_status) "Pullup/down enable for pad usba0_otg_dp";
        usba0_otg_dp_muxmode 3 rw type(usba0_otg_dp_muxmode_status) "Functional multiplexing selection for pad usba0_otg_dp";
        _ 11 mbz;
        usba0_otg_ce_pulltypeselect 1 rw type(usba0_otg_dp_pulltypeselect_status) "Pullup/down selection for pad usba0_otg_ce";
        usba0_otg_ce_pulludenable 1 rw type(usba0_otg_dp_pulludenable_status) "Pullup/down enable for pad usba0_otg_ce";
        _ 3 mbz;
    };

    constants fref_clk1_out_muxmode_status width(3) "" {
        FREF_CLK1_OUT_MUXMODE_0 = 0 "Select fref_clk1_out";
        FREF_CLK1_OUT_MUXMODE_3 = 3 "Select gpio_181";
        FREF_CLK1_OUT_MUXMODE_7 = 7 "Select safe_mode";
    };

    constants usba0_otg_dm_muxmode_status width(3) "" {
        USBA0_OTG_DM_MUXMODE_0 = 0 "Select usba0_otg_dm";
        USBA0_OTG_DM_MUXMODE_1 = 1 "Select uart3_tx_irtx";
        USBA0_OTG_DM_MUXMODE_2 = 2 "Select uart2_tx";
        USBA0_OTG_DM_MUXMODE_7 = 7 "Select safe_mode";
    };
    
    register control_core_pad0_usba0_otg_dm_pad1_fref_clk1_out addr(base, 0x198) "Register control for Pads usba0_otg_dm and fref_clk1_out Access conditions. Read: unrestricted, Write: unrestricted" {
        fref_clk1_out_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        fref_clk1_out_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        fref_clk1_out_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad fref_clk1_out";
        fref_clk1_out_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad fref_clk1_out";
        fref_clk1_out_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad fref_clk1_out";
        fref_clk1_out_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad fref_clk1_out. This is an active low signal";
        fref_clk1_out_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad fref_clk1_out";
        fref_clk1_out_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad fref_clk1_out";
        _ 3 mbz;
        fref_clk1_out_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad fref_clk1_out";
        fref_clk1_out_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad fref_clk1_out";
        fref_clk1_out_muxmode 3 rw type(fref_clk1_out_muxmode_status) "Functional multiplexing selection for pad fref_clk1_out";
        _ 11 mbz;
        usba0_otg_dm_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad usba0_otg_dm";
        usba0_otg_dm_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad usba0_otg_dm";
        usba0_otg_dm_muxmode 3 rw type(usba0_otg_dm_muxmode_status) "Functional multiplexing selection for pad usba0_otg_dm";
    };

    constants sys_nirq1_muxmode_status width(3) "" {
        SYS_NIRQ1_MUXMODE_0 = 0 "Select sys_nirq1";
        SYS_NIRQ1_MUXMODE_7 = 7 "Select safe_mode";
    };

    constants fref_clk2_out_muxmode_status width(3) "" {
        FREF_CLK2_OUT_MUXMODE_0 = 0 "Select fref_clk2_out";
        FREF_CLK2_OUT_MUXMODE_3 = 3 "Select gpio_182";
        FREF_CLK2_OUT_MUXMODE_7 = 7 "Select safe_mode";
    };
    
    register control_core_pad0_fref_clk2_out_pad1_sys_nirq1 addr(base, 0x19C) "Register control for Pads fref_clk2_out and sys_nirq1 Access conditions. Read: unrestricted, Write: unrestricted" {
        sys_nirq1_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        sys_nirq1_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        _ 5 mbz;
        sys_nirq1_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad sys_nirq1";
        _ 3 mbz;
        sys_nirq1_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad sys_nirq1";
        sys_nirq1_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad sys_nirq1";
        sys_nirq1_muxmode 3 rw type(sys_nirq1_muxmode_status) "Functional multiplexing selection for pad sys_nirq1";
        fref_clk2_out_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        fref_clk2_out_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        fref_clk2_out_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad fref_clk2_out";
        fref_clk2_out_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad fref_clk2_out";
        fref_clk2_out_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad fref_clk2_out";
        fref_clk2_out_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad fref_clk2_out. This is an active low signal";
        fref_clk2_out_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad fref_clk2_out";
        fref_clk2_out_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad fref_clk2_out";
        _ 3 mbz;
        fref_clk2_out_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad fref_clk2_out";
        fref_clk2_out_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad fref_clk2_out";
        fref_clk2_out_muxmode 3 rw type(fref_clk2_out_muxmode_status) "Functional multiplexing selection for pad fref_clk2_out";
    };

    constants sys_boot0_muxmode_status width(3) "" {
        SYS_BOOT0_MUXMODE_0 = 0 "Select sys_boot0";
        SYS_BOOT0_MUXMODE_3 = 3 "Select gpio_184";
        SYS_BOOT0_MUXMODE_7 = 7 "Select safe_mode";
    };

    constants sys_nirq2_muxmode_status width(3) "" {
        SYS_NIRQ2_MUXMODE_0 = 0 "Select sys_nirq2";
        SYS_NIRQ2_MUXMODE_3 = 3 "Select gpio_183";
        SYS_NIRQ2_MUXMODE_7 = 7 "Select safe_mode";
    };
    
    register control_core_pad0_sys_nirq2_pad1_sys_boot0 addr(base, 0x1A0) "Register control for Pads sys_nirq2 and sys_boot0 Access conditions. Read: unrestricted, Write: unrestricted" {
        sys_boot0_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        sys_boot0_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        sys_boot0_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad sys_boot0";
        sys_boot0_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad sys_boot0";
        sys_boot0_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad sys_boot0";
        sys_boot0_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad sys_boot0. This is an active low signal";
        sys_boot0_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad sys_boot0";
        sys_boot0_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad sys_boot0";
        _ 3 mbz;
        sys_boot0_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad sys_boot0";
        sys_boot0_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad sys_boot0";
        sys_boot0_muxmode 3 rw type(sys_boot0_muxmode_status) "Functional multiplexing selection for pad sys_boot0";
        sys_nirq2_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        sys_nirq2_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        sys_nirq2_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad sys_nirq2";
        sys_nirq2_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad sys_nirq2";
        sys_nirq2_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad sys_nirq2";
        sys_nirq2_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad sys_nirq2. This is an active low signal";
        sys_nirq2_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad sys_nirq2";
        sys_nirq2_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad sys_nirq2";
        _ 3 mbz;
        sys_nirq2_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad sys_nirq2";
        sys_nirq2_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad sys_nirq2";
        sys_nirq2_muxmode 3 rw type(sys_nirq2_muxmode_status) "Functional multiplexing selection for pad sys_nirq2";
    };

    constants sys_boot2_muxmode_status width(3) "" {
        SYS_BOOT2_MUXMODE_0 = 0 "Select sys_boot2";
        SYS_BOOT2_MUXMODE_3 = 3 "Select gpio_186";
        SYS_BOOT2_MUXMODE_7 = 7 "Select safe_mode";
    };

    constants sys_boot1_muxmode_status width(3) "" {
        SYS_BOOT1_MUXMODE_0 = 0 "Select sys_boot1";
        SYS_BOOT1_MUXMODE_3 = 3 "Select gpio_185";
        SYS_BOOT1_MUXMODE_7 = 7 "Select safe_mode";
    };
    
    register control_core_pad0_sys_boot1_pad1_sys_boot2 addr(base, 0x1A4) "Register control for Pads sys_boot1 and sys_boot2 Access conditions. Read: unrestricted, Write: unrestricted" {
        sys_boot2_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        sys_boot2_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        sys_boot2_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad sys_boot2";
        sys_boot2_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad sys_boot2";
        sys_boot2_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad sys_boot2";
        sys_boot2_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad sys_boot2. This is an active low signal";
        sys_boot2_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad sys_boot2";
        sys_boot2_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad sys_boot2";
        _ 3 mbz;
        sys_boot2_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad sys_boot2";
        sys_boot2_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad sys_boot2";
        sys_boot2_muxmode 3 rw type(sys_boot2_muxmode_status) "Functional multiplexing selection for pad sys_boot2";
        sys_boot1_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        sys_boot1_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        sys_boot1_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad sys_boot1";
        sys_boot1_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad sys_boot1";
        sys_boot1_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad sys_boot1";
        sys_boot1_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad sys_boot1. This is an active low signal";
        sys_boot1_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad sys_boot1";
        sys_boot1_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad sys_boot1";
        _ 3 mbz;
        sys_boot1_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad sys_boot1";
        sys_boot1_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad sys_boot1";
        sys_boot1_muxmode 3 rw type(sys_boot1_muxmode_status) "Functional multiplexing selection for pad sys_boot1";
    };

    constants sys_boot4_muxmode_status width(3) "" {
        SYS_BOOT4_MUXMODE_0 = 0 "Select sys_boot4";
        SYS_BOOT4_MUXMODE_3 = 3 "Select gpio_188";
        SYS_BOOT4_MUXMODE_7 = 7 "Select safe_mode";
    };

    constants sys_boot3_muxmode_status width(3) "" {
        SYS_BOOT3_MUXMODE_0 = 0 "Select sys_boot3";
        SYS_BOOT3_MUXMODE_3 = 3 "Select gpio_187";
        SYS_BOOT3_MUXMODE_7 = 7 "Select safe_mode";
    };
    
    register control_core_pad0_sys_boot3_pad1_sys_boot4 addr(base, 0x1A8) "Register control for Pads sys_boot3 and sys_boot4 Access conditions. Read: unrestricted, Write: unrestricted" {
        sys_boot4_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        sys_boot4_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        sys_boot4_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad sys_boot4";
        sys_boot4_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad sys_boot4";
        sys_boot4_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad sys_boot4";
        sys_boot4_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad sys_boot4. This is an active low signal";
        sys_boot4_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad sys_boot4";
        sys_boot4_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad sys_boot4";
        _ 3 mbz;
        sys_boot4_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad sys_boot4";
        sys_boot4_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad sys_boot4";
        sys_boot4_muxmode 3 rw type(sys_boot4_muxmode_status) "Functional multiplexing selection for pad sys_boot4";
        sys_boot3_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        sys_boot3_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        sys_boot3_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad sys_boot3";
        sys_boot3_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad sys_boot3";
        sys_boot3_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad sys_boot3";
        sys_boot3_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad sys_boot3. This is an active low signal";
        sys_boot3_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad sys_boot3";
        sys_boot3_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad sys_boot3";
        _ 3 mbz;
        sys_boot3_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad sys_boot3";
        sys_boot3_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad sys_boot3";
        sys_boot3_muxmode 3 rw type(sys_boot3_muxmode_status) "Functional multiplexing selection for pad sys_boot3";
    };

    constants dpm_emu0_muxmode_status width(3) "" {
        DPM_EMU0_MUXMODE_0 = 0 "Select dpm_emu0";
        DPM_EMU0_MUXMODE_3 = 3 "Select gpio_11";
        DPM_EMU0_MUXMODE_6 = 6 "Select hw_dbg0";
        DPM_EMU0_MUXMODE_7 = 7 "Select safe_mode";
    };

    constants sys_boot5_muxmode_status width(3) "" {
        SYS_BOOT5_MUXMODE_0 = 0 "Select sys_boot5";
        SYS_BOOT5_MUXMODE_3 = 3 "Select gpio_189";
        SYS_BOOT5_MUXMODE_7 = 7 "Select safe_mode";
    };
    
    register control_core_pad0_sys_boot5_pad1_dpm_emu0 addr(base, 0x1AC) "Register control for Pads sys_boot5 and dpm_emu0 Access conditions. Read: unrestricted, Write: unrestricted" {
        dpm_emu0_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        dpm_emu0_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        dpm_emu0_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad dpm_emu0";
        dpm_emu0_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad dpm_emu0";
        dpm_emu0_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad dpm_emu0";
        dpm_emu0_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad dpm_emu0. This is an active low signal";
        dpm_emu0_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad dpm_emu0";
        dpm_emu0_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad dpm_emu0";
        _ 3 mbz;
        dpm_emu0_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad dpm_emu0";
        dpm_emu0_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad dpm_emu0";
        dpm_emu0_muxmode 3 rw type(dpm_emu0_muxmode_status) "Functional multiplexing selection for pad dpm_emu0";
        sys_boot5_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        sys_boot5_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        sys_boot5_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad sys_boot5";
        sys_boot5_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad sys_boot5";
        sys_boot5_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad sys_boot5";
        sys_boot5_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad sys_boot5. This is an active low signal";
        sys_boot5_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad sys_boot5";
        sys_boot5_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad sys_boot5";
        _ 3 mbz;
        sys_boot5_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad sys_boot5";
        sys_boot5_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad sys_boot5";
        sys_boot5_muxmode 3 rw type(sys_boot5_muxmode_status) "Functional multiplexing selection for pad sys_boot5";
    };

    constants dpm_emu2_muxmode_status width(3) "" {
        DPM_EMU2_MUXMODE_0 = 0 "Select dpm_emu2";
        DPM_EMU2_MUXMODE_1 = 1 "Select usba0_ulpiphy_clk";
        DPM_EMU2_MUXMODE_3 = 3 "Select gpio_13";
        DPM_EMU2_MUXMODE_5 = 5 "Select dispc2_fid";
        DPM_EMU2_MUXMODE_6 = 6 "Select hw_dbg2";
        DPM_EMU2_MUXMODE_7 = 7 "Select safe_mode";
    };

    constants dpm_emu1_muxmode_status width(3) "" {
        DPM_EMU1_MUXMODE_0 = 0 "Select dpm_emu1";
        DPM_EMU1_MUXMODE_3 = 3 "Select gpio_12";
        DPM_EMU1_MUXMODE_6 = 6 "Select hw_dbg1";
        DPM_EMU1_MUXMODE_7 = 7 "Select safe_mode";
    };
    
    register control_core_pad0_dpm_emu1_pad1_dpm_emu2 addr(base, 0x1B0) "Register control for Pads dpm_emu1 and dpm_emu2 Access conditions. Read: unrestricted, Write: unrestricted" {
        dpm_emu2_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        dpm_emu2_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        dpm_emu2_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad dpm_emu2";
        dpm_emu2_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad dpm_emu2";
        dpm_emu2_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad dpm_emu2";
        dpm_emu2_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad dpm_emu2. This is an active low signal";
        dpm_emu2_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad dpm_emu2";
        dpm_emu2_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad dpm_emu2";
        _ 3 mbz;
        dpm_emu2_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad dpm_emu2";
        dpm_emu2_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad dpm_emu2";
        dpm_emu2_muxmode 3 rw type(dpm_emu2_muxmode_status) "Functional multiplexing selection for pad dpm_emu2";
        dpm_emu1_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        dpm_emu1_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        dpm_emu1_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad dpm_emu1";
        dpm_emu1_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad dpm_emu1";
        dpm_emu1_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad dpm_emu1";
        dpm_emu1_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad dpm_emu1. This is an active low signal";
        dpm_emu1_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad dpm_emu1";
        dpm_emu1_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad dpm_emu1";
        _ 3 mbz;
        dpm_emu1_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad dpm_emu1";
        dpm_emu1_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad dpm_emu1";
        dpm_emu1_muxmode 3 rw type(dpm_emu1_muxmode_status) "Functional multiplexing selection for pad dpm_emu1";
    };

    constants dpm_emu4_muxmode_status width(3) "" {
        DPM_EMU4_MUXMODE_0 = 0 "Select dpm_emu4";
        DPM_EMU4_MUXMODE_1 = 1 "Select usba0_ulpiphy_dir";
        DPM_EMU4_MUXMODE_3 = 3 "Select gpio_15";
        DPM_EMU4_MUXMODE_4 = 4 "Select rfbi_data9";
        DPM_EMU4_MUXMODE_5 = 5 "Select dispc2_data9";
        DPM_EMU4_MUXMODE_6 = 6 "Select hw_dbg4";
        DPM_EMU4_MUXMODE_7 = 7 "Select safe_mode";
    };

    constants dpm_emu3_muxmode_status width(3) "" {
        DPM_EMU3_MUXMODE_0 = 0 "Select dpm_emu3";
        DPM_EMU3_MUXMODE_1 = 1 "Select usba0_ulpiphy_stp";
        DPM_EMU3_MUXMODE_3 = 3 "Select gpio_14";
        DPM_EMU3_MUXMODE_4 = 4 "Select rfbi_data10";
        DPM_EMU3_MUXMODE_5 = 5 "Select dispc2_data10";
        DPM_EMU3_MUXMODE_6 = 6 "Select hw_dbg3";
        DPM_EMU3_MUXMODE_7 = 7 "Select safe_mode";
    };
    
    register control_core_pad0_dpm_emu3_pad1_dpm_emu4 addr(base, 0x1B4) "Register control for Pads dpm_emu3 and dpm_emu4 Access conditions. Read: unrestricted, Write: unrestricted" {
        dpm_emu4_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        dpm_emu4_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        dpm_emu4_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad dpm_emu4";
        dpm_emu4_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad dpm_emu4";
        dpm_emu4_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad dpm_emu4";
        dpm_emu4_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad dpm_emu4. This is an active low signal";
        dpm_emu4_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad dpm_emu4";
        dpm_emu4_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad dpm_emu4";
        _ 3 mbz;
        dpm_emu4_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad dpm_emu4";
        dpm_emu4_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad dpm_emu4";
        dpm_emu4_muxmode 3 rw type(dpm_emu4_muxmode_status) "Functional multiplexing selection for pad dpm_emu4";
        dpm_emu3_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        dpm_emu3_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        dpm_emu3_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad dpm_emu3";
        dpm_emu3_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad dpm_emu3";
        dpm_emu3_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad dpm_emu3";
        dpm_emu3_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad dpm_emu3. This is an active low signal";
        dpm_emu3_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad dpm_emu3";
        dpm_emu3_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad dpm_emu3";
        _ 3 mbz;
        dpm_emu3_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad dpm_emu3";
        dpm_emu3_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad dpm_emu3";
        dpm_emu3_muxmode 3 rw type(dpm_emu3_muxmode_status) "Functional multiplexing selection for pad dpm_emu3";
    };

    constants dpm_emu6_muxmode_status width(3) "" {
        DPM_EMU6_MUXMODE_0 = 0 "Select dpm_emu6";
        DPM_EMU6_MUXMODE_1 = 1 "Select usba0_ulpiphy_dat0";
        DPM_EMU6_MUXMODE_2 = 2 "Select uart3_tx_irtx";
        DPM_EMU6_MUXMODE_3 = 3 "Select gpio_17";
        DPM_EMU6_MUXMODE_4 = 4 "Select rfbi_hsync0";
        DPM_EMU6_MUXMODE_5 = 5 "Select dispc2_data17";
        DPM_EMU6_MUXMODE_6 = 6 "Select hw_dbg6";
        DPM_EMU6_MUXMODE_7 = 7 "Select safe_mode";
    };

    constants dpm_emu5_muxmode_status width(3) "" {
        DPM_EMU5_MUXMODE_0 = 0 "Select dpm_emu5";
        DPM_EMU5_MUXMODE_1 = 1 "Select usba0_ulpiphy_nxt";
        DPM_EMU5_MUXMODE_3 = 3 "Select gpio_16";
        DPM_EMU5_MUXMODE_4 = 4 "Select rfbi_te_vsync0";
        DPM_EMU5_MUXMODE_5 = 5 "Select dispc2_data16";
        DPM_EMU5_MUXMODE_6 = 6 "Select hw_dbg5";
        DPM_EMU5_MUXMODE_7 = 7 "Select safe_mode";
    };
    
    register control_core_pad0_dpm_emu5_pad1_dpm_emu6 addr(base, 0x1B8) "Register control for Pads dpm_emu5 and dpm_emu6 Access conditions. Read: unrestricted, Write: unrestricted" {
        dpm_emu6_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        dpm_emu6_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        dpm_emu6_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad dpm_emu6";
        dpm_emu6_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad dpm_emu6";
        dpm_emu6_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad dpm_emu6";
        dpm_emu6_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad dpm_emu6. This is an active low signal";
        dpm_emu6_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad dpm_emu6";
        dpm_emu6_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad dpm_emu6";
        _ 3 mbz;
        dpm_emu6_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad dpm_emu6";
        dpm_emu6_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad dpm_emu6";
        dpm_emu6_muxmode 3 rw type(dpm_emu6_muxmode_status) "Functional multiplexing selection for pad dpm_emu6";
        dpm_emu5_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        dpm_emu5_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        dpm_emu5_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad dpm_emu5";
        dpm_emu5_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad dpm_emu5";
        dpm_emu5_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad dpm_emu5";
        dpm_emu5_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad dpm_emu5. This is an active low signal";
        dpm_emu5_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad dpm_emu5";
        dpm_emu5_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad dpm_emu5";
        _ 3 mbz;
        dpm_emu5_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad dpm_emu5";
        dpm_emu5_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad dpm_emu5";
        dpm_emu5_muxmode 3 rw type(dpm_emu5_muxmode_status) "Functional multiplexing selection for pad dpm_emu5";
    };

    constants dpm_emu8_muxmode_status width(3) "" {
        DPM_EMU8_MUXMODE_0 = 0 "Select dpm_emu8";
        DPM_EMU8_MUXMODE_1 = 1 "Select usba0_ulpiphy_dat2";
        DPM_EMU8_MUXMODE_2 = 2 "Select uart3_rts_sd";
        DPM_EMU8_MUXMODE_3 = 3 "Select gpio_19";
        DPM_EMU8_MUXMODE_4 = 4 "Select rfbi_re";
        DPM_EMU8_MUXMODE_5 = 5 "Select dispc2_pclk";
        DPM_EMU8_MUXMODE_6 = 6 "Select hw_dbg8";
        DPM_EMU8_MUXMODE_7 = 7 "Select safe_mode";
    };

    constants dpm_emu7_muxmode_status width(3) "" {
        DPM_EMU7_MUXMODE_0 = 0 "Select dpm_emu7";
        DPM_EMU7_MUXMODE_1 = 1 "Select usba0_ulpiphy_dat1";
        DPM_EMU7_MUXMODE_2 = 2 "Select uart3_rx_irrx";
        DPM_EMU7_MUXMODE_3 = 3 "Select gpio_18";
        DPM_EMU7_MUXMODE_4 = 4 "Select rfbi_cs0";
        DPM_EMU7_MUXMODE_5 = 5 "Select dispc2_hsync";
        DPM_EMU7_MUXMODE_6 = 6 "Select hw_dbg7";
        DPM_EMU7_MUXMODE_7 = 7 "Select safe_mode";
    };
    
    register control_core_pad0_dpm_emu7_pad1_dpm_emu8 addr(base, 0x1BC) "Register control for Pads dpm_emu7 and dpm_emu8 Access conditions. Read: unrestricted, Write: unrestricted" {
        dpm_emu8_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        dpm_emu8_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        dpm_emu8_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad dpm_emu8";
        dpm_emu8_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad dpm_emu8";
        dpm_emu8_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad dpm_emu8";
        dpm_emu8_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad dpm_emu8. This is an active low signal";
        dpm_emu8_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad dpm_emu8";
        dpm_emu8_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad dpm_emu8";
        _ 3 mbz;
        dpm_emu8_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad dpm_emu8";
        dpm_emu8_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad dpm_emu8";
        dpm_emu8_muxmode 3 rw type(dpm_emu8_muxmode_status) "Functional multiplexing selection for pad dpm_emu8";
        dpm_emu7_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        dpm_emu7_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        dpm_emu7_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad dpm_emu7";
        dpm_emu7_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad dpm_emu7";
        dpm_emu7_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad dpm_emu7";
        dpm_emu7_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad dpm_emu7. This is an active low signal";
        dpm_emu7_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad dpm_emu7";
        dpm_emu7_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad dpm_emu7";
        _ 3 mbz;
        dpm_emu7_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad dpm_emu7";
        dpm_emu7_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad dpm_emu7";
        dpm_emu7_muxmode 3 rw type(dpm_emu7_muxmode_status) "Functional multiplexing selection for pad dpm_emu7";
    };

    constants dpm_emu10_muxmode_status width(3) "" {
        DPM_EMU10_MUXMODE_0 = 0 "Select dpm_emu10";
        DPM_EMU10_MUXMODE_1 = 1 "Select usba0_ulpiphy_dat4";
        DPM_EMU10_MUXMODE_3 = 3 "Select gpio_21";
        DPM_EMU10_MUXMODE_4 = 4 "Select rfbi_a0";
        DPM_EMU10_MUXMODE_5 = 5 "Select dispc2_de";
        DPM_EMU10_MUXMODE_6 = 6 "Select hw_dbg10";
        DPM_EMU10_MUXMODE_7 = 7 "Select safe_mode";
    };

    constants dpm_emu9_muxmode_status width(3) "" {
        DPM_EMU9_MUXMODE_0 = 0 "Select dpm_emu9";
        DPM_EMU9_MUXMODE_1 = 1 "Select usba0_ulpiphy_dat3";
        DPM_EMU9_MUXMODE_2 = 2 "Select uart3_cts_rctx";
        DPM_EMU9_MUXMODE_3 = 3 "Select gpio_20";
        DPM_EMU9_MUXMODE_4 = 4 "Select rfbi_we";
        DPM_EMU9_MUXMODE_5 = 5 "Select dispc2_vsync";
        DPM_EMU9_MUXMODE_6 = 6 "Select hw_dbg9";
        DPM_EMU9_MUXMODE_7 = 7 "Select safe_mode";
    };
    
    register control_core_pad0_dpm_emu9_pad1_dpm_emu10 addr(base, 0x1C0) "Register control for Pads dpm_emu9 and dpm_emu10 Access conditions. Read: unrestricted, Write: unrestricted" {
        dpm_emu10_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        dpm_emu10_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        dpm_emu10_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad dpm_emu10";
        dpm_emu10_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad dpm_emu10";
        dpm_emu10_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad dpm_emu10";
        dpm_emu10_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad dpm_emu10. This is an active low signal";
        dpm_emu10_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad dpm_emu10";
        dpm_emu10_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad dpm_emu10";
        _ 3 mbz;
        dpm_emu10_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad dpm_emu10";
        dpm_emu10_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad dpm_emu10";
        dpm_emu10_muxmode 3 rw type(dpm_emu10_muxmode_status) "Functional multiplexing selection for pad dpm_emu10";
        dpm_emu9_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        dpm_emu9_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        dpm_emu9_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad dpm_emu9";
        dpm_emu9_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad dpm_emu9";
        dpm_emu9_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad dpm_emu9";
        dpm_emu9_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad dpm_emu9. This is an active low signal";
        dpm_emu9_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad dpm_emu9";
        dpm_emu9_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad dpm_emu9";
        _ 3 mbz;
        dpm_emu9_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad dpm_emu9";
        dpm_emu9_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad dpm_emu9";
        dpm_emu9_muxmode 3 rw type(dpm_emu9_muxmode_status) "Functional multiplexing selection for pad dpm_emu9";
    };

    constants dpm_emu12_muxmode_status width(3) "" {
        DPM_EMU12_MUXMODE_0 = 0 "Select dpm_emu12";
        DPM_EMU12_MUXMODE_1 = 1 "Select usba0_ulpiphy_dat6";
        DPM_EMU12_MUXMODE_3 = 3 "Select gpio_23";
        DPM_EMU12_MUXMODE_4 = 4 "Select rfbi_data7";
        DPM_EMU12_MUXMODE_5 = 5 "Select dispc2_data7";
        DPM_EMU12_MUXMODE_6 = 6 "Select hw_dbg12";
        DPM_EMU12_MUXMODE_7 = 7 "Select safe_mode";
    };

    constants dpm_emu11_muxmode_status width(3) "" {
        DPM_EMU11_MUXMODE_0 = 0 "Select dpm_emu11";
        DPM_EMU11_MUXMODE_1 = 1 "Select usba0_ulpiphy_dat5";
        DPM_EMU11_MUXMODE_3 = 3 "Select gpio_22";
        DPM_EMU11_MUXMODE_4 = 4 "Select rfbi_data8";
        DPM_EMU11_MUXMODE_5 = 5 "Select dispc2_data8";
        DPM_EMU11_MUXMODE_6 = 6 "Select hw_dbg11";
        DPM_EMU11_MUXMODE_7 = 7 "Select safe_mode";
    };
    
    register control_core_pad0_dpm_emu11_pad1_dpm_emu12 addr(base, 0x1C4) "Register control for Pads dpm_emu11 and dpm_emu12 Access conditions. Read: unrestricted, Write: unrestricted" {
        dpm_emu12_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        dpm_emu12_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        dpm_emu12_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad dpm_emu12";
        dpm_emu12_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad dpm_emu12";
        dpm_emu12_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad dpm_emu12";
        dpm_emu12_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad dpm_emu12. This is an active low signal";
        dpm_emu12_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad dpm_emu12";
        dpm_emu12_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad dpm_emu12";
        _ 3 mbz;
        dpm_emu12_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad dpm_emu12";
        dpm_emu12_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad dpm_emu12";
        dpm_emu12_muxmode 3 rw type(dpm_emu12_muxmode_status) "Functional multiplexing selection for pad dpm_emu12";
        dpm_emu11_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        dpm_emu11_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        dpm_emu11_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad dpm_emu11";
        dpm_emu11_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad dpm_emu11";
        dpm_emu11_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad dpm_emu11";
        dpm_emu11_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad dpm_emu11. This is an active low signal";
        dpm_emu11_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad dpm_emu11";
        dpm_emu11_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad dpm_emu11";
        _ 3 mbz;
        dpm_emu11_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad dpm_emu11";
        dpm_emu11_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad dpm_emu11";
        dpm_emu11_muxmode 3 rw type(dpm_emu11_muxmode_status) "Functional multiplexing selection for pad dpm_emu11";
    };

    constants dpm_emu14_muxmode_status width(3) "" {
        DPM_EMU14_MUXMODE_0 = 0 "Select dpm_emu14";
        DPM_EMU14_MUXMODE_1 = 1 "Reserved";
        DPM_EMU14_MUXMODE_2 = 2 "Select uart1_rx";
        DPM_EMU14_MUXMODE_3 = 3 "Select gpio_25";
        DPM_EMU14_MUXMODE_4 = 4 "Select rfbi_data5";
        DPM_EMU14_MUXMODE_5 = 5 "Select dispc2_data5";
        DPM_EMU14_MUXMODE_6 = 6 "Select hw_dbg14";
        DPM_EMU14_MUXMODE_7 = 7 "Select safe_mode";
    };

    constants dpm_emu13_muxmode_status width(3) "" {
        DPM_EMU13_MUXMODE_0 = 0 "Select dpm_emu13";
        DPM_EMU13_MUXMODE_1 = 1 "Select usba0_ulpiphy_dat7";
        DPM_EMU13_MUXMODE_3 = 3 "Select gpio_24";
        DPM_EMU13_MUXMODE_4 = 4 "Select rfbi_data6";
        DPM_EMU13_MUXMODE_5 = 5 "Select dispc2_data6";
        DPM_EMU13_MUXMODE_6 = 6 "Select hw_dbg13";
        DPM_EMU13_MUXMODE_7 = 7 "Select safe_mode";
    };
    
    register control_core_pad0_dpm_emu13_pad1_dpm_emu14 addr(base, 0x1C8) "Register control for Pads dpm_emu13 and dpm_emu14 Access conditions. Read: unrestricted, Write: unrestricted" {
        dpm_emu14_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        dpm_emu14_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        dpm_emu14_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad dpm_emu14";
        dpm_emu14_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad dpm_emu14";
        dpm_emu14_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad dpm_emu14";
        dpm_emu14_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad dpm_emu14. This is an active low signal";
        dpm_emu14_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad dpm_emu14";
        dpm_emu14_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad dpm_emu14";
        _ 3 mbz;
        dpm_emu14_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad dpm_emu14";
        dpm_emu14_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad dpm_emu14";
        dpm_emu14_muxmode 3 rw type(dpm_emu14_muxmode_status) "Functional multiplexing selection for pad dpm_emu14";
        dpm_emu13_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        dpm_emu13_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        dpm_emu13_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad dpm_emu13";
        dpm_emu13_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad dpm_emu13";
        dpm_emu13_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad dpm_emu13";
        dpm_emu13_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad dpm_emu13. This is an active low signal";
        dpm_emu13_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad dpm_emu13";
        dpm_emu13_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad dpm_emu13";
        _ 3 mbz;
        dpm_emu13_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad dpm_emu13";
        dpm_emu13_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad dpm_emu13";
        dpm_emu13_muxmode 3 rw type(dpm_emu13_muxmode_status) "Functional multiplexing selection for pad dpm_emu13";
    };

    constants dpm_emu16_muxmode_status width(3) "" {
        DPM_EMU16_MUXMODE_0 = 0 "Select dpm_emu16";
        DPM_EMU16_MUXMODE_1 = 1 "Select dmtimer8_pwm_evt";
        DPM_EMU16_MUXMODE_2 = 2 "Select dsi1_te0";
        DPM_EMU16_MUXMODE_3 = 3 "Select gpio_27";
        DPM_EMU16_MUXMODE_4 = 4 "Select rfbi_data3";
        DPM_EMU16_MUXMODE_5 = 5 "Select dispc2_data3";
        DPM_EMU16_MUXMODE_6 = 6 "Select hw_dbg16";
        DPM_EMU16_MUXMODE_7 = 7 "Select safe_mode";
    };

    constants dpm_emu15_muxmode_status width(3) "" {
        DPM_EMU15_MUXMODE_0 = 0 "Select dpm_emu15";
        DPM_EMU15_MUXMODE_1 = 1 "Reserved";
        DPM_EMU15_MUXMODE_3 = 3 "Select gpio_26";
        DPM_EMU15_MUXMODE_4 = 4 "Select rfbi_data4";
        DPM_EMU15_MUXMODE_5 = 5 "Select dispc2_data4";
        DPM_EMU15_MUXMODE_6 = 6 "Select hw_dbg15";
        DPM_EMU15_MUXMODE_7 = 7 "Select safe_mode";
    };
    
    register control_core_pad0_dpm_emu15_pad1_dpm_emu16 addr(base, 0x1CC) "Register control for Pads dpm_emu15 and dpm_emu16 Access conditions. Read: unrestricted, Write: unrestricted" {
        dpm_emu16_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        dpm_emu16_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        dpm_emu16_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad dpm_emu16";
        dpm_emu16_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad dpm_emu16";
        dpm_emu16_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad dpm_emu16";
        dpm_emu16_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad dpm_emu16. This is an active low signal";
        dpm_emu16_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad dpm_emu16";
        dpm_emu16_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad dpm_emu16";
        _ 3 mbz;
        dpm_emu16_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad dpm_emu16";
        dpm_emu16_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad dpm_emu16";
        dpm_emu16_muxmode 3 rw type(dpm_emu16_muxmode_status) "Functional multiplexing selection for pad dpm_emu16";
        dpm_emu15_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        dpm_emu15_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        dpm_emu15_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad dpm_emu15";
        dpm_emu15_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad dpm_emu15";
        dpm_emu15_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad dpm_emu15";
        dpm_emu15_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad dpm_emu15. This is an active low signal";
        dpm_emu15_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad dpm_emu15";
        dpm_emu15_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad dpm_emu15";
        _ 3 mbz;
        dpm_emu15_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad dpm_emu15";
        dpm_emu15_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad dpm_emu15";
        dpm_emu15_muxmode 3 rw type(dpm_emu15_muxmode_status) "Functional multiplexing selection for pad dpm_emu15";
    };

    constants dpm_emu18_muxmode_status width(3) "" {
        DPM_EMU18_MUXMODE_0 = 0 "Select dpm_emu18";
        DPM_EMU18_MUXMODE_1 = 1 "Select dmtimer10_pwm_evt";
        DPM_EMU18_MUXMODE_2 = 2 "Select dsi2_te0";
        DPM_EMU18_MUXMODE_3 = 3 "Select gpio_190";
        DPM_EMU18_MUXMODE_4 = 4 "Select rfbi_data1";
        DPM_EMU18_MUXMODE_5 = 5 "Select dispc2_data1";
        DPM_EMU18_MUXMODE_6 = 6 "Select hw_dbg18";
        DPM_EMU18_MUXMODE_7 = 7 "Select safe_mode";
    };

    constants dpm_emu17_muxmode_status width(3) "" {
        DPM_EMU17_MUXMODE_0 = 0 "Select dpm_emu17";
        DPM_EMU17_MUXMODE_1 = 1 "Select dmtimer9_pwm_evt";
        DPM_EMU17_MUXMODE_2 = 2 "Select dsi1_te1";
        DPM_EMU17_MUXMODE_3 = 3 "Select gpio_28";
        DPM_EMU17_MUXMODE_4 = 4 "Select rfbi_data2";
        DPM_EMU17_MUXMODE_5 = 5 "Select dispc2_data2";
        DPM_EMU17_MUXMODE_6 = 6 "Select hw_dbg17";
        DPM_EMU17_MUXMODE_7 = 7 "Select safe_mode";
    };
    
    register control_core_pad0_dpm_emu17_pad1_dpm_emu18 addr(base, 0x1D0) "Register control for Pads dpm_emu17 and dpm_emu18 Access conditions. Read: unrestricted, Write: unrestricted" {
        dpm_emu18_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        dpm_emu18_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        dpm_emu18_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad dpm_emu18";
        dpm_emu18_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad dpm_emu18";
        dpm_emu18_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad dpm_emu18";
        dpm_emu18_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad dpm_emu18. This is an active low signal";
        dpm_emu18_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad dpm_emu18";
        dpm_emu18_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad dpm_emu18";
        _ 3 mbz;
        dpm_emu18_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad dpm_emu18";
        dpm_emu18_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad dpm_emu18";
        dpm_emu18_muxmode 3 rw type(dpm_emu18_muxmode_status) "Functional multiplexing selection for pad dpm_emu18";
        dpm_emu17_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        dpm_emu17_wakeupenable 1 rw type(gpmc_ad1_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        dpm_emu17_offmodepulltypeselect 1 rw type(gpmc_ad1_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad dpm_emu17";
        dpm_emu17_offmodepulludenable 1 rw type(gpmc_ad1_offmodepulludenable_status) "OffMode mode pullup/down enable for pad dpm_emu17";
        dpm_emu17_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad dpm_emu17";
        dpm_emu17_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad dpm_emu17. This is an active low signal";
        dpm_emu17_offmodeenable 1 rw type(gpmc_ad1_offmodeenable_status) "OffMode mode override control for pad dpm_emu17";
        dpm_emu17_inputenable 1 rw type(gpmc_ad1_inputenable_status) "Input enable value for pad dpm_emu17";
        _ 3 mbz;
        dpm_emu17_pulltypeselect 1 rw type(gpmc_ad1_pulltypeselect_status) "pullup/down selection for pad dpm_emu17";
        dpm_emu17_pulludenable 1 rw type(gpmc_ad1_pulludenable_status) "pullup/down enable for pad dpm_emu17";
        dpm_emu17_muxmode 3 rw type(dpm_emu17_muxmode_status) "Functional multiplexing selection for pad dpm_emu17";
    };

    constants csi22_dx2_wakeupevent_status width(1) "" {
        CSI22_DX2_WAKEUPEVENT_1_r = 1 "A wake-up event occurred.";
        CSI22_DX2_WAKEUPEVENT_0_r = 0 "No wake-up event occurred.";
    };

    constants csi22_dx2_inputenable_status width(1) "" {
        CSI22_DX2_INPUTENABLE_0 = 0 "Input buffer of IO cell is disabled.";
        CSI22_DX2_INPUTENABLE_1 = 1 "Input buffer of IO cell is enabled.";
    };

    constants csi22_dx2_pulludenable_status width(1) "" {
        CSI22_DX2_PULLUDENABLE_0 = 0 "Pullup/downdisabled";
        CSI22_DX2_PULLUDENABLE_1 = 1 "Pullup/down enabled";
    };

    constants csi22_dx2_muxmode_status width(3) "" {
        CSI22_DX2_MUXMODE_0 = 0 "Select csi22_dx2";
        CSI22_DX2_MUXMODE_2 = 2 "Select cam2_fid";
        CSI22_DX2_MUXMODE_7 = 7 "Select safe_mode";
    };

    constants dpm_emu19_wakeupenable_status width(1) "" {
        DPM_EMU19_WAKEUPENABLE_0 = 0 "Wake-up detection is disabled.";
        DPM_EMU19_WAKEUPENABLE_1 = 1 "Wake-up detection is enabled.";
    };

    constants dpm_emu19_offmodepulltypeselect_status width(1) "" {
        DPM_EMU19_OFFMODEPULLTYPESELECT_0 = 0 "Off mode pulldown selected";
        DPM_EMU19_OFFMODEPULLTYPESELECT_1 = 1 "Off mode pullup selected";
    };

    constants dpm_emu19_offmodepulludenable_status width(1) "" {
        DPM_EMU19_OFFMODEPULLUDENABLE_0 = 0 "Off mode pullup/down disabled";
        DPM_EMU19_OFFMODEPULLUDENABLE_1 = 1 "Off mode pullup/down enabled";
    };

    constants dpm_emu19_inputenable_status width(1) "" {
        DPM_EMU19_INPUTENABLE_0 = 0 "Input buffer of I/O cell is disabled.";
        DPM_EMU19_INPUTENABLE_1 = 1 "Input buffer of I/O cell is enabled.";
    };

    constants dpm_emu19_muxmode_status width(3) "" {
        DPM_EMU19_MUXMODE_0 = 0 "Select dpm_emu19";
        DPM_EMU19_MUXMODE_1 = 1 "Select dmtimer11_pwm_evt";
        DPM_EMU19_MUXMODE_2 = 2 "Select dsi2_te1";
        DPM_EMU19_MUXMODE_3 = 3 "Select gpio_191";
        DPM_EMU19_MUXMODE_4 = 4 "Select rfbi_data0";
        DPM_EMU19_MUXMODE_5 = 5 "Select dispc2_data0";
        DPM_EMU19_MUXMODE_6 = 6 "Select hw_dbg19";
        DPM_EMU19_MUXMODE_7 = 7 "Select safe_mode";
    };
    
    register control_core_pad0_dpm_emu19_pad1_csi22_dx2 addr(base, 0x1D4) "Register control for Pads dpm_emu19 and csi22_dx2 Access conditions. Read: unrestricted, Write: unrestricted" {
        csi22_dx2_wakeupevent 1 ro type(csi22_dx2_wakeupevent_status) "Pad_x wake-up event status latched in the I/O";
        csi22_dx2_wakeupenable 1 rw type(usba0_otg_status) "Input pad wake-up enable (and off mode input enable value)";
        _ 5 mbz;
        csi22_dx2_inputenable 1 rw type(csi22_dx2_inputenable_status) "Input enable value for pad csi22_dx2";
        _ 3 mbz;
        csi22_dx2_pulltypeselect 1 rw type(usba0_otg_dp_pulltypeselect_status) "Pullup/down selection for pad csi22_dx2";
        csi22_dx2_pulludenable 1 rw type(csi22_dx2_pulludenable_status) "Pullup/down enable for pad csi22_dx2";
        csi22_dx2_muxmode 3 ro type(csi22_dx2_muxmode_status) "Functional multiplexing selection for pad csi22_dx2";
        dpm_emu19_wakeupevent 1 ro type(csi22_dx2_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        dpm_emu19_wakeupenable 1 rw type(dpm_emu19_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        dpm_emu19_offmodepulltypeselect 1 rw type(dpm_emu19_offmodepulltypeselect_status) "OffMode mode pullup/down selection for pad dpm_emu19";
        dpm_emu19_offmodepulludenable 1 rw type(dpm_emu19_offmodepulludenable_status) "OffMode mode pullup/down enable for pad dpm_emu19";
        dpm_emu19_offmodeoutvalue 1 rw type(gpmc_ad1_offmodeoutvalue_status) "OffMode mode output value for pad dpm_emu19";
        dpm_emu19_offmodeoutenable 1 rw type(gpmc_ad1_offmodeoutenable_status) "OffMode mode output enable value for pad dpm_emu19. This is an active low signal.";
        dpm_emu19_offmodeenable 1 rw type(kpd_row0_offmodeenable_status) "OffMode mode override control for pad dpm_emu19";
        dpm_emu19_inputenable 1 rw type(dpm_emu19_inputenable_status) "Input enable value for pad dpm_emu19";
        _ 3 mbz;
        dpm_emu19_pulltypeselect 1 rw type(usba0_otg_dp_pulltypeselect_status) "Pullup/down selection for pad dpm_emu19";
        dpm_emu19_pulludenable 1 rw type(usba0_otg_dp_pulludenable_status) "Pullup/down enable for pad dpm_emu19";
        dpm_emu19_muxmode 3 rw type(dpm_emu19_muxmode_status) "Functional multiplexing selection for pad dpm_emu19";
    };
    
    register control_padconf_wakeupevent_0 addr(base, 0x1D8) "Access conditions. Read: unrestricted, Write: unrestricted" {
        gpmc_clk_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad gpmc_clk";
        gpmc_nwp_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad gpmc_nwp";
        gpmc_ncs3_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad gpmc_ncs3";
        gpmc_ncs2_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad gpmc_ncs2";
        gpmc_ncs1_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad gpmc_ncs1";
        gpmc_ncs0_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad gpmc_ncs0";
        gpmc_a25_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad gpmc_a25";
        gpmc_a24_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad gpmc_a24";
        gpmc_a23_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad gpmc_a23";
        gpmc_a22_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad gpmc_a22";
        gpmc_a21_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad gpmc_a21";
        gpmc_a20_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad gpmc_a20";
        gpmc_a19_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad gpmc_a19";
        gpmc_a18_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad gpmc_a18";
        gpmc_a17_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad gpmc_a17";
        gpmc_a16_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad gpmc_a16";
        gpmc_ad15_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad gpmc_ad15";
        gpmc_ad14_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad gpmc_ad14";
        gpmc_ad13_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad gpmc_ad13";
        gpmc_ad12_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad gpmc_ad12";
        gpmc_ad11_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad gpmc_ad11";
        gpmc_ad10_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad gpmc_ad10";
        gpmc_ad9_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad gpmc_ad9";
        gpmc_ad8_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad gpmc_ad8";
        gpmc_ad7_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad gpmc_ad7";
        gpmc_ad6_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad gpmc_ad6";
        gpmc_ad5_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad gpmc_ad5";
        gpmc_ad4_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad gpmc_ad4";
        gpmc_ad3_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad gpmc_ad3";
        gpmc_ad2_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad gpmc_ad2";
        gpmc_ad1_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad gpmc_ad1";
        gpmc_ad0_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad gpmc_ad0";
    };
    
    register control_padconf_wakeupevent_1 addr(base, 0x1DC) "Access conditions. Read: unrestricted, Write: unrestricted" {
        cam_strobe_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad cam_strobe";
        cam_shutter_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad cam_shutter";
        csi22_dy1_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad csi22_dy1";
        csi22_dx1_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad csi22_dx1";
        csi22_dy0_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad csi22_dy0";
        csi22_dx0_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad csi22_dx0";
        csi21_dy4_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad csi21_dy4";
        csi21_dx4_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad csi21_dx4";
        csi21_dy3_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad csi21_dy3";
        csi21_dx3_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad csi21_dx3";
        csi21_dy2_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad csi21_dy2";
        csi21_dx2_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad csi21_dx2";
        csi21_dy1_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad csi21_dy1";
        csi21_dx1_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad csi21_dx1";
        csi21_dy0_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad csi21_dy0";
        csi21_dx0_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad csi21_dx0";
        gpio66_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad gpio66";
        gpio65_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad gpio65";
        gpio64_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad gpio64";
        gpio63_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad gpio63";
        gpmc_ncs7_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad gpmc_ncs7";
        gpmc_ncs6_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad gpmc_ncs6";
        gpmc_ncs5_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad gpmc_ncs5";
        gpmc_ncs4_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad gpmc_ncs4";
        gpmc_wait2_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad gpmc_wait2";
        gpmc_wait1_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad gpmc_wait1";
        gpmc_wait0_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad gpmc_wait0";
        gpmc_nbe1_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad gpmc_nbe1";
        gpmc_nbe0_cle_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad gpmc_nbe0_cle";
        gpmc_nwe_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad gpmc_nwe";
        gpmc_noe_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad gpmc_noe";
        gpmc_nadv_ale_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad gpmc_nadv_ale";
    };
    
    register control_padconf_wakeupevent_2 addr(base, 0x1E0) "Access conditions. Read: unrestricted, Write: unrestricted" {
        abe_mcbsp1_clkx_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad abe_mcbsp1_clkx";
        abe_mcbsp2_fsx_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad abe_mcbsp2_fsx";
        abe_mcbsp2_dx_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad abe_mcbsp2_dx";
        abe_mcbsp2_dr_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad abe_mcbsp2_dr";
        abe_mcbsp2_clkx_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad abe_mcbsp2_clkx";
        sdmmc1_dat7_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad sdmmc1_dat7";
        sdmmc1_dat6_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad sdmmc1_dat6";
        sdmmc1_dat5_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad sdmmc1_dat5";
        sdmmc1_dat4_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad sdmmc1_dat4";
        sdmmc1_dat3_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad sdmmc1_dat3";
        sdmmc1_dat2_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad sdmmc1_dat2";
        sdmmc1_dat1_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad sdmmc1_dat1";
        sdmmc1_dat0_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad sdmmc1_dat0";
        sdmmc1_cmd_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad sdmmc1_cmd";
        sdmmc1_clk_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad sdmmc1_clk";
        usbc1_icusb_dm_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad usbc1_icusb_dm";
        usbc1_icusb_dp_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad usbc1_icusb_dp";
        usbb1_hsic_strobe_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad usbb1_hsic_strobe";
        usbb1_hsic_data_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad usbb1_hsic_data";
        usbb1_ulpitll_dat7_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad usbb1_ulpitll_dat7";
        usbb1_ulpitll_dat6_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad usbb1_ulpitll_dat6";
        usbb1_ulpitll_dat5_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad usbb1_ulpitll_dat5";
        usbb1_ulpitll_dat4_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad usbb1_ulpitll_dat4";
        usbb1_ulpitll_dat3_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad usbb1_ulpitll_dat3";
        usbb1_ulpitll_dat2_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad usbb1_ulpitll_dat2";
        usbb1_ulpitll_dat1_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad usbb1_ulpitll_dat1";
        usbb1_ulpitll_dat0_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad usbb1_ulpitll_dat0";
        usbb1_ulpitll_nxt_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad usbb1_ulpitll_nxt";
        usbb1_ulpitll_dir_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad usbb1_ulpitll_dir";
        usbb1_ulpitll_stp_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad usbb1_ulpitll_stp";
        usbb1_ulpitll_clk_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad usbb1_ulpitll_clk";
        cam_globalreset_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad cam_globalreset";
    };
    
    register control_padconf_wakeupevent_3 addr(base, 0x1E4) "Access conditions. Read: unrestricted, Write: unrestricted" {
        mcspi1_cs3_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad mcspi1_cs3";
        mcspi1_cs2_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad mcspi1_cs2";
        mcspi1_cs1_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad mcspi1_cs1";
        mcspi1_cs0_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad mcspi1_cs0";
        mcspi1_simo_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad mcspi1_simo";
        mcspi1_somi_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad mcspi1_somi";
        mcspi1_clk_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad mcspi1_clk";
        i2c4_sda_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad i2c4_sda";
        i2c4_scl_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad i2c4_scl";
        i2c3_sda_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad i2c3_sda";
        i2c3_scl_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad i2c3_scl";
        i2c2_sda_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad i2c2_sda";
        i2c2_scl_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad i2c2_scl";
        i2c1_sda_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad i2c1_sda";
        i2c1_scl_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad i2c1_scl";
        hdq_sio_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad hdq_sio";
        uart2_tx_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad uart2_tx";
        uart2_rx_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad uart2_rx";
        uart2_rts_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad uart2_rts";
        uart2_cts_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad uart2_cts";
        abe_dmic_din3_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad abe_dmic_din3";
        abe_dmic_din2_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad abe_dmic_din2";
        abe_dmic_din1_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad abe_dmic_din1";
        abe_dmic_clk1_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad abe_dmic_clk1";
        abe_clks_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad abe_clks";
        abe_pdm_lb_clk_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad abe_pdm_lb_clk";
        abe_pdm_frame_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad abe_pdm_frame";
        abe_pdm_dl_data_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad abe_pdm_dl_data";
        abe_pdm_ul_data_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad abe_pdm_ul_data";
        abe_mcbsp1_fsx_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad abe_mcbsp1_fsx";
        abe_mcbsp1_dx_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad abe_mcbsp1_dx";
        abe_mcbsp1_dr_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad abe_mcbsp1_dr";
    };
    
    register control_padconf_wakeupevent_4 addr(base, 0x1E8) "Access conditions. Read: unrestricted, Write: unrestricted" {
        kpd_col4_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad kpd_col4";
        kpd_col3_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad kpd_col3";
        usbb2_hsic_strobe_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad usbb2_hsic_strobe";
        usbb2_hsic_data_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad usbb2_hsic_data";
        usbb2_ulpitll_dat7_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad usbb2_ulpitll_dat7";
        usbb2_ulpitll_dat6_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad usbb2_ulpitll_dat6";
        usbb2_ulpitll_dat5_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad usbb2_ulpitll_dat5";
        usbb2_ulpitll_dat4_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad usbb2_ulpitll_dat4";
        usbb2_ulpitll_dat3_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad usbb2_ulpitll_dat3";
        usbb2_ulpitll_dat2_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad usbb2_ulpitll_dat2";
        usbb2_ulpitll_dat1_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad usbb2_ulpitll_dat1";
        usbb2_ulpitll_dat0_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad usbb2_ulpitll_dat0";
        usbb2_ulpitll_nxt_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad usbb2_ulpitll_nxt";
        usbb2_ulpitll_dir_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad usbb2_ulpitll_dir";
        usbb2_ulpitll_stp_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad usbb2_ulpitll_stp";
        usbb2_ulpitll_clk_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad usbb2_ulpitll_clk";
        uart4_tx_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad uart4_tx";
        uart4_rx_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad uart4_rx";
        mcspi4_cs0_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad mcspi4_cs0";
        mcspi4_somi_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad mcspi4_somi";
        mcspi4_simo_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad mcspi4_simo";
        mcspi4_clk_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad mcspi4_clk";
        sdmmc5_dat3_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad sdmmc5_dat3";
        sdmmc5_dat2_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad sdmmc5_dat2";
        sdmmc5_dat1_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad sdmmc5_dat1";
        sdmmc5_dat0_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad sdmmc5_dat0";
        sdmmc5_cmd_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad sdmmc5_cmd";
        sdmmc5_clk_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad sdmmc5_clk";
        uart3_tx_irtx_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad uart3_tx_irtx";
        uart3_rx_irrx_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad uart3_rx_irrx";
        uart3_rts_sd_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad uart3_rts_sd";
        uart3_cts_rctx_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad uart3_cts_rctx";
    };
    
    register control_padconf_wakeupevent_5 addr(base, 0x1EC) "Access conditions. Read: unrestricted, Write: unrestricted" {
        dpm_emu10_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad dpm_emu10";
        dpm_emu9_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad dpm_emu9";
        dpm_emu8_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad dpm_emu8";
        dpm_emu7_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad dpm_emu7";
        dpm_emu6_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad dpm_emu6";
        dpm_emu5_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad dpm_emu5";
        dpm_emu4_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad dpm_emu4";
        dpm_emu3_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad dpm_emu3";
        dpm_emu2_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad dpm_emu2";
        dpm_emu1_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad dpm_emu1";
        dpm_emu0_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad dpm_emu0";
        sys_boot5_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad sys_boot5";
        sys_boot4_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad sys_boot4";
        sys_boot3_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad sys_boot3";
        sys_boot2_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad sys_boot2";
        sys_boot1_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad sys_boot1";
        sys_boot0_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad sys_boot0";
        sys_nirq2_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad sys_nirq2";
        sys_nirq1_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad sys_nirq1";
        fref_clk2_out_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad fref_clk2_out";
        fref_clk1_out_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad fref_clk1_out";
        usba0_otg_dp_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad usba0_otg_dp";
        kpd_row2_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad kpd_row2";
        kpd_row1_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad kpd_row1";
        kpd_row0_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad kpd_row0";
        kpd_row5_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad kpd_row5";
        kpd_row4_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad kpd_row4";
        kpd_row3_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad kpd_row3";
        kpd_col2_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad kpd_col2";
        kpd_col1_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad kpd_col1";
        kpd_col0_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad kpd_col0";
        kpd_col5_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad kpd_col5";
    };

    constants csi22_dy2_duplicatewakeupevent_status width(1) "" {
        CSI22_DY2_DUPLICATEWAKEUPEVENT_1_r = 1 "A wakeup event occurred";
        CSI22_DY2_DUPLICATEWAKEUPEVENT_0_r = 0 "No wakeup event occurred";
    };
    
    register control_padconf_wakeupevent_6 addr(base, 0x1F0) "Access conditions. Read: unrestricted, Write: unrestricted" {
        _ 21 mbz;
        csi22_dy2_duplicatewakeupevent 1 ro type(csi22_dy2_duplicatewakeupevent_status) "Wake-up event status latched in the IO for pad csi22_dy2";
        csi22_dx2_duplicatewakeupevent 1 ro type(csi22_dy2_duplicatewakeupevent_status) "Wake-up event status latched in the IO for pad csi22_dx2";
        dpm_emu19_duplicatewakeupevent 1 ro type(csi22_dy2_duplicatewakeupevent_status) "Wake-up event status latched in the IO for pad dpm_emu19";
        dpm_emu18_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad dpm_emu18";
        dpm_emu17_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad dpm_emu17";
        dpm_emu16_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad dpm_emu16";
        dpm_emu15_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad dpm_emu15";
        dpm_emu14_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad dpm_emu14";
        dpm_emu13_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad dpm_emu13";
        dpm_emu12_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad dpm_emu12";
        dpm_emu11_duplicatewakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Wake-up event status latched in the I/O for pad dpm_emu11";
    };

    constants csi22_dy2_wakeupenable_status width(1) "" {
        CSI22_DY2_WAKEUPENABLE_0 = 0 "wake-up detection on low level";
        CSI22_DY2_WAKEUPENABLE_1 = 1 "wake-up detection on high level";
    };

    constants csi22_dy2_inputenable_status width(1) "" {
        CSI22_DY2_INPUTENABLE_0 = 0 "Input buffer of IO cell is disabled";
        CSI22_DY2_INPUTENABLE_1 = 1 "Input buffer of IO cell is enabled";
    };

    constants csi22_dy2_muxmode_status width(3) "" {
        CSI22_DY2_MUXMODE_0 = 0 "Select csi22_dy2";
        CSI22_DY2_MUXMODE_2 = 2 "Select cam2_wen";
        CSI22_DY2_MUXMODE_7 = 7 "Select safe_mode";
    };
    
    register control_core_pad0_csi22_dy2 addr(base, 0x1F4) "Register control for Pad csi22_dy2 Access conditions. Read: unrestricted, Write: unrestricted" {
        _ 16 mbz;
        csi22_dy2_wakeupevent 1 ro type(gpmc_ad1_wakeupevent_status) "Pad_x wake-up event status latched in the IO";
        csi22_dy2_wakeupenable 1 rw type(csi22_dy2_wakeupenable_status) "Input pad wake-up enable (and OFF mode input enable value)";
        _ 5 mbz;
        csi22_dy2_inputenable 1 rw type(csi22_dy2_inputenable_status) "Input enable value for pad csi22_dy2";
        _ 3 mbz;
        csi22_dy2_pulltypeselect 1 rw type(hdq_sio_pulltypeselect_status) "Pull-Up/Down selection for pad csi22_dy2";
        csi22_dy2_pulludenable 1 rw type(hdq_sio_pulludenable_status) "Pull-Up/Down enable for pad csi22_dy2";
        csi22_dy2_muxmode 3 rw type(csi22_dy2_muxmode_status) "Functional multiplexing selection for pad csi22_dy2";
    };

    constants force_offmode_en_status width(1) "" {
        FORCE_OFFMODE_EN_0 = 0 "Offmode is not forced active";
        FORCE_OFFMODE_EN_1 = 1 "Offmode is forced active";
    };
    
    register control_padconf_global addr(base, 0x5A0) "Global PAD control Access conditions. Read: unrestricted, Write: unrestricted" {
        force_offmode_en 1 rw type(force_offmode_en_status) "Force offmode enable for PADs";
        _ 31 mbz;
    };

    constants vdds_dv_bank0_status width(1) "" {
        VDDS_DV_BANK0_0 = 0 "VDDS = 1.8V";
        VDDS_DV_BANK0_1 = 1 "VDDS = 1.2V";
    };
    
    register control_core_padconf_mode addr(base, 0x5A4) "PAD Voltage Mode control Access conditions. Read: unrestricted, Write: unrestricted" {
        vdds_dv_bank0 1 rw type(vdds_dv_bank0_status) "PAD Voltage level control for vdds_dv_bank0";
        vdds_dv_bank1 1 rw type(vdds_dv_bank0_status) "PAD Voltage level control for vdds_dv_bank1";
        vdds_dv_bank3 1 rw type(vdds_dv_bank0_status) "PAD Voltage level control for vdds_dv_bank3";
        vdds_dv_bank4 1 rw type(vdds_dv_bank0_status) "PAD Voltage level control for vdds_dv_bank4";
        vdds_dv_bank5 1 rw type(vdds_dv_bank0_status) "PAD Voltage level control for vdds_dv_bank5";
        vdds_dv_bank6 1 rw type(vdds_dv_bank0_status) "PAD Voltage level control for vdds_dv_bank6";
        vdds_dv_c2c 1 rw type(vdds_dv_bank0_status) "PAD Voltage level control for vdds_dv_c2c";
        vdds_dv_cam 1 rw type(vdds_dv_bank0_status) "PAD Voltage level control for vdds_dv_cam";
        vdds_dv_gpmc0 1 rw type(vdds_dv_bank0_status) "PAD Voltage level control for vdds_dv_gpmc0";
        vdds_dv_sdmmc2 1 rw type(vdds_dv_bank0_status) "PAD Voltage level control for vdds_dv_sdmmc2";
        vdds_dv_bank7 1 rw type(vdds_dv_bank0_status) "PAD Voltage level control for vdds_dv_bank7";
        vdds_dv_gpmc1 1 rw type(vdds_dv_bank0_status) "PAD Voltage level control for vdds_dv_gpmc1";
        vdds_dv_bank2_shared0 1 rw type(vdds_dv_bank0_status) "PAD Voltage level control for vdds_dv_bank2_shared0";
        _ 19 mbz;
    };
    
    register control_smart1io_padconf_0 addr(base, 0x5A8) "SMART1 I/O control 0 Access conditions. Read: unrestricted, Write: unrestricted" {
        abe_dr0_sc 2 rw "Slew rate control for group abe_dr0. Refer to , section Low Speed I/Os Combined Slew Rate vs TL Length and Load Settings for more details on SR settings.";
        cam_dr0_sc 2 rw "Slew rate control for group cam_dr0. Refer to , section Low Speed I/Os Combined Slew Rate vs TL Length and Load Settings for more details on SR settings.";
        _ 4 mbz;
        gpio_dr8_sc 2 rw "Slew rate control for group gpio_dr8. Refer to , section Low Speed I/Os Combined Slew Rate vs TL Length and Load Settings for more details on SR settings.";
        gpio_dr9_sc 2 rw "Slew rate control for group gpio_dr9. Refer to , section Low Speed I/Os Combined Slew Rate vs TL Length and Load Settings for more details on SR settings.";
        _ 2 mbz;
        gpmc_dr3_sc 2 rw "Slew rate control for group gpmc_dr3. Refer to , section Low Speed I/Os Combined Slew Rate vs TL Length and Load Settings for more details on SR settings.";
        _ 2 mbz;
        gpio_63_64_dr0_sc 2 rw "Slew rate control for group gpio_63_64_dr0. Refer to , section Low Speed I/Os Combined Slew Rate vs TL Length and Load Settings for more details on SR settings.";
        mcspi1_dr0_sc 2 rw "Slew rate control for group mcspi1_dr0 Refer to , section Low Speed I/Os Combined Slew Rate vs TL Length and Load Settings for more details on SR settings.";
        uart1_dr0_sc 2 rw "Slew rate control for group uart1_dr0 Refer to , section Low Speed I/Os Combined Slew Rate vs TL Length and Load Settings for more details on SR settings.";
        uart3_dr0_sc 2 rw "Slew rate control for group uart3_dr0 Refer to , section Low Speed I/Os Combined Slew Rate vs TL Length and Load Settings for more details on SR settings.";
        uart3_dr1_sc 2 rw "Slew rate control for group uart3_dr1 Refer to , section Low Speed I/Os Combined Slew Rate vs TL Length and Load Settings for more details on SR settings.";
        _ 4 mbz;
    };

    constants abe_dr0_lb_status width(2) "" {
        ABE_DR0_LB_0 = 0 "TL Length= [2cm-20cm] / Farend cap per TL= [1pF-10pF]";
        ABE_DR0_LB_1 = 1 "Dual TL Length= [20cm-40cm] / Farend cap per TL= [1pF-10pF]";
        ABE_DR0_LB_2 = 2 "TL Length = [2cm-20cm] / Farend cap per TL= [10pF-20pF]";
        ABE_DR0_LB_3 = 3 "Dual TL Length = [20cm-40cm] / Farend cap per TL= [10pF-20pF]";
    };
    
    register control_smart1io_padconf_1 addr(base, 0x5AC) "SMART1 I/O control 1 Access conditions. Read: unrestricted, Write: unrestricted" {
        abe_dr0_lb 2 rw type(abe_dr0_lb_status) "Load control for group abe_dr0";
        cam_dr0_lb 2 rw type(abe_dr0_lb_status) "Load control for group cam_dr0";
        _ 4 mbz;
        gpio_dr8_lb 2 rw type(abe_dr0_lb_status) "Load control for group gpio_dr8";
        gpio_dr9_lb 2 rw type(abe_dr0_lb_status) "Load control for group gpio_dr9";
        _ 2 mbz;
        gpmc_dr3_lb 2 rw type(abe_dr0_lb_status) "Load control for group gpmc_dr3";
        _ 2 mbz;
        gpio_63_64_dr0_lb 2 rw type(abe_dr0_lb_status) "Load control for group gpio_63_64_dr0";
        mcspi1_dr0_lb 2 rw type(abe_dr0_lb_status) "Load control for group mcspi1_dr0";
        uart1_dr0_lb 2 rw type(abe_dr0_lb_status) "Load control for group uart1_dr0";
        uart3_dr0_lb 2 rw type(abe_dr0_lb_status) "Load control for group uart3_dr0";
        uart3_dr1_lb 2 rw type(abe_dr0_lb_status) "Load control for group uart3_dr1";
        _ 4 mbz;
    };
    
    register control_smart2io_padconf_0 rw addr(base, 0x5B0) "SMART2 I/O control 0 Access conditions. Read: unrestricted, Write: unrestricted" type(uint32);
    
    register control_smart2io_padconf_1 ro addr(base, 0x5B4) "SMART2 I/O control 1 Access conditions. Read: unrestricted, Write: unrestricted" type(uint32);
    
    register control_smart3io_padconf_0 addr(base, 0x5B8) "SMART3 I/O control 0 Access conditions. Read: unrestricted, Write: unrestricted" {
        dmic_dr0_mb 2 rw "50-Ohm output buffer mode control for group dmic_dr0. Refer to 50-Ohm output buffer I/Os with combined Mode and Load Settings for more details on mode settings.";
        gpio_dr3_mb 2 rw "25-Ohm output buffer mode control for group gpio_dr3. Refer to I/Os with combined Mode and Load Settings for more details on mode settings.";
        gpio_dr4_mb 2 rw "25-Ohm output buffer mode control for group gpio_dr4. Refer to I/Os with combined Mode and Load Settings for more details on mode settings.";
        gpio_dr5_mb 2 rw "50-Ohm output buffer mode control for group gpio_dr5. Refer to 50-Ohm output buffer I/Os with combined Mode and Load Settings for more details on mode settings.";
        gpio_dr6_mb 2 rw "50-Ohm output buffer mode control for group gpio_dr6. Refer to 50-Ohm output buffer I/Os with combined Mode and Load Settings for more details on mode settings.";
        hsi_dr1_mb 2 rw "25-Ohm output buffer mode control for group hsi_dr1. Refer to the I/Os with combined Mode and Load Settings for more information about mode settings.";
        hsi_dr2_mb 2 rw "25-Ohm output buffer mode control for group hsi_dr2. Refer to the I/Os with combined Mode and Load Settings for more information about mode settings.";
        hsi_dr3_mb 2 rw "25-Ohm output buffer mode control for group hsi_dr3. Refer to I/Os with combined Mode and Load Settings for more details on mode settings.";
        mcbsp2_dr0_mb 2 rw "50-Ohm output buffer mode control for group mcbsp2_dr0. Refer to 50-Ohm output buffer I/Os with combined Mode and Load Settings for more details on mode settings.";
        mcspi4_dr0_mb 2 rw "50-Ohm output buffer mode control for group mcspi4_dr0. Refer to 50-Ohm output buffer I/Os with combined Mode and Load Settings for more details on mode settings.";
        mcspi4_dr1_mb 2 rw "50-Ohm output buffer mode control for group mcspi4_dr1. Refer to 50-Ohm output buffer I/Os with combined Mode and Load Settings for more details on mode settings.";
        sdmmc3_dr0_mb 2 rw "50-Ohm output buffer mode control for group sdmmc3_dr0. Refer to 50-Ohm output buffer I/Os with combined Mode and Load Settings for more details on mode settings.";
        _ 6 mbz;
        spi2_dr0_mb 2 rw "50-Ohm output buffer mode control for group spi2_dr0. Refer to 50-Ohm output buffer I/Os with combined Mode and Load Settings for more details on mode settings.";
    };
    
    register control_smart3io_padconf_1 addr(base, 0x5BC) "SMART3 I/O control 1 Access conditions. Read: unrestricted, Write: unrestricted" {
        spi2_dr1_mb 2 rw "50-Ohm output buffer mode control for group spi2_dr1. Refer to 50-Ohm output buffer I/Os with combined Mode and Load Settings for more details on mode settings.";
        spi2_dr2_mb 2 rw "50-Ohm output buffer mode control for group spi2_dr1. Refer to 50-Ohm output buffer I/Os with combined Mode and Load Settings for more details on mode settings.";
        uart2_dr0_mb 2 rw "50-Ohm output buffer mode control for group spi2_dr1. Refer to 50-Ohm output buffer I/Os with combined Mode and Load Settings for more details on mode settings.";
        uart2_dr1_mb 2 rw "50-Ohm output buffer mode control for group spi2_dr1. Refer to 50-Ohm output buffer I/Os with combined Mode and Load Settings for more details on mode settings.";
        uart4_dr0_mb 2 rw "50-Ohm output buffer mode control for group spi2_dr1. Refer to 50-Ohm output buffer I/Os with combined Mode and Load Settings for more details on mode settings.";
        hsi_dr0_mb 2 rw "25-Ohm output buffer mode control for group hsi_dr0. Refer to I/Os with combined Mode and Load Settings for more details on mode settings.";
        _ 6 mbz;
        gpmc_dr1_mb 2 rw "50-Ohm output buffer mode control for group gpmc_dr1. Refer to 50-Ohm output buffer I/Os with combined Mode and Load Settings for more details on mode settings.";
        _ 4 mbz;
        pdm_dr0_mb 2 rw "50-Ohm output buffer mode control for group pdm_dr0. Refer to 50-Ohm output buffer I/Os with combined Mode and Load Settings for more details on mode settings.";
        fref_dr2_mb 2 rw "50-Ohm output buffer mode control for group fref_dr2. Refer to 50-Ohm output buffer I/Os with combined Mode and Load Settings for more details on mode settings.";
        fref_dr3_mb 2 rw "50-Ohm output buffer mode control for group fref_dr3. Refer to 50-Ohm output buffer I/Os with combined Mode and Load Settings for more details on mode settings.";
        usbb1_dr2_mb 2 rw "25-Ohm output buffer mode control for group usbb1_dr2. Refer to I/Os with combined Mode and Load Settings for more details on mode settings.";
    };
    
    register control_smart3io_padconf_2 addr(base, 0x5C0) "SMART3 I/O control 2 Access conditions. Read: unrestricted, Write: unrestricted" {
        dmic_dr0_lb 1 rw "50-Ohm output buffer load control dmic_dr0_lb Refer to 50-Ohm output buffer I/Os with combined Mode and Load Settings for more details on mode settings.";
        gpio_dr3_lb 1 rw "25-Ohm output buffer load control gpio_dr3_lb Refer to I/Os with combined Mode and Load Settings for more details on mode settings.";
        gpio_dr4_lb 1 rw "25-Ohm output buffer load control gpio_dr4_lb Refer to I/Os with combined Mode and Load Settings for more details on mode settings.";
        gpio_dr5_lb 1 rw "50-Ohm output buffer load control gpio_dr5_lb Refer to 50-Ohm output buffer I/Os with combined Mode and Load Settings for more details on mode settings.";
        gpio_dr6_lb 1 rw "50-Ohm output buffer load control gpio_dr6_lb Refer to 50-Ohm output buffer I/Os with combined Mode and Load Settings for more details on mode settings.";
        hsi_dr1_lb 1 rw "25-Ohm output buffer load control hsi_dr1_lb Refer to I/Os with combined Mode and Load Settings for more details on mode settings.";
        hsi_dr2_lb 1 rw "25-Ohm output buffer load control hsi_dr2_lb Refer to I/Os with combined Mode and Load Settings for more details on mode settings.";
        hsi_dr3_lb 1 rw "25-Ohm output buffer load control hsi_dr3_lb Refer to I/Os with combined Mode and Load Settings for more details on mode settings.";
        mcbsp2_dr0_lb 1 rw "50-Ohm output buffer load control mcbsp2_dr0_lb Refer to 50-Ohm output buffer I/Os with combined Mode and Load Settings for more details on mode settings.";
        mcspi4_dr0_lb 1 rw "50-Ohm output buffer load control mcspi4_dr0_lb Refer to 50-Ohm output buffer I/Os with combined Mode and Load Settings for more details on mode settings.";
        mcspi4_dr1_lb 1 rw "50-Ohm output buffer load control mcspi4_dr1_lb Refer to 50-Ohm output buffer I/Os with combined Mode and Load Settings for more details on mode settings.";
        _ 4 mbz;
        spi2_dr0_lb 1 rw "50-Ohm output buffer load control spi2_dr0_lb Refer to 50-Ohm output buffer I/Os with combined Mode and Load Settings for more details on mode settings.";
        spi2_dr1_lb 1 rw "50-Ohm output buffer load control spi2_dr1_lb Refer to 50-Ohm output buffer I/Os with combined Mode and Load Settings for more details on mode settings.";
        spi2_dr2_lb 1 rw "50-Ohm output buffer load control spi2_dr2_lb Refer to 50-Ohm output buffer I/Os with combined Mode and Load Settings for more details on mode settings.";
        uart2_dr0_lb 1 rw "50-Ohm output buffer load control uart2_dr0_lb Refer to 50-Ohm output buffer I/Os with combined Mode and Load Settings for more details on mode settings.";
        uart2_dr1_lb 1 rw "50-Ohm output buffer load control uart2_dr1_lb Refer to 50-Ohm output buffer I/Os with combined Mode and Load Settings for more details on mode settings.";
        uart4_dr0_lb 1 rw "50-Ohm output buffer load control uart4_dr0_lb Refer to 50-Ohm output buffer I/Os with combined Mode and Load Settings for more details on mode settings.";
        hsi_dr0_lb 1 rw "25-Ohm output buffer load control hsi_dr0 Refer to I/Os with combined Mode and Load Settings for more details on mode settings.";
        fref_dr3_lb 1 rw "50-Ohm output buffer load control fref_dr3 Refer to 50-Ohm output buffer I/Os with combined Mode and Load Settings for more details on mode settings.";
        gpmc_dr1_lb 1 rw "50-Ohm output buffer load control gpmc_dr1 Refer to 50-Ohm output buffer I/Os with combined Mode and Load Settings for more details on mode settings.";
        pdm_dr0_lb 1 rw "50-Ohm output buffer load control pdm_dr0 Refer to 50-Ohm output buffer I/Os with combined Mode and Load Settings for more details on mode settings.";
        fref_dr2_lb 1 rw "50-Ohm output buffer load control fref_dr2 Refer to 50-Ohm output buffer I/Os with combined Mode and Load Settings for more details on mode settings.";
        sdmmc3_dr0_lb 1 rw "50-Ohm output buffer load control sdmmc3_dr0 Refer to 50-Ohm output buffer I/Os with combined Mode and Load Settings for more details on mode settings.";
        usbb1_dr2_lb 1 rw "25-Ohm output buffer load control usbb1_dr2 Refer to I/Os with combined Mode and Load Settings for more details on mode settings.";
        _ 4 mbz;
    };

    constants usbb2_dr1_sr_status width(2) "" {
        USBB2_DR1_SR_0 = 0 "Turn_on time 125ps for Drv8";
        USBB2_DR1_SR_1 = 1 "Turn_on time 500ps for Drv8";
        USBB2_DR1_SR_2 = 2 "Turn_on time 325ps for Drv8";
        USBB2_DR1_SR_3 = 3 "Turn_on time 750ps for Drv8";
    };

    constants usbb2_dr1_i_status width(3) "" {
        USBB2_DR1_I_0 = 0 "for Drv5";
        USBB2_DR1_I_1 = 1 "for Drv6";
        USBB2_DR1_I_2 = 2 "for Drv7";
        USBB2_DR1_I_3 = 3 "for Drv8";
        USBB2_DR1_I_4 = 4 "for Drv9";
        USBB2_DR1_I_5 = 5 "for Drv10";
        USBB2_DR1_I_6 = 6 "for Drv11";
        USBB2_DR1_I_7 = 7 "Drv12";
    };

    constants usbb1_hsic_data_wd_status width(2) "" {
        USBB1_HSIC_DATA_WD_0 = 0 "Pull logic disabled";
        USBB1_HSIC_DATA_WD_1 = 1 "pull up";
        USBB1_HSIC_DATA_WD_2 = 2 "pull down";
        USBB1_HSIC_DATA_WD_3 = 3 "Maintain the previous output value";
    };

    constants usbb1_hsic_data_offmode_wd_enable_status width(1) "" {
        USBB1_HSIC_DATA_OFFMODE_WD_ENABLE_0 = 0 "offmode_wd1";
        USBB1_HSIC_DATA_OFFMODE_WD_ENABLE_1 = 1 "offmode_wd1";
    };
    
    register control_usbb_hsic addr(base, 0x5C4) "USBB HSIC control Access conditions. Read: unrestricted, Write: unrestricted" {
        usbb2_dr1_sr 2 rw type(usbb2_dr1_sr_status) "usbb2 Slew Rate control sr1:sr0";
        usbb2_dr1_i 3 rw type(usbb2_dr1_i_status) "usbb2 Impedence control i2:i0";
        usbb1_dr1_sr 2 rw type(usbb2_dr1_sr_status) "usbb1 Slew Rate control sr1:sr0";
        usbb1_dr1_i 3 rw type(usbb2_dr1_i_status) "usbb1 Impedence control i2:i0";
        usbb1_hsic_data_wd 2 rw type(usbb1_hsic_data_wd_status) "usbb1_hsic_data wd1:wd0";
        usbb1_hsic_strobe_wd 2 rw type(usbb1_hsic_data_wd_status) "usbb1_hsic_strobe wd1:wd0";
        usbb2_hsic_data_wd 2 rw type(usbb1_hsic_data_wd_status) "usbb2_hsic_data wd1:wd0";
        usbb2_hsic_strobe_wd 2 rw type(usbb1_hsic_data_wd_status) "usbb2_hsic_strobe wd1:wd0";
        usbb1_hsic_data_offmode_wd_enable 1 rw type(usbb1_hsic_data_offmode_wd_enable_status) "usbb1_hsic_data_offmode_wd enable";
        usbb1_hsic_data_offmode_wd 2 rw type(usbb1_hsic_data_wd_status) "usbb1_hsic_data_offmode_wd1:wd0";
        usbb1_hsic_strobe_offmode_wd_enable 1 rw type(usbb1_hsic_data_offmode_wd_enable_status) "usbb1_hsic_strobe_offmode_wd enable";
        usbb1_hsic_strobe_offmode_wd 2 rw type(usbb1_hsic_data_wd_status) "usbb1_hsic_strobe_offmode_wd1:wd0";
        usbb2_hsic_data_offmode_wd_enable 1 rw type(usbb1_hsic_data_offmode_wd_enable_status) "usbb2_hsic_data_offmode_wd enable";
        usbb2_hsic_data_offmode_wd 2 rw type(usbb1_hsic_data_wd_status) "usbb2_hsic_data_offmode_wd1:wd0";
        usbb2_hsic_strobe_offmode_wd_enable 1 rw type(usbb1_hsic_data_offmode_wd_enable_status) "usbb2_hsic_strobe_offmode_wd enable";
        usbb2_hsic_strobe_offmode_wd 2 rw type(usbb1_hsic_data_wd_status) "usbb2_hsic_strobe_offmode_wd1:wd0";
        _ 2 mbz;
    };
    
    register control_smart3io_padconf_3 addr(base, 0x5C8) "SMART3 IO control 3 Access conditions. Read: unrestricted, Write: unrestricted" {
        slimbus1_dr0_mb 2 rw "50-Ohm output buffer mode control for group slimbus1_dr0 Refer to 50-Ohm output buffer I/Os with combined Mode and Load Settings for more details on mode settings.";
        slimbus1_dr1_mb 2 rw "50-Ohm output buffer mode control for group slimbus1_dr1 Refer to 50-Ohm output buffer I/Os with combined Mode and Load Settings for more details on mode settings.";
        slimbus2_dr0_mb 2 rw "50-Ohm output buffer mode control for group slimbus2_dr0 Refer to 50-Ohm output buffer I/Os with combined Mode and Load Settings for more details on mode settings.";
        slimbus2_dr1_mb 2 rw "50-Ohm output buffer mode control for group slimbus2_dr1 Refer to 50-Ohm output buffer I/Os with combined Mode and Load Settings for more details on mode settings.";
        slimbus2_dr2_mb 2 rw "50-Ohm output buffer mode control for group slimbus2_dr2 Refer to 50-Ohm output buffer I/Os with combined Mode and Load Settings for more details on mode settings.";
        slimbus2_dr3_mb 2 rw "50-Ohm output buffer mode control for group slimbus2_dr3 Refer to 50-Ohm output buffer I/Os with combined Mode and Load Settings for more details on mode settings.";
        slimbus1_dr0_lb 1 rw "50-Ohm output buffer load control for group slimbus1_dr0 Refer to 50-Ohm output buffer I/Os with combined Mode and Load Settings for more details on mode settings.";
        slimbus2_dr1_lb 1 rw "50-Ohm output buffer load control for group slimbus2_dr1 Refer to 50-Ohm output buffer I/Os with combined Mode and Load Settings for more details on mode settings.";
        slimbus2_dr2_lb 1 rw "50-Ohm output buffer load control for group slimbus2_dr2 Refer to 50-Ohm output buffer I/Os with combined Mode and Load Settings for more details on mode settings.";
        slimbus2_dr3_lb 1 rw "50-Ohm output buffer load control for group slimbus2_dr3 Refer to 50-Ohm output buffer I/Os with combined Mode and Load Settings for more details on mode settings.";
        slimbus1_dr1_lb 1 rw "50-Ohm output buffer load control for group slimbus1_dr1 Refer to 50-Ohm output buffer I/Os with combined Mode and Load Settings for more details on mode settings.";
        slimbus2_dr0_lb 1 rw "50-Ohm output buffer load control for group slimbus2_dr0 Refer to 50-Ohm output buffer I/Os with combined Mode and Load Settings for more details on mode settings.";
        _ 14 mbz;
    };

    constants dpm_dr1_ds_status width(1) "" {
        DPM_DR1_DS_0 = 0 "50 Ohm";
        DPM_DR1_DS_1 = 1 "25 Ohm";
    };
    
    register control_smart2io_padconf_2 addr(base, 0x5CC) "SMART2 IO control 2 Access conditions. Read: unrestricted, Write: unrestricted" {
        dpm_dr1_ds 1 rw type(dpm_dr1_ds_status) "Drive strength control bit for group dpm_dr1";
        dpm_dr2_ds 1 rw type(dpm_dr1_ds_status) "Drive strength control bit for group dpm_dr2";
        dpm_dr3_ds 1 rw type(dpm_dr1_ds_status) "Drive strength control bit for group dpm_dr3";
        gpio_dr10_ds 1 rw type(dpm_dr1_ds_status) "Drive strength control bit for group gpio_dr10";
        hsi2_dr0_ds 1 rw type(dpm_dr1_ds_status) "Drive strength control bit for group hsi2_dr0";
        hsi2_dr1_ds 1 rw type(dpm_dr1_ds_status) "Drive strength control bit for group hsi2_dr1";
        hsi2_dr2_ds 1 rw type(dpm_dr1_ds_status) "Drive strength control bit for group hsi2_dr2";
        sdmmc3_dr0_ds 1 rw type(dpm_dr1_ds_status) "Drive strength control bit for group sdmmc3_dr0";
        sdmmc4_dr0_ds 1 rw type(dpm_dr1_ds_status) "Drive strength control bit for group sdmmc4_dr0";
        sdmmc4_dr1_ds 1 rw type(dpm_dr1_ds_status) "Drive strength control bit for group sdmmc4_dr1";
        spi3_dr0_ds 1 rw type(dpm_dr1_ds_status) "Drive strength control bit for group spi3_dr0";
        spi3_dr1_ds 1 rw type(dpm_dr1_ds_status) "Drive strength control bit for group spi3_dr1";
        uart3_dr2_ds 1 rw type(dpm_dr1_ds_status) "Drive strength control bit for group uart3_dr2";
        uart3_dr3_ds 1 rw type(dpm_dr1_ds_status) "Drive strength control bit for group uart3_dr3";
        uart3_dr4_ds 1 rw type(dpm_dr1_ds_status) "Drive strength control bit for group uart3_dr4";
        uart3_dr5_ds 1 rw type(dpm_dr1_ds_status) "Drive strength control bit for group uart3_dr5";
        usba0_dr0_ds 1 rw type(dpm_dr1_ds_status) "Drive strength control bit for group usba0_dr0";
        usba0_dr1_ds 1 rw type(dpm_dr1_ds_status) "Drive strength control bit for group usba0_dr1";
        usba_dr2_ds 1 rw type(dpm_dr1_ds_status) "Drive strength control bit for group usba_dr2";
        usbb2_dr0_ds 1 rw type(dpm_dr1_ds_status) "Drive strength control bit for group usbb2_dr0";
        usbb1_dr0_ds 1 rw type(dpm_dr1_ds_status) "Drive strength control bit for group usbb1_dr0";
        _ 11 mbz;
    };
    
    register control_smart1io_padconf_2 addr(base, 0x5D0) "SMART1 IO control 2 Access conditions. Read: unrestricted, Write: unrestricted" {
        kpd_dr0_sc 2 rw "Slew rate control for group kpd_dr0 Refer to , section Low Speed I/Os Combined Slew Rate vs TL Length and Load Settings for more details on SR settings.";
        kpd_dr1_sc 2 rw "Slew rate control for group kpd_dr1 Refer to , section Low Speed I/Os Combined Slew Rate vs TL Length and Load Settings for more details on SR settings.";
        kpd_dr2_sc 2 rw "Slew rate control for group kpd_dr2 Refer to , section Low Speed I/Os Combined Slew Rate vs TL Length and Load Settings for more details on SR settings.";
        kpd_dr3_sc 2 rw "Slew rate control for group kpd_dr3 Refer to , section Low Speed I/Os Combined Slew Rate vs TL Length and Load Settings for more details on SR settings.";
        hdq_dr0_sc 2 rw "Slew rate control for group hdq_dr0 Refer to , section Low Speed I/Os Combined Slew Rate vs TL Length and Load Settings for more details on SR settings.";
        _ 22 mbz;
    };
    
    register control_smart1io_padconf_3 addr(base, 0x5D4) "SMART1 IO control 3 Access conditions. Read: unrestricted, Write: unrestricted" {
        kpd_dr0_lb 2 rw type(abe_dr0_lb_status) "Load control for group kpd_dr0";
        kpd_dr1_lb 2 rw type(abe_dr0_lb_status) "Load control for group kpd_dr1";
        kpd_dr2_lb 2 rw type(abe_dr0_lb_status) "Load control for group kpd_dr2";
        kpd_dr3_lb 2 rw type(abe_dr0_lb_status) "Load control for group kpd_dr3";
        hdq_dr0_lb 2 rw type(abe_dr0_lb_status) "Load control for group hdq_dr0";
        _ 22 mbz;
    };

    constants c2c_dr0_lb0_status width(1) "" {
        C2C_DR0_LB0_0 = 0 "sdmmc2 1.2V and 1.8V / gpmc 1.2V";
        C2C_DR0_LB0_1 = 1 "c2c 1.2V and 1.8V / gpmc 1.8V";
    };

    constants cmosen_c2c_0_frm_ctrl_status width(1) "" {
        CMOSEN_C2C_0_FRM_CTRL_0 = 0 "lvcmos rx disable";
        CMOSEN_C2C_0_FRM_CTRL_1 = 1 "lvcmos rx enable";
    };

    constants c2c_vref_ccap_status width(2) "" {
        C2C_VREF_CCAP_0 = 0 "No capacitor connected";
        C2C_VREF_CCAP_1 = 1 "Capacitor between BIAS2 and VSS";
        C2C_VREF_CCAP_3 = 3 "Capacitor between BIAS2 and VDDS as well as BIAS2 and VSS";
        C2C_VREF_CCAP_2 = 2 "Capacitor between BIAS2 and VDDS";
    };

    constants c2c_int_vref_en_status width(1) "" {
        C2C_INT_VREF_EN_0 = 0 "Disabled";
        C2C_INT_VREF_EN_1 = 1 "Enabled";
    };
    
    register control_c2cio_padconf_0 addr(base, 0x5D8) "C2C IO control 0 Access conditions. Read: unrestricted, Write: unrestricted" {
        c2c_dr0_lb0 1 rw type(c2c_dr0_lb0_status) "Mode selection bit for group c2c_dr0_LB0";
        c2c_dr1_lb0 1 rw type(c2c_dr0_lb0_status) "Mode selection bit for group c2c_dr1_LB0";
        c2c_dr2_lb0 1 rw type(c2c_dr0_lb0_status) "Mode selection bit for group c2c_dr2_LB0";
        gpio_dr0_lb0 1 rw type(c2c_dr0_lb0_status) "Mode selection bit for group gpio_dr0_LB0";
        gpio_dr1_lb0 1 rw type(c2c_dr0_lb0_status) "Mode selection bit for group gpio_dr1_LB0";
        gpio_dr2_lb0 1 rw type(c2c_dr0_lb0_status) "Mode selection bit for group gpio_dr2_LB0";
        gpmc_dr0_lb0 1 rw type(c2c_dr0_lb0_status) "Mode selection bit for group gpmc_dr0_LB0";
        gpmc_dr11_lb0 1 rw type(c2c_dr0_lb0_status) "Mode selection bit for group gpmc_dr11_LB0";
        gpmc_dr10_lb0 1 rw type(c2c_dr0_lb0_status) "Mode selection bit for group gpmc_dr10_LB0";
        gpmc_dr2_lb0 1 rw type(c2c_dr0_lb0_status) "Mode selection bit for group gpmc_dr2_LB0";
        gpmc_dr4_lb0 1 rw type(c2c_dr0_lb0_status) "Mode selection bit for group gpmc_dr4_LB0";
        gpmc_dr5_lb0 1 rw type(c2c_dr0_lb0_status) "Mode selection bit for group gpmc_dr5_LB0";
        gpmc_dr6_lb0 1 rw type(c2c_dr0_lb0_status) "Mode selection bit for group gpmc_dr6_LB0";
        gpmc_dr7_lb0 1 rw type(c2c_dr0_lb0_status) "Mode selection bit for group gpmc_dr7_LB0";
        gpmc_dr8_lb0 1 rw type(c2c_dr0_lb0_status) "Mode selection bit for group gpmc_dr8_LB0";
        gpmc_dr9_lb0 1 rw type(c2c_dr0_lb0_status) "Mode selection bit for group gpmc_dr9_LB0";
        kpd_dr4_lb0 1 rw type(c2c_dr0_lb0_status) "Mode selection bit for group kpd_dr4_LB0";
        kpd_dr5_lb0 1 rw type(c2c_dr0_lb0_status) "Mode selection bit for group kpd_dr5_LB0";
        sdmmc2_dr0_lb0 1 rw type(c2c_dr0_lb0_status) "Mode selection bit for group sdmmc2_dr0_LB0";
        cmosen_c2c_0_frm_ctrl 1 rw type(cmosen_c2c_0_frm_ctrl_status) "lvcmos receiver enable in 1.2V mode for group c2c_0";
        cmosen_c2c_1_frm_ctrl 1 rw type(cmosen_c2c_0_frm_ctrl_status) "lvcmos receiver enable in 1.2V mode for group c2c_1";
        c2c_vref_ccap 2 rw type(c2c_vref_ccap_status) "Selection for coupling cap connection on ivref pad";
        c2c_int_vref_en 1 rw type(c2c_int_vref_en_status) "Internal VREF enable for C2C pads in manual mode (if both manual and auto mode is enabled then manual mode takes the priority)";
        c2c_int_vref_auto_en 1 rw type(c2c_int_vref_en_status) "Internal VREF enable for C2C pads in auto mode (if both manual and auto mode is enabled then manual mode takes the priority)";
        _ 7 mbz;
    };

    constants pbiaslite1_hiz_mode_status width(1) "" {
        PBIASLITE1_HIZ_MODE_0 = 0 "PBIAS1 is in normal operation mode.";
        PBIASLITE1_HIZ_MODE_1 = 1 "PBIAS1 output is in high-impedance state.";
    };

    constants pbiaslite1_supply_hi_out_status width(1) "" {
        PBIASLITE1_SUPPLY_HI_OUT_0_r = 0 "SIM_VDDS = 1.8 V";
        PBIASLITE1_SUPPLY_HI_OUT_1_r = 1 "SIM_VDDS = 3 V";
    };

    constants pbiaslite1_vmode_error_status width(1) "" {
        PBIASLITE1_VMODE_ERROR_0_r = 0 "VMODE level is the same as SUPPLY_HI_OUT.";
        PBIASLITE1_VMODE_ERROR_1_r = 1 "VMODE level is not the same as SUPPLY_HI_OUT.";
    };

    constants pbiaslite1_pwrdnz_status width(1) "" {
        PBIASLITE1_PWRDNZ_0 = 0 "Software must clear this bit when SIM_VDDS changes.";
        PBIASLITE1_PWRDNZ_1 = 1 "Software must set this bit only when SIM_VDDS is stable.";
    };

    constants mmc1_pwrdnz_status width(1) "" {
        MMC1_PWRDNZ_0 = 0 "Software must clear this bit when SDMMC1_VDDS changes.";
        MMC1_PWRDNZ_1 = 1 "Software must set this bit only when SDMMC1_VDDS is stable.";
    };

    constants mmc1_pbiaslite_hiz_mode_status width(1) "" {
        MMC1_PBIASLITE_HIZ_MODE_0 = 0 "PBIAS in normal operation mode";
        MMC1_PBIASLITE_HIZ_MODE_1 = 1 "PBIAS output is in high impedence state";
    };

    constants mmc1_pbiaslite_supply_hi_out_status width(1) "" {
        MMC1_PBIASLITE_SUPPLY_HI_OUT_0_r = 0 "SDMMC1_VDDS = 1.8 V";
        MMC1_PBIASLITE_SUPPLY_HI_OUT_1_r = 1 "SDMMC1_VDDS = 3 V";
    };

    constants mmc1_pbiaslite_vmode_error_status width(1) "" {
        MMC1_PBIASLITE_VMODE_ERROR_0_r = 0 "VMODE level is same as SUPPLY_HI_OUT";
        MMC1_PBIASLITE_VMODE_ERROR_1_r = 1 "VMODE level is not same as SUPPLY_HI_OUT";
    };
    
    register control_pbiaslite addr(base, 0x600) "PBIASLITE control Access conditions. Read: unrestricted, Write: unrestricted" {
        pbiaslite1_hiz_mode 1 rw type(pbiaslite1_hiz_mode_status) "HIZ MODE of the PBIASLITE1";
        pbiaslite1_supply_hi_out 1 ro type(pbiaslite1_supply_hi_out_status) "SUPPLY_HI_OUT from PBIASLITE1";
        pbiaslite1_vmode_error 1 ro type(pbiaslite1_vmode_error_status) "VMODE ERROR from PBIASLITE1";
        pbiaslite1_pwrdnz 1 rw type(pbiaslite1_pwrdnz_status) "PWRDNZ control to PBIASLITE1This bit is used to protect the PBIAS1 cell (associated with the gpio_wk0-gpio_wk2 pads I/O cell) when SIM_VDDS is not stable. .";
        pbiaslite1_vmode 1 rw type(pbiaslite1_supply_hi_out_status) "VMODE control to PBIASLITE1";
        mmc1_pwrdnz 1 rw type(mmc1_pwrdnz_status) "PWRDNZ control to MMC1 IOThis bit is used to protect the MMC1 I/O cell when SDMMC1_VDDS is not stable. .";
        mmc1_pbiaslite_hiz_mode 1 rw type(mmc1_pbiaslite_hiz_mode_status) "HIZ_MODE from MMC1 PBIASLITE";
        mmc1_pbiaslite_supply_hi_out 1 ro type(mmc1_pbiaslite_supply_hi_out_status) "SUPPLY_HI_OUT from MMC1 PBIASLITE";
        mmc1_pbiaslite_vmode_error 1 ro type(mmc1_pbiaslite_vmode_error_status) "VMODE ERROR from MMC1 PBIASLITE";
        mmc1_pbiaslite_pwrdnz 1 rw type(mmc1_pwrdnz_status) "PWRDNZ control to MMC1 PBIASLITEThis bit is used to protect the MMC1_PBIAS cell (MMC1 I/O cell associated) when SDMMC1_VDDS is not stable. .";
        mmc1_pbiaslite_vmode 1 rw type(mmc1_pbiaslite_supply_hi_out_status) "VMODE control to MMC1 PBIASLITE";
        usbc1_icusb_pwrdnz 1 rw type(pbiaslite1_pwrdnz_status) "PWRDNZ control to USBC1 IOThis bit is used to protect the USBC1_ICUSB I/O cell when SIM_VDDS is not stable. .";
        _ 20 mbz;
    };

    constants i2c4_sda_glfenb_status width(1) "" {
        I2C4_SDA_GLFENB_0 = 0 "Disable i2c4 glitch free operation";
        I2C4_SDA_GLFENB_1 = 1 "Enable i2c4 glitch free operation";
    };

    constants i2c4_sda_load_bits_status width(2) "" {
        I2C4_SDA_LOAD_BITS_0 = 0 "4.5 kOhm (5-15 pF) / 1.66 kOhm (5-12 pF)";
        I2C4_SDA_LOAD_BITS_1 = 1 "2.1 kOhm (15-50 pF) / 920 Ohm (12-25 pF)";
        I2C4_SDA_LOAD_BITS_2 = 2 "860 Ohm (50-150 pF) / 500 Ohm (25-50 pF)";
        I2C4_SDA_LOAD_BITS_3 = 3 "N.A / 300 Ohm (50-80 pF)";
    };

    constants i2c4_sda_pullupresx_status width(1) "" {
        I2C4_SDA_PULLUPRESX_0 = 0 "Enable Internal Pull up resistor";
        I2C4_SDA_PULLUPRESX_1 = 1 "Disable Internal Pull up resisitor";
    };
    
    register control_i2c_0 addr(base, 0x604) "I2C pads control 0 Access conditions. Read: unrestricted, Write: unrestricted" {
        i2c4_sda_glfenb 1 rw type(i2c4_sda_glfenb_status) "Active_high glitch free operation enable pin for i2c4 receiver";
        i2c4_sda_load_bits 2 rw type(i2c4_sda_load_bits_status) "Internal Pull up resistor in Fast or Standard mode / High_speed mode for i2c4";
        i2c4_sda_pullupresx 1 rw type(i2c4_sda_pullupresx_status) "Active_low internal pull_up resistor enabled for i2c4";
        i2c3_sda_glfenb 1 rw type(i2c4_sda_glfenb_status) "Active_high glitch free operation enable pin for i2c3 receiver";
        i2c3_sda_load_bits 2 rw type(i2c4_sda_load_bits_status) "Internal Pull up resistor in Fast or Standard mode / High_speed mode for i2c3";
        i2c3_sda_pullupresx 1 rw type(i2c4_sda_pullupresx_status) "Active_low internal pull_up resistor enabled for i2c3";
        i2c2_sda_glfenb 1 rw type(i2c4_sda_glfenb_status) "Active_high glitch free operation enable pin for i2c2 receiver";
        i2c2_sda_load_bits 2 rw type(i2c4_sda_load_bits_status) "Internal Pull up resistor in Fast or Standard mode / High_speed mode for i2c2";
        i2c2_sda_pullupresx 1 rw type(i2c4_sda_pullupresx_status) "Active_low internal pull_up resistor enabled for i2c2";
        i2c1_sda_glfenb 1 rw type(i2c4_sda_glfenb_status) "Active_high glitch free operation enable pin for i2c1 receiver";
        i2c1_sda_load_bits 2 rw type(i2c4_sda_load_bits_status) "Internal Pull up resistor in Fast or Standard mode / High_speed mode for i2c1";
        i2c1_sda_pullupresx 1 rw type(i2c4_sda_pullupresx_status) "Active_low internal pull_up resistor enabled for i2c1";
        i2c4_scl_glfenb 1 rw type(i2c4_sda_glfenb_status) "Active_high glitch free operation enable pin for i2c4 receiver";
        i2c4_scl_load_bits 2 rw type(i2c4_sda_load_bits_status) "Internal Pull up resistor in Fast or Standard mode / High_speed mode for i2c4";
        i2c4_scl_pullupresx 1 rw type(i2c4_sda_pullupresx_status) "Active_low internal pull_up resistor enabled for i2c4";
        i2c3_scl_glfenb 1 rw type(i2c4_sda_glfenb_status) "Active_high glitch free operation enable pin for i2c3 receiver";
        i2c3_scl_load_bits 2 rw type(i2c4_sda_load_bits_status) "Internal Pull up resistor in Fast or Standard mode / High_speed mode for i2c3";
        i2c3_scl_pullupresx 1 rw type(i2c4_sda_pullupresx_status) "Active_low internal pull_up resistor enabled for i2c3";
        i2c2_scl_glfenb 1 rw type(i2c4_sda_glfenb_status) "Active_high glitch free operation enable pin for i2c2 receiver";
        i2c2_scl_load_bits 2 rw type(i2c4_sda_load_bits_status) "Internal Pull up resistor in Fast or Standard mode / High_speed mode for i2c2";
        i2c2_scl_pullupresx 1 rw type(i2c4_sda_pullupresx_status) "Active_low internal pull_up resistor enabled for i2c2";
        i2c1_scl_glfenb 1 rw type(i2c4_sda_glfenb_status) "Active_high glitch free operation enable pin for i2c1 receiver";
        i2c1_scl_load_bits 2 rw type(i2c4_sda_load_bits_status) "Internal Pull up resistor in Fast or Standard mode / High_speed mode for i2c1";
        i2c1_scl_pullupresx 1 rw type(i2c4_sda_pullupresx_status) "Active_low internal pull_up resistor enabled for i2c1";
    };

    constants camerarx_csi22_laneenable2_status width(1) "" {
        CAMERARX_CSI22_LANEENABLE2_0 = 0 "Lane module disabled";
        CAMERARX_CSI22_LANEENABLE2_1 = 1 "Lane module enabled";
    };

    constants camerarx_csi22_ctrlclken_status width(1) "" {
        CAMERARX_CSI22_CTRLCLKEN_0 = 0 "Disable for CTRLCLK";
        CAMERARX_CSI22_CTRLCLKEN_1 = 1 "Active high enable for CTRLCLK";
    };

    constants camerarx_csi22_cammode_status width(2) "" {
        CAMERARX_CSI22_CAMMODE_0 = 0 "DPHY mode (CSI2 mode)";
        CAMERARX_CSI22_CAMMODE_1 = 1 "Data/Strobe Transmission Format (CCP2 mode)";
        CAMERARX_CSI22_CAMMODE_2 = 2 "Data/Clock Transmission Format (CCP2/CSI1 mode)";
        CAMERARX_CSI22_CAMMODE_3 = 3 "GPI mode (Parallel interface mode)";
    };
    
    register control_camera_rx addr(base, 0x608) "CAMERA RX control Access conditions. Read: unrestricted, Write: unrestricted" {
        camerarx_csi22_laneenable2 1 rw type(camerarx_csi22_laneenable2_status) "CSI22 CAMERARX lane 2 enable (CSI22_DX2, CSI22_DY2)";
        camerarx_csi22_laneenable1 1 rw type(camerarx_csi22_laneenable2_status) "CSI22 CAMERARX lane 1 enable (CSI22_DX1, CSI22_DY1)";
        camerarx_csi22_laneenable0 1 rw type(camerarx_csi22_laneenable2_status) "CSI22 CAMERARX lane 0 enable (CSI22_DX0, CSI22_DY0)";
        camerarx_csi21_laneenable4 1 rw type(camerarx_csi22_laneenable2_status) "CSI21 CAMERARX lane 4 enable (CSI21_DX4, CSI21_DY4)";
        camerarx_csi21_laneenable3 1 rw type(camerarx_csi22_laneenable2_status) "CSI21 CAMERARX lane 3 enable (CSI21_DX3, CSI21_DY3)";
        camerarx_csi21_laneenable2 1 rw type(camerarx_csi22_laneenable2_status) "CSI21 CAMERARX lane 2 enable (CSI21_DX2, CSI21_DY2)";
        camerarx_csi21_laneenable1 1 rw type(camerarx_csi22_laneenable2_status) "CSI21 CAMERARX lane 1 enable (CSI21_DX1, CSI21_DY1)";
        camerarx_csi21_laneenable0 1 rw type(camerarx_csi22_laneenable2_status) "CSI21 CAMERARX lane 0 enable (CSI21_DX0, CSI21_DY0)";
        _ 2 mbz;
        camerarx_csi22_ctrlclken 1 rw type(camerarx_csi22_ctrlclken_status) "CSI22 CAMERARX clock enable control";
        camerarx_csi22_cammode 2 rw type(camerarx_csi22_cammode_status) "CSI22 CAMERARX CAMMODE control";
        camerarx_csi21_ctrlclken 1 rw type(camerarx_csi22_ctrlclken_status) "CSI21 CAMERARX clock enable control";
        camerarx_csi21_cammode 2 rw type(camerarx_csi22_cammode_status) "CSI21 CAMERARX CAMMODE control";
        _ 16 mbz;
    };

    constants avdac_acen_status width(1) "" {
        AVDAC_ACEN_0 = 0 "AC coupling disable";
        AVDAC_ACEN_1 = 1 "AC coupling enable";
    };

    constants avdac_tvoutbypass_status width(1) "" {
        AVDAC_TVOUTBYPASS_0 = 0 "Video buffer is not bypassed";
        AVDAC_TVOUTBYPASS_1 = 1 "Video buffer is bypassed";
    };

    constants avdac_inputinv_status width(1) "" {
        AVDAC_INPUTINV_0 = 0 "Data inversion is disabled.";
        AVDAC_INPUTINV_1 = 1 "Data inversion is enabled.";
    };
    
    register control_avdac addr(base, 0x60C) "AVDAC control Access conditions. Read: unrestricted, Write: unrestricted" {
        avdac_acen 1 rw type(avdac_acen_status) "AC coupling enable";
        avdac_tvoutbypass 1 rw type(avdac_tvoutbypass_status) "TV OUT bypass signal";
        avdac_inputinv 1 rw type(avdac_inputinv_status) "Inversion control for DAC input data - din[9:0]";
        _ 16 mbz;
        _ 1 mbz;
        _ 12 mbz;
    };

    constants mmc2_feedback_clk_sel_status width(1) "" {
        MMC2_FEEDBACK_CLK_SEL_0 = 0 "Clock feed_back at PAD level";
        MMC2_FEEDBACK_CLK_SEL_1 = 1 "Clock feed_back at board level";
    };
    
    register control_mmc2 addr(base, 0x614) "MMC2 control Access conditions. Read: unrestricted, Write: unrestricted" {
        mmc2_feedback_clk_sel 1 rw type(mmc2_feedback_clk_sel_status) "Feed_back clock select";
        _ 31 mbz;
    };

    constants dsi1_pipd_status width(5) "" {
        DSI1_PIPD_0 = 0 "Pull down enabled";
        DSI1_PIPD_1 = 1 "Pull down disabled";
    };
    
    register control_dsiphy addr(base, 0x618) "DSIPHY control Access conditions. Read: unrestricted, Write: unrestricted" {
        dsi2_laneenable 3 rw type(camerarx_csi22_laneenable2_status) "DSI2 Lane Enable For each bit, the following settings are valid:[31] DSI2 lane 2 enable . [30] DSI2 lane 1 enable . [29] DSI2 lane 0 enable .";
        dsi1_laneenable 5 rw type(camerarx_csi22_laneenable2_status) "DSI1 Lane Enable For each bit, the following settings are valid:[28] DSI1 lane 4 enable . [27] DSI1 lane 3 enable . [26] DSI1 lane 2 enable . [25] DSI1 lane 1 enable . [24] DSI1 lane 0 enable .";
        dsi1_pipd 5 rw type(dsi1_pipd_status) "DSI1 PD Enable For each bit, the following settings are valid:[23] DSI1 lane 4 PD enable . [22] DSI1 lane 3 PD enable . [21] DSI1 lane 0 PD enable . [20] DSI1 lane 2 PD enable . [19] DSI1 lane 1 PD enable .";
        dsi2_pipd 5 rw type(dsi1_pipd_status) "DSI2 PD Enable For each bit, the following settings are valid:[18] ] RESERVED (Unused) . [17] ] RESERVED (Unused) . [16] ] DSI2 lane 0 PD enable . [15] ] DSI2 lane 2 PD enable . [14] ] DSI2 lane 1 PD enable .";
        _ 14 mbz;
    };

    constants albctrlrx_fsx_status width(1) "" {
        ALBCTRLRX_FSX_0 = 0 "PIFSR is used";
        ALBCTRLRX_FSX_1 = 1 "PIFSX is used instead of PIFSR 4pin mode";
    };

    constants albctrlrx_clkx_status width(1) "" {
        ALBCTRLRX_CLKX_0 = 0 "PICLKR is used";
        ALBCTRLRX_CLKX_1 = 1 "PICLKX is used instead of PICLKR 4pin mode";
    };
    
    register control_mcbsplp addr(base, 0x61C) "McBSPLP control Access conditions. Read: unrestricted, Write: unrestricted" {
        albctrlrx_fsx 1 rw type(albctrlrx_fsx_status) "Analog loop_back control for FSX. This bit is programmable for only the McBSP4 instance. For the remaining three McBSP instances, this bit is hardwired to 1.";
        albctrlrx_clkx 1 rw type(albctrlrx_clkx_status) "Analog loop_back control for CLKX. This bit is programmable for only the McBSP4 instance. For the remaining three McBSP instances, this bit is hardwired to 1.";
        _ 30 mbz;
    };

    constants usb2phy_autoresume_en_status width(1) "" {
        USB2PHY_AUTORESUME_EN_0 = 0 "Disable autoresume";
        USB2PHY_AUTORESUME_EN_1 = 1 "Enable autoresume";
    };

    constants usb2phy_dischgdet_status width(1) "" {
        USB2PHY_DISCHGDET_0 = 0 "Charger detect function enabled";
        USB2PHY_DISCHGDET_1 = 1 "Charger detect function disabled";
    };

    constants usb2phy_gpiomode_status width(1) "" {
        USB2PHY_GPIOMODE_0 = 0 "USB mode enabled";
        USB2PHY_GPIOMODE_1 = 1 "GPIO mode enabled";
    };

    constants usb2phy_chg_det_ext_ctl_status width(1) "" {
        USB2PHY_CHG_DET_EXT_CTL_0 = 0 "Charger detect internal state-machine used";
        USB2PHY_CHG_DET_EXT_CTL_1 = 1 "Charge detect state-machine is bypassed";
    };

    constants usb2phy_rdm_pd_chgdet_en_status width(1) "" {
        USB2PHY_RDM_PD_CHGDET_EN_0 = 0 "PD disabled";
        USB2PHY_RDM_PD_CHGDET_EN_1 = 1 "PD enabled";
    };

    constants usb2phy_rdp_pu_chgdet_en_status width(1) "" {
        USB2PHY_RDP_PU_CHGDET_EN_0 = 0 "PU disabled";
        USB2PHY_RDP_PU_CHGDET_EN_1 = 1 "PU enabled";
    };

    constants usb2phy_chg_vsrc_en_status width(1) "" {
        USB2PHY_CHG_VSRC_EN_0 = 0 "Disable VSRC drive on DP";
        USB2PHY_CHG_VSRC_EN_1 = 1 "Drives VSRC 600 mV on DP line";
    };

    constants usb2phy_chg_isink_en_status width(1) "" {
        USB2PHY_CHG_ISINK_EN_0 = 0 "Disable the ISINK on DM";
        USB2PHY_CHG_ISINK_EN_1 = 1 "Enables the ISINK (100 A) on DM line";
    };

    constants usb2phy_chg_det_status_status width(3) "" {
        USB2PHY_CHG_DET_STATUS_0_r = 0 "Wait state";
        USB2PHY_CHG_DET_STATUS_1_r = 1 "No contact";
        USB2PHY_CHG_DET_STATUS_2_r = 2 "PS/2";
        USB2PHY_CHG_DET_STATUS_3_r = 3 "Unknown error";
        USB2PHY_CHG_DET_STATUS_4_r = 4 "Dedicated charger";
        USB2PHY_CHG_DET_STATUS_5_r = 5 "HOST charger";
        USB2PHY_CHG_DET_STATUS_6_r = 6 "PC";
        USB2PHY_CHG_DET_STATUS_7_r = 7 "Interrupt";
    };

    constants usb2phy_chg_det_dm_comp_status width(1) "" {
        USB2PHY_CHG_DET_DM_COMP_0_r = 0 "DM line is below 0.75V to 0.95V";
        USB2PHY_CHG_DET_DM_COMP_1_r = 1 "DM line is above 0.75V to 0.95V";
    };

    constants usb2phy_chg_det_dp_comp_status width(1) "" {
        USB2PHY_CHG_DET_DP_COMP_0_r = 0 "DP line is below 0.75V to 0.95V";
        USB2PHY_CHG_DET_DP_COMP_1_r = 1 "DP line is above 0.75V to 0.95V";
    };

    constants usb2phy_datadet_status width(1) "" {
        USB2PHY_DATADET_0_r = 0 "DM line is below 0.25V to 0.4V";
        USB2PHY_DATADET_1_r = 1 "DM line is above 0.25V to 0.4V";
    };

    constants usb2phy_sinkondp_status width(1) "" {
        USB2PHY_SINKONDP_0 = 0 "Default value";
        USB2PHY_SINKONDP_1 = 1 "Enables the ISINK on DP instead of DM";
    };

    constants usb2phy_srcondm_status width(1) "" {
        USB2PHY_SRCONDM_0 = 0 "Default value";
        USB2PHY_SRCONDM_1 = 1 "Enable the VSRC on DM instead of DP";
    };

    constants usb2phy_restartchgdet_status width(1) "" {
        USB2PHY_RESTARTCHGDET_0 = 0 "Default value";
        USB2PHY_RESTARTCHGDET_1 = 1 "A high pulse of 1 msec causes the charger detect to restart on negative edge of restartchgdet";
    };

    constants usb2phy_chgdetdone_status width(1) "" {
        USB2PHY_CHGDETDONE_0_r = 0 "Charger detection protocol is not over";
        USB2PHY_CHGDETDONE_1_r = 1 "Charger detection protocol is over";
    };

    constants usb2phy_chgdetected_status width(1) "" {
        USB2PHY_CHGDETECTED_0_r = 0 "Charger not detected";
        USB2PHY_CHGDETECTED_1_r = 1 "Charger detected";
    };

    constants usb2phy_mcpcpuen_status width(1) "" {
        USB2PHY_MCPCPUEN_0 = 0 "Disable the MCPC pull up";
        USB2PHY_MCPCPUEN_1 = 1 "Enable the 4.7K to10K pull up on receive line DP when datapolarityn is 0 and DM when datapolarityn is 1";
    };

    constants usb2phy_mcpcmodeen_status width(1) "" {
        USB2PHY_MCPCMODEEN_0 = 0 "Disable MCPC mode";
        USB2PHY_MCPCMODEEN_1 = 1 "Enable MCPC mode";
    };

    constants usb2phy_utmiresetdone_status width(1) "" {
        USB2PHY_UTMIRESETDONE_0_r = 0 "UTMI FSMs are in reset";
        USB2PHY_UTMIRESETDONE_1_r = 1 "UTMI FSMs are out of reset";
    };

    constants usb2phy_txbitstuffenable_status width(1) "" {
        USB2PHY_TXBITSTUFFENABLE_0 = 0 "DATAOUT [7";
        USB2PHY_TXBITSTUFFENABLE_1 = 1 "DATAOUT [7";
    };

    constants usb2phy_datapolarityn_status width(1) "" {
        USB2PHY_DATAPOLARITYN_0 = 0 "DP functionality is on DP and DM funcationality is on DM";
        USB2PHY_DATAPOLARITYN_1 = 1 "DP functionality is on DM and DM functionality is on DP";
    };
    
    register control_usb2phycore addr(base, 0x620) "USB2PHYCORE control Access conditions. Read: unrestricted, Write: unrestricted" {
        usb2phy_autoresume_en 1 rw type(usb2phy_autoresume_en_status) "Auto resume enable";
        usb2phy_dischgdet 1 rw type(usb2phy_dischgdet_status) "Disable charger detect";
        usb2phy_gpiomode 1 rw type(usb2phy_gpiomode_status) "GPIO mode";
        usb2phy_chg_det_ext_ctl 1 rw type(usb2phy_chg_det_ext_ctl_status) "Charge detect external control";
        usb2phy_rdm_pd_chgdet_en 1 rw type(usb2phy_rdm_pd_chgdet_en_status) "DM Pull down control";
        usb2phy_rdp_pu_chgdet_en 1 rw type(usb2phy_rdp_pu_chgdet_en_status) "DP Pull up control";
        usb2phy_chg_vsrc_en 1 rw type(usb2phy_chg_vsrc_en_status) "VSRC enable on DP line-Host charger case";
        usb2phy_chg_isink_en 1 rw type(usb2phy_chg_isink_en_status) "ISINK enable on DM line-Host charger case";
        usb2phy_chg_det_status 3 ro type(usb2phy_chg_det_status_status) "Status of charger detection";
        usb2phy_chg_det_dm_comp 1 ro type(usb2phy_chg_det_dm_comp_status) "Output of the comparator on DM during the resistor host detect protocol";
        usb2phy_chg_det_dp_comp 1 ro type(usb2phy_chg_det_dp_comp_status) "Output of the comparator on DP during the resistor host detect protocol";
        usb2phy_datadet 1 ro type(usb2phy_datadet_status) "Output of the charger detect comparator";
        usb2phy_sinkondp 1 rw type(usb2phy_sinkondp_status) "When 1 current sink is connected to DP instead of DM";
        usb2phy_srcondm 1 rw type(usb2phy_srcondm_status) "When 1 voltage source is connected to DP instead of DM";
        usb2phy_restartchgdet 1 rw type(usb2phy_restartchgdet_status) "restartchgdet = 1 for 1 msec cause the CD_START to reset";
        usb2phy_chgdetdone 1 ro type(usb2phy_chgdetdone_status) "Status indicates that charger detection protocol is over";
        usb2phy_chgdetected 1 ro type(usb2phy_chgdetected_status) "Output of the charger detection protocol";
        usb2phy_mcpcpuen 1 rw type(usb2phy_mcpcpuen_status) "MCPC Pull up enable";
        usb2phy_mcpcmodeen 1 rw type(usb2phy_mcpcmodeen_status) "MCPC Mode enable";
        _ 1 mbz;
        usb2phy_utmiresetdone 1 ro type(usb2phy_utmiresetdone_status) "UTMI FSM reset status";
        usb2phy_txbitstuffenable 1 rw type(usb2phy_txbitstuffenable_status) "TX data bit stuff enable";
        usb2phy_datapolarityn 1 rw type(usb2phy_datapolarityn_status) "Data polarity";
        usbdpll_freqlock 1 ro "Status from USB DPLL";
        usb2phy_resetdonetclk 1 ro "resetdonetclk status from USB2PHY";
        _ 5 mbz;
    };

    constants gpio66_nmode_status width(1) "" {
        GPIO66_NMODE_0 = 0 "Reserved";
        GPIO66_NMODE_1 = 1 "Normal (GPIO) mode";
    };
    
    register control_i2c_1 addr(base, 0x624) "I2C pads control 1 Access conditions. Read: unrestricted, Write: unrestricted" {
        _ 9 mbz;
        gpio66_nmode 1 rw type(gpio66_nmode_status) "Active-high selection for GPIO mode";
        _ 1 mbz;
        gpio65_nmode 1 rw type(gpio66_nmode_status) "Active-high selection for GPIO mode";
        _ 20 mbz;
    };

    constants sdmmc1_pustrength_grp0_status width(1) "" {
        SDMMC1_PUSTRENGTH_GRP0_0 = 0 "Pull up with 50 to 110 kOhm on MMC1 data pins";
        SDMMC1_PUSTRENGTH_GRP0_1 = 1 "Pull up with 10 to 50 kOhm on MMC1 data pins";
    };

    constants sdmmc1_dr0_speedctrl_status width(1) "" {
        SDMMC1_DR0_SPEEDCTRL_0 = 0 "FMAX = 26 MHz at 30 pF";
        SDMMC1_DR0_SPEEDCTRL_1 = 1 "FMAX = 65 MHz at 30 pF";
    };

    constants usb_fd_cden_status width(1) "" {
        USB_FD_CDEN_0 = 0 "select pull down from USB FD logic";
        USB_FD_CDEN_1 = 1 "select pull down from device control modules registers";
    };

    constants usbc1_icusb_dp_pddis_status width(1) "" {
        USBC1_ICUSB_DP_PDDIS_0 = 0 "usbc1_icusb_dp pull down disabled";
        USBC1_ICUSB_DP_PDDIS_1 = 1 "usbc1_icusb_dp pull down enabled";
    };

    constants usbc1_icusb_dm_pddis_status width(1) "" {
        USBC1_ICUSB_DM_PDDIS_0 = 0 "usbc1_icusb_dm pull down disabled";
        USBC1_ICUSB_DM_PDDIS_1 = 1 "usbc1_icusb_dm pull down enabled";
    };
    
    register control_mmc1 addr(base, 0x628) "MMC1 control Access conditions. Read: unrestricted, Write: unrestricted" {
        sdmmc1_pustrength_grp0 1 rw type(sdmmc1_pustrength_grp0_status) "Pullstrengh control for sdmmc1_pustrength_grp0";
        sdmmc1_pustrength_grp1 1 rw type(sdmmc1_pustrength_grp0_status) "Pullstrengh control for sdmmc1_pustrength_grp1";
        sdmmc1_pustrength_grp2 1 rw type(sdmmc1_pustrength_grp0_status) "Pullstrengh control for sdmmc1_pustrength_grp2";
        sdmmc1_pustrength_grp3 1 rw type(sdmmc1_pustrength_grp0_status) "Pullstrengh control for sdmmc1_pustrength_grp3";
        sdmmc1_dr0_speedctrl 1 rw type(sdmmc1_dr0_speedctrl_status) "Speed control for group sdmmc1_dr0";
        sdmmc1_dr1_speedctrl 1 rw type(sdmmc1_dr0_speedctrl_status) "Speed control for group sdmmc1_dr1";
        sdmmc1_dr2_speedctrl 1 rw type(sdmmc1_dr0_speedctrl_status) "Speed control for group sdmmc1_dr2";
        usbc1_dr0_speedctrl 1 rw type(sdmmc1_dr0_speedctrl_status) "Speed control for group usbc1_dr0";
        usb_fd_cden 1 rw type(usb_fd_cden_status) "USB FD pull down select";
        usbc1_icusb_dp_pddis 1 rw type(usbc1_icusb_dp_pddis_status) "usbc1_icusb_dp pull down disable";
        usbc1_icusb_dm_pddis 1 rw type(usbc1_icusb_dm_pddis_status) "usbc1_icusb_dm pull dowm disable";
        _ 21 mbz;
    };

    constants hsi1_calloop_sel_status width(1) "" {
        HSI1_CALLOOP_SEL_0 = 0 "Calibration mode";
        HSI1_CALLOOP_SEL_1 = 1 "Enable Calibration mode";
    };
    
    register control_hsi addr(base, 0x62C) "HSI control Access conditions. Read: unrestricted, Write: unrestricted" {
        hsi1_calloop_sel 1 rw type(hsi1_calloop_sel_status) "hsi1 calibration loop select";
        hsi1_calmux_sel 1 rw type(hsi1_calloop_sel_status) "hsi1 calibration mux select";
        hsi2_calloop_sel 1 rw type(hsi1_calloop_sel_status) "hsi2 calibration loop select";
        hsi2_calmux_sel 1 rw type(hsi1_calloop_sel_status) "hsi2 calibration mux select";
        _ 28 mbz;
    };

    constants carkit_usba0_ulpiphy_dat0_auto_en_status width(1) "" {
        CARKIT_USBA0_ULPIPHY_DAT0_AUTO_EN_0 = 0 "Carkit Auto mode disabled";
        CARKIT_USBA0_ULPIPHY_DAT0_AUTO_EN_1 = 1 "Carkit Auto mode enabled";
    };
    
    register control_usb addr(base, 0x630) "USB control Access conditions. Read: unrestricted, Write: unrestricted" {
        carkit_usba0_ulpiphy_dat0_auto_en 1 rw type(carkit_usba0_ulpiphy_dat0_auto_en_status) "carkit usba0 ulpiphy dat0 auto enable";
        carkit_usba0_ulpiphy_dat1_auto_en 1 rw type(carkit_usba0_ulpiphy_dat0_auto_en_status) "carkit usba0 ulpiphy dat1 auto enable";
        _ 30 mbz;
    };
    
    register control_hdq ro addr(base, 0x634) "HDQ control Access conditions. Read: unrestricted, Write: unrestricted" type(uint32);
    
    register control_lpddr2io1_0 addr(base, 0x638) "LPDDR2 1 I/O control 0 Access conditions. Read: unrestricted, Write: unrestricted" {
        lpddr2io1_gr4_sr 2 rw "Group 4 Slew Rate control sr1:sr0";
        lpddr2io1_gr4_i 3 rw type(usbb2_dr1_i_status) "Group 4 Impedence control i2:i0";
        lpddr2io1_gr4_wd 2 rw type(usbb1_hsic_data_wd_status) "Group 4 Weak driver control wd1:wd0";
        _ 1 mbz;
        lpddr2io1_gr3_sr 2 rw "Group 3 Slew Rate control sr1:sr0";
        lpddr2io1_gr3_i 3 rw type(usbb2_dr1_i_status) "Group 3 Impedence control i2:i0";
        lpddr2io1_gr3_wd 2 rw type(usbb1_hsic_data_wd_status) "Group 3 Weak driver control wd1:wd0";
        _ 1 mbz;
        lpddr2io1_gr2_sr 2 rw "Group 2 Slew Rate control sr1:sr0";
        lpddr2io1_gr2_i 3 rw type(usbb2_dr1_i_status) "Group 2 Impedence control i2:i0";
        lpddr2io1_gr2_wd 2 rw type(usbb1_hsic_data_wd_status) "Group 2 Weak driver control wd1:wd0";
        _ 1 mbz;
        lpddr2io1_gr1_sr 2 rw "Group 1 Slew Rate control sr1:sr0";
        lpddr2io1_gr1_i 3 rw type(usbb2_dr1_i_status) "Group 1 Impedence control i2:i0";
        lpddr2io1_gr1_wd 2 rw type(usbb1_hsic_data_wd_status) "Group 1 Weak driver control wd1:wd0";
        _ 1 mbz;
    };
    
    register control_lpddr2io1_1 addr(base, 0x63C) "LPDDR2 1 I/O control 1 Access conditions. Read: unrestricted, Write: unrestricted" {
        lpddr2io1_gr8_sr 2 rw "Group 8 Slew Rate control sr1:sr0";
        lpddr2io1_gr8_i 3 rw type(usbb2_dr1_i_status) "Group 8 Impedence control i2:i0";
        lpddr2io1_gr8_wd 2 rw type(usbb1_hsic_data_wd_status) "Group 8 Weak driver control wd1:wd0";
        _ 1 mbz;
        lpddr2io1_gr7_sr 2 rw "Group 7 Slew Rate control sr1:sr0";
        lpddr2io1_gr7_i 3 rw type(usbb2_dr1_i_status) "Group 7 Impedence control i2:i0";
        lpddr2io1_gr7_wd 2 rw type(usbb1_hsic_data_wd_status) "Group 7 Weak driver control wd1:wd0";
        _ 1 mbz;
        lpddr2io1_gr6_sr 2 rw "Group 6 Slew Rate control sr1:sr0";
        lpddr2io1_gr6_i 3 rw type(usbb2_dr1_i_status) "Group 6 Impedence control i2:i0";
        lpddr2io1_gr6_wd 2 rw type(usbb1_hsic_data_wd_status) "Group 6 Weak driver control wd1:wd0";
        _ 1 mbz;
        lpddr2io1_gr5_sr 2 rw "Group 5 Slew Rate control sr1:sr0";
        lpddr2io1_gr5_i 3 rw type(usbb2_dr1_i_status) "Group 5 Impedence control i2:i0";
        lpddr2io1_gr5_wd 2 rw type(usbb1_hsic_data_wd_status) "Group 5 Weak driver control wd1:wd0";
        _ 1 mbz;
    };
    
    register control_lpddr2io1_2 addr(base, 0x640) "LPDDR2 1 I/O control 2 Access conditions. Read: unrestricted, Write: unrestricted" {
        lpddr2io1_gr11_sr 2 rw "Group 11 Slew Rate control sr1:sr0";
        lpddr2io1_gr11_i 3 rw type(usbb2_dr1_i_status) "Group 11 Impedence control i2:i0";
        lpddr2io1_gr11_wd 2 rw type(usbb1_hsic_data_wd_status) "Group 11 Weak driver control wd1:wd0";
        _ 1 mbz;
        lpddr2io1_gr10_sr 2 rw "Group 10 Slew Rate control sr1:sr0";
        lpddr2io1_gr10_i 3 rw type(usbb2_dr1_i_status) "Group 10 Impedence control i2:i0";
        lpddr2io1_gr10_wd 2 rw type(usbb1_hsic_data_wd_status) "Group 10 Weak driver control wd1:wd0";
        _ 1 mbz;
        lpddr2io1_gr9_sr 2 rw "Group 9 Slew Rate control sr1:sr0";
        lpddr2io1_gr9_i 3 rw type(usbb2_dr1_i_status) "Group 9 Impedence control i2:i0";
        lpddr2io1_gr9_wd 2 rw type(usbb1_hsic_data_wd_status) "Group 9 Weak driver control wd1:wd0";
        _ 9 mbz;
    };
    
    register control_lpddr2io1_3 addr(base, 0x644) "LPDDR2 1 I/O control 3 Access conditions. Read: unrestricted, Write: unrestricted" {
        lpddr21_vref_ca_ccap0 1 rw type(c2c_int_vref_en_status) "Selection for coupling cap connection";
        lpddr21_vref_ca_ccap1 1 rw type(c2c_int_vref_en_status) "Selection for coupling cap connection";
        lpddr21_vref_ca_int_ccap0 1 rw type(c2c_int_vref_en_status) "Selection for coupling cap connection";
        lpddr21_vref_ca_int_ccap1 1 rw type(c2c_int_vref_en_status) "Selection for coupling cap connection";
        lpddr21_vref_ca_int_tap0 1 rw type(c2c_int_vref_en_status) "Selection for internal reference voltage drive";
        lpddr21_vref_ca_int_tap1 1 rw type(c2c_int_vref_en_status) "Selection for internal reference voltage drive";
        lpddr21_vref_ca_tap0 1 rw type(c2c_int_vref_en_status) "Selection for internal reference voltage drive";
        lpddr21_vref_ca_tap1 1 rw type(c2c_int_vref_en_status) "Selection for internal reference voltage drive";
        lpddr21_vref_dq_int0_ccap0 1 rw type(c2c_int_vref_en_status) "Selection for coupling cap connection";
        lpddr21_vref_dq_int0_ccap1 1 rw type(c2c_int_vref_en_status) "Selection for coupling cap connection";
        lpddr21_vref_dq_int0_tap0 1 rw type(c2c_int_vref_en_status) "Selection for internal reference voltage drive";
        lpddr21_vref_dq_int0_tap1 1 rw type(c2c_int_vref_en_status) "Selection for internal reference voltage drive";
        lpddr21_vref_dq_int1_ccap0 1 rw type(c2c_int_vref_en_status) "Selection for coupling cap connection";
        lpddr21_vref_dq_int1_ccap1 1 rw type(c2c_int_vref_en_status) "Selection for coupling cap connection";
        lpddr21_vref_dq_int1_tap0 1 rw type(c2c_int_vref_en_status) "Selection for internal reference voltage drive";
        lpddr21_vref_dq_int1_tap1 1 rw type(c2c_int_vref_en_status) "Selection for internal reference voltage drive";
        lpddr21_vref_dq_ccap0 1 rw type(c2c_int_vref_en_status) "Selection for coupling cap connection";
        lpddr21_vref_dq_ccap1 1 rw type(c2c_int_vref_en_status) "Selection for coupling cap connection";
        lpddr21_vref_dq_tap0 1 rw type(c2c_int_vref_en_status) "Selection for internal reference voltage drive";
        lpddr21_vref_dq_tap1 1 rw type(c2c_int_vref_en_status) "Selection for internal reference voltage drive";
        lpddr21_vref_dq_int2_ccap0 1 rw type(c2c_int_vref_en_status) "Selection for coupling cap connection";
        lpddr21_vref_dq_int3_ccap0 1 rw type(c2c_int_vref_en_status) "Selection for coupling cap connection";
        lpddr21_vref_dq_int2_ccap1 1 rw type(c2c_int_vref_en_status) "Selection for coupling cap connection";
        lpddr21_vref_dq_int3_ccap1 1 rw type(c2c_int_vref_en_status) "Selection for coupling cap connection";
        lpddr21_vref_dq_int2_tap0 1 rw type(c2c_int_vref_en_status) "Selection for internal reference voltage drive";
        lpddr21_vref_dq_int3_tap0 1 rw type(c2c_int_vref_en_status) "Selection for internal reference voltage drive";
        lpddr21_vref_dq_int2_tap1 1 rw type(c2c_int_vref_en_status) "Selection for internal reference voltage drive";
        lpddr21_vref_dq_int3_tap1 1 rw type(c2c_int_vref_en_status) "Selection for internal reference voltage drive";
        lpddr21_int_vref_en_ca 1 rw type(c2c_int_vref_en_status) "Internal vref enable for CA in manual mode (if both manual and auto mode is enabled then manual mode takes the priority)";
        lpddr21_int_vref_en_dq 1 rw type(c2c_int_vref_en_status) "Internal vref enable for DQ in manual mode (if both manual and auto mode is enabled then manual mode takes the priority)";
        lpddr21_int_vref_auto_en_ca 1 rw type(c2c_int_vref_en_status) "Internal vref enable for CA in auto mode (if both manual and auto mode is enabled then manual mode takes the priority)";
        lpddr21_int_vref_auto_en_dq 1 rw type(c2c_int_vref_en_status) "Internal vref enable for DQ in auto mode (if both manual and auto mode is enabled then manual mode takes the priority)";
    };
    
    register control_lpddr2io2_0 addr(base, 0x648) "LPDDR2 2 I/O control 0 Access conditions. Read: unrestricted, Write: unrestricted" {
        lpddr2io2_gr4_sr 2 rw "Group 4 Slew Rate control sr1:sr0";
        lpddr2io2_gr4_i 3 rw type(usbb2_dr1_i_status) "Group 4 Impedence control i2:i0";
        lpddr2io2_gr4_wd 2 rw type(usbb1_hsic_data_wd_status) "Group 4 Weak driver control wd1:wd0";
        _ 1 mbz;
        lpddr2io2_gr3_sr 2 rw "Group 3 Slew Rate control sr1:sr0";
        lpddr2io2_gr3_i 3 rw type(usbb2_dr1_i_status) "Group 3 Impedence control i2:i0";
        lpddr2io2_gr3_wd 2 rw type(usbb1_hsic_data_wd_status) "Group 3 Weak driver control wd1:wd0";
        _ 1 mbz;
        lpddr2io2_gr2_sr 2 rw "Group 2 Slew Rate control sr1:sr0";
        lpddr2io2_gr2_i 3 rw type(usbb2_dr1_i_status) "Group 2 Impedence control i2:i0";
        lpddr2io2_gr2_wd 2 rw type(usbb1_hsic_data_wd_status) "Group 2 Weak driver control wd1:wd0";
        _ 1 mbz;
        lpddr2io2_gr1_sr 2 rw "Group 1 Slew Rate control sr1:sr0";
        lpddr2io2_gr1_i 3 rw type(usbb2_dr1_i_status) "Group 1 Impedence control i2:i0";
        lpddr2io2_gr1_wd 2 rw type(usbb1_hsic_data_wd_status) "Group 1 Weak driver control wd1:wd0";
        _ 1 mbz;
    };
    
    register control_lpddr2io2_1 addr(base, 0x64C) "LPDDR2 2 I/O control 1 Access conditions. Read: unrestricted, Write: unrestricted" {
        lpddr2io2_gr8_sr 2 rw "Group 8 Slew Rate control sr1:sr0";
        lpddr2io2_gr8_i 3 rw type(usbb2_dr1_i_status) "Group 8 Impedence control i2:i0";
        lpddr2io2_gr8_wd 2 rw type(usbb1_hsic_data_wd_status) "Group 8 Weak driver control wd1:wd0";
        _ 1 mbz;
        lpddr2io2_gr7_sr 2 rw "Group 7 Slew Rate control sr1:sr0";
        lpddr2io2_gr7_i 3 rw type(usbb2_dr1_i_status) "Group 7 Impedence control i2:i0";
        lpddr2io2_gr7_wd 2 rw type(usbb1_hsic_data_wd_status) "Group 7 Weak driver control wd1:wd0";
        _ 1 mbz;
        lpddr2io2_gr6_sr 2 rw "Group 6 Slew Rate control sr1:sr0";
        lpddr2io2_gr6_i 3 rw type(usbb2_dr1_i_status) "Group 6 Impedence control i2:i0";
        lpddr2io2_gr6_wd 2 rw type(usbb1_hsic_data_wd_status) "Group 6 Weak driver control wd1:wd0";
        _ 1 mbz;
        lpddr2io2_gr5_sr 2 rw "Group 5 Slew Rate control sr1:sr0";
        lpddr2io2_gr5_i 3 rw type(usbb2_dr1_i_status) "Group 5 Impedence control i2:i0";
        lpddr2io2_gr5_wd 2 rw type(usbb1_hsic_data_wd_status) "Group 5 Weak driver control wd1:wd0";
        _ 1 mbz;
    };
    
    register control_lpddr2io2_2 addr(base, 0x650) "LPDDR2 2 I/O control 2 Access conditions. Read: unrestricted, Write: unrestricted" {
        lpddr2io2_gr11_sr 2 rw "Group 11 Slew Rate control sr1:sr0";
        lpddr2io2_gr11_i 3 rw type(usbb2_dr1_i_status) "Group 11 Impedence control i2:i0";
        lpddr2io2_gr11_wd 2 rw type(usbb1_hsic_data_wd_status) "Group 11 Weak driver control wd1:wd0";
        _ 1 mbz;
        lpddr2io2_gr10_sr 2 rw "Group 10 Slew Rate control sr1:sr0";
        lpddr2io2_gr10_i 3 rw type(usbb2_dr1_i_status) "Group 10 Impedence control i2:i0";
        lpddr2io2_gr10_wd 2 rw type(usbb1_hsic_data_wd_status) "Group 10 Weak driver control wd1:wd0";
        _ 1 mbz;
        lpddr2io2_gr9_sr 2 rw "Group 9 Slew Rate control sr1:sr0";
        lpddr2io2_gr9_i 3 rw type(usbb2_dr1_i_status) "Group 9 Impedence control i2:i0";
        lpddr2io2_gr9_wd 2 rw type(usbb1_hsic_data_wd_status) "Group 9 Weak driver control wd1:wd0";
        _ 9 mbz;
    };
    
    register control_lpddr2io2_3 addr(base, 0x654) "LPDDR2 2 I/O control 3 Access conditions. Read: unrestricted, Write: unrestricted" {
        lpddr22_vref_ca_ccap0 1 rw type(c2c_int_vref_en_status) "Selection for coupling cap connection";
        lpddr22_vref_ca_ccap1 1 rw type(c2c_int_vref_en_status) "Selection for coupling cap connection";
        lpddr22_vref_ca_int_ccap0 1 rw type(c2c_int_vref_en_status) "Selection for coupling cap connection";
        lpddr22_vref_ca_int_ccap1 1 rw type(c2c_int_vref_en_status) "Selection for coupling cap connection";
        lpddr22_vref_ca_int_tap0 1 rw type(c2c_int_vref_en_status) "Selection for internal reference voltage drive";
        lpddr22_vref_ca_int_tap1 1 rw type(c2c_int_vref_en_status) "Selection for internal reference voltage drive";
        lpddr22_vref_ca_tap0 1 rw type(c2c_int_vref_en_status) "Selection for internal reference voltage drive";
        lpddr22_vref_ca_tap1 1 rw type(c2c_int_vref_en_status) "Selection for internal reference voltage drive";
        lpddr22_vref_dq_int0_ccap0 1 rw type(c2c_int_vref_en_status) "Selection for coupling cap connection";
        lpddr22_vref_dq_int0_ccap1 1 rw type(c2c_int_vref_en_status) "Selection for coupling cap connection";
        lpddr22_vref_dq_int0_tap0 1 rw type(c2c_int_vref_en_status) "Selection for internal reference voltage drive";
        lpddr22_vref_dq_int0_tap1 1 rw type(c2c_int_vref_en_status) "Selection for internal reference voltage drive";
        lpddr22_vref_dq_int1_ccap0 1 rw type(c2c_int_vref_en_status) "Selection for coupling cap connection";
        lpddr22_vref_dq_int1_ccap1 1 rw type(c2c_int_vref_en_status) "Selection for coupling cap connection";
        lpddr22_vref_dq_int1_tap0 1 rw type(c2c_int_vref_en_status) "Selection for internal reference voltage drive";
        lpddr22_vref_dq_int1_tap1 1 rw type(c2c_int_vref_en_status) "Selection for internal reference voltage drive";
        lpddr22_vref_dq_ccap0 1 rw type(c2c_int_vref_en_status) "Selection for coupling cap connection";
        lpddr22_vref_dq_ccap1 1 rw type(c2c_int_vref_en_status) "Selection for coupling cap connection";
        lpddr22_vref_dq_tap0 1 rw type(c2c_int_vref_en_status) "Selection for internal reference voltage drive";
        lpddr22_vref_dq_tap1 1 rw type(c2c_int_vref_en_status) "Selection for internal reference voltage drive";
        lpddr22_vref_dq_int2_ccap0 1 rw type(c2c_int_vref_en_status) "Selection for coupling cap connection";
        lpddr22_vref_dq_int3_ccap0 1 rw type(c2c_int_vref_en_status) "Selection for coupling cap connection";
        lpddr22_vref_dq_int2_ccap1 1 rw type(c2c_int_vref_en_status) "Selection for coupling cap connection";
        lpddr22_vref_dq_int3_ccap1 1 rw type(c2c_int_vref_en_status) "Selection for coupling cap connection";
        lpddr22_vref_dq_int2_tap0 1 rw type(c2c_int_vref_en_status) "Selection for internal reference voltage drive";
        lpddr22_vref_dq_int3_tap0 1 rw type(c2c_int_vref_en_status) "Selection for internal reference voltage drive";
        lpddr22_vref_dq_int2_tap1 1 rw type(c2c_int_vref_en_status) "Selection for internal reference voltage drive";
        lpddr22_vref_dq_int3_tap1 1 rw type(c2c_int_vref_en_status) "Selection for internal reference voltage drive";
        lpddr22_int_vref_en_ca 1 rw type(c2c_int_vref_en_status) "Internal vref enable for CA in manual mode (if both manual and auto mode is enabled then manual mode takes the priority)";
        lpddr22_int_vref_en_dq 1 rw type(c2c_int_vref_en_status) "Internal vref enable for DQ in manual mode (if both manual and auto mode is enabled then manual mode takes the priority)";
        lpddr22_int_vref_auto_en_ca 1 rw type(c2c_int_vref_en_status) "Internal vref enable for CA in auto mode (if both manual and auto mode is enabled then manual mode takes the priority)";
        lpddr22_int_vref_auto_en_dq 1 rw type(c2c_int_vref_en_status) "Internal vref enable for DQ in auto mode (if both manual and auto mode is enabled then manual mode takes the priority)";
    };
    
    register control_bus_hold ro addr(base, 0x658) "BUS HOLD I/O controls Access conditions. Read: unrestricted, Write: unrestricted" type(uint32);
    
    register control_c2c rw addr(base, 0x65C) "C2C controls Access conditions. Read: unrestricted, Write: unrestricted" type(uint32);
    
    register control_core_control_spare_rw rw addr(base, 0x660) "CORE control spare RW Access conditions. Read: unrestricted, Write: unrestricted" type(uint32);
    
    register control_core_control_spare_r ro addr(base, 0x664) "CORE control spare R Access conditions. Read: unrestricted, Write: unrestricted" type(uint32);
    
    register control_core_control_spare_r_c0 addr(base, 0x668) "CORE control spare RC Access conditions. Read: unrestricted, Write: unrestricted" {
        core_control_spare_r_c0 1 rw "Core control spare register bits RC";
        core_control_spare_r_c1 1 rw "Core control spare register bits RC";
        core_control_spare_r_c2 1 rw "Core control spare register bits RC";
        core_control_spare_r_c3 1 rw "Core control spare register bits RC";
        core_control_spare_r_c4 1 rw "Core control spare register bits RC";
        core_control_spare_r_c5 1 rw "Core control spare register bits RC";
        core_control_spare_r_c6 1 rw "Core control spare register bits RC";
        core_control_spare_r_c7 1 rw "Core control spare register bits RC";
        _ 24 mbz;
    };
    
    register control_core_control_spare_rw1 rw addr(base, 0x66C) "CORE control spare RW1 Access conditions. Read: unrestricted, Write: unrestricted" type(uint32);
    
    register control_core_control_spare_rw2 rw addr(base, 0x670) "CORE control spare RW2 Access conditions. Read: unrestricted, Write: unrestricted" type(uint32);
    
    register control_core_control_spare_rw3 rw addr(base, 0x674) "CORE control spare RW3 Access conditions. Read: unrestricted, Write: unrestricted" type(uint32);
    
    register control_core_control_spare_rw4 rw addr(base, 0x678) "CORE control spare RW4 Access conditions. Read: unrestricted, Write: unrestricted" type(uint32);
    
    register control_core_control_spare_rw5 rw addr(base, 0x67C) "CORE control spare RW5 Access conditions. Read: unrestricted, Write: unrestricted" type(uint32);
    
    register control_core_control_spare_rw6 rw addr(base, 0x680) "CORE control spare RW6 Access conditions. Read: unrestricted, Write: unrestricted" type(uint32);
    
    register control_core_control_spare_rw7 rw addr(base, 0x684) "CORE control spare RW7 Access conditions. Read: unrestricted, Write: unrestricted" type(uint32);
    
    register control_core_control_spare_rw8 rw addr(base, 0x688) "CORE control spare RW8 Access conditions. Read: unrestricted, Write: unrestricted" type(uint32);
    
    register control_core_control_spare_rw9 rw addr(base, 0x68C) "CORE control spare RW9 Access conditions. Read: unrestricted, Write: unrestricted" type(uint32);
    
    register control_core_control_spare_r1 ro addr(base, 0x690) "CORE control spare R1 Access conditions. Read: unrestricted, Write: unrestricted" type(uint32);
    
    register control_efuse_1 addr(base, 0x700) "EFUSE control 1 Access conditions. Read: unrestricted, Write: unrestricted" {
        _ 1 mbz;
        avdac_trim_byte3 7 rw "AVDAC trim byte3 (Reset value exported from efuse) Note that reset is exported. Its value is = pi_avdac_trim_byte_3";
        avdac_trim_byte2 8 rw "AVDAC trim byte2 (Reset value exported from efuse) Note that reset is exported. Its value is = pi_avdac_trim_byte_2";
        avdac_trim_byte1 8 rw "AVDAC trim byte1 (Reset value exported from efuse) Note that reset is exported. Its value is = pi_avdac_trim_byte_1";
        avdac_trim_byte0 8 rw "AVDAC trim byte0 (Reset value exported from efuse) Note that reset is exported. Its value is = pi_avdac_trim_byte_0";
    };
    
    register control_efuse_2 addr(base, 0x704) "EFUSE control 2 Access conditions. Read: unrestricted, Write: unrestricted" {
        efuse_smart2test_p0 1 rw "Smart2/3/C2C I/O PMOS process compensation bit 0 (Reset value exported from efuse) Note that reset is exported. Its value is = pi_sr_p0";
        efuse_smart2test_p1 1 rw "Smart2/3/C2C I/O PMOS process compensation bit 1 (Reset value exported from efuse) Note that reset is exported. Its value is = pi_sr_p1";
        efuse_smart2test_p2 1 rw "Smart2/3/C2C I/O PMOS process compensation bit 2 (Reset value exported from efuse) Note that reset is exported. Its value is = pi_sr_p2";
        efuse_smart2test_p3 1 rw "Smart2/3/C2C I/O PMOS process compensation bit 3 (Reset value exported from efuse) Note that reset is exported. Its value is = pi_sr_p3";
        efuse_smart2test_n0 1 rw "Smart2/3/C2C I/O NMOS process compensation bit 0 (Reset value exported from efuse) Note that reset is exported. Its value is = pi_sr_n0";
        efuse_smart2test_n1 1 rw "Smart2/3/C2C I/O NMOS process compensation bit 1(Reset value exported from efuse) Note that reset is exported. Its value is = pi_sr_n1";
        efuse_smart2test_n2 1 rw "Smart2/3/C2C I/O NMOS process compensation bit 2 (Reset value exported from efuse) Note that reset is exported. Its value is = pi_sr_n2";
        efuse_smart2test_n3 1 rw "Smart2/3/C2C I/O NMOS process compensation bit 3 (Reset value exported from efuse) Note that reset is exported. Its value is = pi_sr_n3";
        lpddr2_ptv_n1 1 rw "LPDDR2IO NMOS PTV code bit 1 (Reset value exported from efuse) Note that reset is exported. Its value is = pi_lpddr2_n1";
        lpddr2_ptv_n2 1 rw "LPDDR2IO NMOS PTV code bit 2 (Reset value exported from efuse) Note that reset is exported. Its value is = pi_lpddr2_n2";
        lpddr2_ptv_n3 1 rw "LPDDR2IO NMOS PTV code bit 3 (Reset value exported from efuse) Note that reset is exported. Its value is = pi_lpddr2_n3";
        lpddr2_ptv_n4 1 rw "LPDDR2IO NMOS PTV code bit 4 (Reset value exported from efuse) Note that reset is exported. Its value is = pi_lpddr2_n4";
        lpddr2_ptv_n5 1 rw "LPDDR2IO NMOS PTV code bit 5 (Reset value exported from efuse) Note that reset is exported. Its value is = pi_lpddr2_n5";
        lpddr2_ptv_p1 1 rw "LPDDR2IO PMOS PTV code bit 1 (Reset value exported from efuse) Note that reset is exported. Its value is = pi_lpddr2_p1";
        lpddr2_ptv_p2 1 rw "LPDDR2IO PMOS PTV code bit 2 (Reset value exported from efuse) Note that reset is exported. Its value is = pi_lpddr2_p2";
        lpddr2_ptv_p3 1 rw "LPDDR2IO PMOS PTV code bit 3 (Reset value exported from efuse) Note that reset is exported. Its value is = pi_lpddr2_p3";
        lpddr2_ptv_p4 1 rw "LPDDR2IO PMOS PTV code bit 4 (Reset value exported from efuse) Note that reset is exported. Its value is = pi_lpddr2_p4";
        lpddr2_ptv_p5 1 rw "LPDDR2IO PMOS PTV code bit 5 (Reset value exported from efuse) Note that reset is exported. Its value is = pi_lpddr2_p5";
        _ 14 mbz;
    };
    
    register control_efuse_3 addr(base, 0x708) "EFUSE control 3 Access conditions. Read: unrestricted, Write: unrestricted" {
        std_fuse_spare_1 8 ro "std efuse spare bits (Read Only)";
        std_fuse_spare_2 8 ro "std efuse spare bits (Read Only)";
        std_fuse_spare_3 8 ro "std efuse spare bits (Read Only)";
        std_fuse_spare_4 8 ro "std efuse spare bits (Read Only)";
    };
    
    register control_efuse_4 addr(base, 0x70C) "EFUSE control 4 Access conditions. Read: unrestricted, Write: unrestricted" {
        std_fuse_spare_5 8 rw "std efuse spare bits (RW) Note that reset is exported. Its value is = pi_std_fuse_spare5";
        std_fuse_spare_6 8 rw "std efuse spare bits (RW) Note that reset is exported. Its value is = pi_std_fuse_spare6";
        std_fuse_spare_7 8 rw "std efuse spare bits (RW) Note that reset is exported. Its value is = pi_std_fuse_spare7";
        std_fuse_spare_8 8 rw "std efuse spare bits (RW) Note that reset is exported. Its value is = pi_std_fuse_spare8";
    };
};