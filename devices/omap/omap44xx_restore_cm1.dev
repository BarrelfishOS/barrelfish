/*
 * Copyright (c) 2013 ETH Zurich. All rights reserved.
 *
 * This file is distributed under the terms in the attached LICENSE file.
 * If you do not find this file, copies can be found by writing to:
 * ETH Zurich D-INFK, CAB F.78, Universitaetstrasse 6, CH-8092 Zurich,
 * Attn: Systems Group.
 */

/*
 * omap44xx_restore_cm1.dev
 *
 * DESCRIPTION: 
 *
 * NOTE: This file has been automatically generated based on the
 * XML files extracted from the TI RDT v1.0.0.4p Tool.
 * Download from here: http://www.ti.com/product/omap4460
 * This means that the file might not be optimal in terms of naming
 * conventions for constants and registers (duplicated
 * namespaces in register and device name etc.).
 * Also, because of the underlying structure from the original XML
 * it's possible that some constants appear multiple times (if they
 * have slightly different descriptions for example).
 *
 * You want to clean that up before using the files for the first time!
 */
 
device omap44xx_restore_cm1 msbfirst ( addr base ) "" {
    

    constants clksel_l4_status width(1) "" {
        CLKSEL_L4_0 = 0 "L4_CLK is L3_CLK divided by 1";
        CLKSEL_L4_1 = 1 "L4_CLK is L3_CLK divided by 2";
    };

    constants clksel_l3_status width(1) "" {
        CLKSEL_L3_0 = 0 "L3_CLK is CORE_CLK divided by 1";
        CLKSEL_L3_1 = 1 "L3_CLK is CORE_CLK divided by 2";
    };

    constants clksel_core_status width(1) "" {
        CLKSEL_CORE_0 = 0 "CORE_CLK is CORE_X2_CLK divided by 1";
        CLKSEL_CORE_1 = 1 "CORE_CLK is CORE_X2_CLK divided by 2";
    };
    
    register cm_clksel_core_restore addr(base, 0x0) "Second address map for register. Used only by automatic restore upon wakeup from device OFF mode." {
        _ 23 mbz;
        clksel_l4 1 rw type(clksel_l4_status) "Selects L4 interconnect clock (L4_clk)";
        _ 3 mbz;
        clksel_l3 1 rw type(clksel_l3_status) "Selects L3 interconnect clock (L3_clk)";
        _ 3 mbz;
        clksel_core 1 rw type(clksel_core_status) "Selects CORE_CLK configuration";
    };

    constants st_dpll_clkout_status width(1) "" {
        ST_DPLL_CLKOUT_0_r = 0 "The clock output is enabled";
        ST_DPLL_CLKOUT_1_r = 1 "The clock output is gated";
    };

    constants dpll_clkout_gate_ctrl_status width(1) "" {
        DPLL_CLKOUT_GATE_CTRL_0 = 0 "Automatically gate this clock when there is no dependency for it";
        DPLL_CLKOUT_GATE_CTRL_1 = 1 "Force this clock to stay enabled even if there is no request";
    };

    constants dpll_clkout_div_status width(5) "" {
        DPLL_CLKOUT_DIV_0 = 0 "Reserved";
    };
    
    register cm_div_m2_dpll_core_restore addr(base, 0x4) "Second address map for register. Used only by automatic restore upon wakeup from device OFF mode." {
        _ 22 mbz;
        st_dpll_clkout 1 ro type(st_dpll_clkout_status) "DPLL CLKOUT status";
        dpll_clkout_gate_ctrl 1 rw type(dpll_clkout_gate_ctrl_status) "Control gating of DPLL CLKOUT";
        _ 2 mbz;
        dpll_clkout_divchack 1 ro "Toggle on this status bit after changing DPLL_CLKOUT_DIV indicates that the change in divider value has taken effect";
        dpll_clkout_div 5 rw type(dpll_clkout_div_status) "DPLL post-divider factor, M2, for internal clock generation (1 to 31); Divide value from 1 to 31.";
    };
    
    register cm_div_m3_dpll_core_restore addr(base, 0x8) "Second address map for register. Used only by automatic restore upon wakeup from device OFF mode." {
        _ 22 mbz;
        st_dpll_clkouthif 1 ro type(st_dpll_clkout_status) "DPLL CLKOUTHIF status";
        dpll_clkouthif_gate_ctrl 1 rw type(dpll_clkout_gate_ctrl_status) "Control gating of DPLL CLKOUTHIF";
        _ 2 mbz;
        dpll_clkouthif_divchack 1 ro "Toggle on this status bit after changing DPLL_CLKOUTHIF_DIV indicates that the change in divider value has taken effect";
        dpll_clkouthif_div 5 rw type(dpll_clkout_div_status) "DPLL post-divider factor, M3, for internal clock generation (1 to 31);Divide value from 1 to 31.";
    };

    constants hsdivider_clkout1_pwdn_status width(1) "" {
        HSDIVIDER_CLKOUT1_PWDN_0 = 0 "Divider is powered up";
        HSDIVIDER_CLKOUT1_PWDN_1 = 1 "Divider is powered down";
    };

    constants st_hsdivider_clkout1_status width(1) "" {
        ST_HSDIVIDER_CLKOUT1_0_r = 0 "The clock output is gated";
        ST_HSDIVIDER_CLKOUT1_1_r = 1 "The clock output is enabled";
    };
    
    register cm_div_m4_dpll_core_restore addr(base, 0xC) "Second address map for register. Used only by automatic restore upon wakeup from device OFF mode." {
        _ 19 mbz;
        hsdivider_clkout1_pwdn 1 rw type(hsdivider_clkout1_pwdn_status) "Direct power down control for HSDIVIDER M4 divider and CLKOUT1 output. Power down should be enabled only when clock is first gated.";
        _ 2 mbz;
        st_hsdivider_clkout1 1 ro type(st_hsdivider_clkout1_status) "HSDIVIDER CLKOUT1 status";
        hsdivider_clkout1_gate_ctrl 1 rw type(dpll_clkout_gate_ctrl_status) "Control gating of HSDIVIDER CLKOUT1";
        _ 2 mbz;
        hsdivider_clkout1_divchack 1 ro "Toggle on this status bit after changing HSDIVIDER_CLKOUT1_DIV indicates that the change in divider value has taken effect";
        hsdivider_clkout1_div 5 rw type(dpll_clkout_div_status) "DPLL M4 post-divider factor (1 to 31).";
    };
    
    register cm_div_m5_dpll_core_restore addr(base, 0x10) "Second address map for register. Used only by automatic restore upon wakeup from device OFF mode." {
        _ 19 mbz;
        hsdivider_clkout2_pwdn 1 rw type(hsdivider_clkout1_pwdn_status) "Direct power down control for HSDIVIDER M5 divider and CLKOUT2 output. Power down should be enabled only when clock is first gated.";
        _ 2 mbz;
        st_hsdivider_clkout2 1 ro type(st_hsdivider_clkout1_status) "HSDIVIDER CLKOUT2 status";
        hsdivider_clkout2_gate_ctrl 1 rw type(dpll_clkout_gate_ctrl_status) "Control gating of HSDIVIDER CLKOUT2";
        _ 2 mbz;
        hsdivider_clkout2_divchack 1 ro "Toggle on this status bit after changing HSDIVIDER_CLKOUT2_DIV indicates that the change in divider value has taken effect";
        hsdivider_clkout2_div 5 rw type(dpll_clkout_div_status) "DPLL M5 post-divider factor (1 to 31).";
    };
    
    register cm_div_m6_dpll_core_restore addr(base, 0x14) "Second address map for register. Used only by automatic restore upon wakeup from device OFF mode." {
        _ 19 mbz;
        hsdivider_clkout3_pwdn 1 rw type(hsdivider_clkout1_pwdn_status) "Direct power down control for HSDIVIDER M6 divider and CLKOUT3 output. Power down should be enabled only when clock is first gated.";
        _ 2 mbz;
        st_hsdivider_clkout3 1 ro type(st_hsdivider_clkout1_status) "HSDIVIDER CLKOUT3 status";
        hsdivider_clkout3_gate_ctrl 1 rw type(dpll_clkout_gate_ctrl_status) "Control gating of HSDIVIDER CLKOUT3";
        _ 2 mbz;
        hsdivider_clkout3_divchack 1 ro "Toggle on this status bit after changing HSDIVIDER_CLKOUT3_DIV indicates that the change in divider value has taken effect";
        hsdivider_clkout3_div 5 rw type(dpll_clkout_div_status) "DPLL M6 post-divider factor (1 to 31).";
    };
    
    register cm_div_m7_dpll_core_restore addr(base, 0x18) "Second address map for register. Used only by automatic restore upon wakeup from device OFF mode." {
        _ 19 mbz;
        hsdivider_clkout4_pwdn 1 rw type(hsdivider_clkout1_pwdn_status) "Direct power down control for HSDIVIDER M7 divider and CLKOUT4 output. Power down should be enabled only when clock is first gated.";
        _ 2 mbz;
        st_hsdivider_clkout4 1 ro type(st_hsdivider_clkout1_status) "HSDIVIDER CLKOUT4 status";
        hsdivider_clkout4_gate_ctrl 1 rw type(dpll_clkout_gate_ctrl_status) "Control gating of HSDIVIDER CLKOUT4";
        _ 2 mbz;
        hsdivider_clkout4_divchack 1 ro "Toggle on this status bit after changing HSDIVIDER_CLKOUT4_DIV indicates that the change in divider value has taken effect";
        hsdivider_clkout4_div 5 rw type(dpll_clkout_div_status) "DPLL M7 post-divider factor (1 to 31).";
    };

    constants dpll_clkouthif_clksel_status width(1) "" {
        DPLL_CLKOUTHIF_CLKSEL_0 = 0 "CLKOUTHIF is generated from the DPLL oscillator (DCO)";
        DPLL_CLKOUTHIF_CLKSEL_1 = 1 "CLKOUTHIF is generated from CLKINPHIF";
    };

    constants dpll_mult_status width(11) "" {
        DPLL_MULT_0 = 0 "Reserved";
        DPLL_MULT_1 = 1 "Reserved";
    };
    
    register cm_clksel_dpll_core_restore addr(base, 0x1C) "Second address map for register. Used only by automatic restore upon wakeup from device OFF mode." {
        _ 8 mbz;
        dpll_byp_clksel 1 rw "Allows control of the BYPASS clock of the PLL and the associated HSDIVIDER. Same as ULOWCLKEN on DPLL. In DPLL Locked mode, 0 - No impact 1 - No impact In DPLL Bypass mode, 0 - CLKINP is selected as the BYPASS clock for CLKOUT/CLKOUTX2 1 - CLKINPULOW is selected as the BYPASS clock for CLKOUT/CLKOUTX2";
        _ 2 mbz;
        dpll_clkouthif_clksel 1 rw type(dpll_clkouthif_clksel_status) "Selects the source of the DPLL CLKOUTHIF clock. Same as CLKINPHIFSEL pin on the DPLL";
        _ 1 mbz;
        dpll_mult 11 rw type(dpll_mult_status) "DPLL multiplier factor (2 to 2047). This register is automatically cleared to 0 when the DPLL_EN field in the *CLKMODE_DPLL* register is set to select MN bypass mode. (equal to input M of DPLL; M=2 to 2047 = DPLL multiplies by M).";
        _ 1 mbz;
        dpll_div 7 rw "DPLL divider factor (0 to 127) (equal to input N of DPLL; actual division factor is N+1).";
    };
    
    register cm_ssc_deltamstep_dpll_core_restore addr(base, 0x20) "Second address map for register. Used only by automatic restore upon wakeup from device OFF mode. [warm reset insensitive]" {
        _ 12 mbz;
        deltamstep 20 rw "DeltaMStep is split into fractional and integer part. For Triangular Spread Spectrum: [19:18] for integer part, [17:0] for fractional part For Square Wave Spread Spectrum [19:14] for integer part, [13:0] for fractional part";
    };
    
    register cm_ssc_modfreqdiv_dpll_core_restore addr(base, 0x24) "Second address map for register. Used only by automatic restore upon wakeup from device OFF mode. [warm reset insensitive]" {
        _ 21 mbz;
        modfreqdiv_exponent 3 rw "Set the Exponent component of MODFREQDIV factor";
        _ 1 mbz;
        modfreqdiv_mantissa 7 rw "Set the Mantissa component of MODFREQDIV factor";
    };

    constants dpll_ssc_downspread_status width(1) "" {
        DPLL_SSC_DOWNSPREAD_0 = 0 "When SSC is enabled, clock frequency is spread on both sides of the programmed frequency";
        DPLL_SSC_DOWNSPREAD_1 = 1 "When SSC is enabled, clock frequency is spread only on the lower side of the programmed frequency";
    };

    constants dpll_ssc_ack_status width(1) "" {
        DPLL_SSC_ACK_0_r = 0 "SSC has been turned off on PLL o/ps";
        DPLL_SSC_ACK_1_r = 1 "SSC has been turned on on PLL o/ps";
    };

    constants dpll_ssc_en_status width(1) "" {
        DPLL_SSC_EN_0 = 0 "SSC disabled";
        DPLL_SSC_EN_1 = 1 "SSC enabled";
    };

    constants dpll_regm4xen_status width(1) "" {
        DPLL_REGM4XEN_0_r = 0 "REGM4XEN mode of the DPLL is disabled";
    };

    constants dpll_lpmode_en_status width(1) "" {
        DPLL_LPMODE_EN_0 = 0 "Low-power mode of the DPLL is disabled";
        DPLL_LPMODE_EN_1 = 1 "Low-power mode of the DPLL is enabled";
    };

    constants dpll_driftguard_en_status width(1) "" {
        DPLL_DRIFTGUARD_EN_0 = 0 "DRIFTGUARD feature is disabled";
        DPLL_DRIFTGUARD_EN_1 = 1 "DRIFTGUARD feature is enabled";
    };

    constants dpll_en_status width(3) "" {
        DPLL_EN_0 = 0 "Reserved";
        DPLL_EN_1 = 1 "Reserved";
        DPLL_EN_2 = 2 "Reserved";
        DPLL_EN_3 = 3 "Reserved";
        DPLL_EN_4 = 4 "Put the DPLL in MN bypass mode. The DPLL_MULT register bits are reset to 0 automatically by putting the DPLL in this mode.";
        DPLL_EN_5 = 5 "Put the DPLL in idle bypass low-power mode.";
        DPLL_EN_6 = 6 "Put the DPLL in idle bypass fast-relock mode.";
        DPLL_EN_7 = 7 "Enables the DPLL in lock mode";
    };
    
    register cm_clkmode_dpll_core_restore addr(base, 0x28) "Second address map for register. Used only by automatic restore upon wakeup from device OFF mode." {
        _ 17 mbz;
        dpll_ssc_downspread 1 rw type(dpll_ssc_downspread_status) "Control if only low frequency spread is required";
        dpll_ssc_ack 1 ro type(dpll_ssc_ack_status) "Acknowledgement from the DPLL regarding start and stop of Spread Spectrum Clocking feature";
        dpll_ssc_en 1 rw type(dpll_ssc_en_status) "Enable or disable Spread Spectrum Clocking";
        dpll_regm4xen 1 ro type(dpll_regm4xen_status) "Enable the REGM4XEN mode of the DPLL. Please check the DPLL documentation to check when this mode can be enabled.";
        dpll_lpmode_en 1 rw type(dpll_lpmode_en_status) "Set the DPLL in low-power mode. Check the DPLL documentation to see when this can be enabled.";
        _ 1 mbz;
        dpll_driftguard_en 1 rw type(dpll_driftguard_en_status) "This bit allows to enable or disable the automatic recalibration feature of the DPLL. The DPLL will automatically start a recalibration process upon assertion of the DPLL's RECAL flag if this bit is set.";
        _ 5 mbz;
        dpll_en 3 rw type(dpll_en_status) "DPLL control. Upon Warm Reset, the PRCM DPLL control state machine updates this register to reflect MN bypass mode.";
    };

    constants gpmc_freq_update_status width(1) "" {
        GPMC_FREQ_UPDATE_0 = 0 "GPMC is not put automatically into idle during frequency change operation.";
        GPMC_FREQ_UPDATE_1 = 1 "GPMC is put automatically into idle during frequency change operation.";
    };
    
    register cm_shadow_freq_config2_restore addr(base, 0x2C) "Second address map for register. Used only by automatic restore upon wakeup from device OFF mode." {
        _ 24 mbz;
        dpll_core_m5_div 5 rw type(dpll_en_status) "Shadow register forCM_DIV_M5_DPLL_CORE.HSDIVIDER_CLKOUT2_DIV. The main register is automatically loaded with the shadow register value after GPMC IDLE if the CM_SHADOW_FREQ_CONFIG1.FREQ_UPDATE field is set to 1 and GPMC_FREQ_UPDATE is set to 1. Divide value from 1 to 31.";
        clksel_l3 1 rw type(clksel_l3_status) "Shadow register forCM_CLKSEL_CORE.CLKSEL_L3. The main register is automatically loaded with the shadow register value after GPMC IDLE if the CM_SHADOW_FREQ_CONFIG1.FREQ_UPDATE field is set to 1 and GPMC_FREQ_UPDATE is set to 1.";
        clksel_core 1 rw type(clksel_core_status) "Shadow register forCM_CLKSEL_CORE.CLKSEL_CORE. The main register is automatically loaded with the shadow register value after GPMC IDLE if the CM_SHADOW_FREQ_CONFIG1.FREQ_UPDATE field is set to 1 and GPMC_FREQ_UPDATE is set to 1.";
        gpmc_freq_update 1 rw type(gpmc_freq_update_status) "Controls whether or not GPMC has to be put automatically into idle during the frequency change operation.";
    };

    constants dll_reset_status width(1) "" {
        DLL_RESET_0 = 0 "DLL is not reset during the frequency change hardware sequence";
        DLL_RESET_1 = 1 "DLL is reset automatically during the frequency change hardware sequence";
    };

    constants dll_override_status width(1) "" {
        DLL_OVERRIDE_0 = 0 "Lock and code outputs are not overriden";
        DLL_OVERRIDE_1 = 1 "Lock output is overriden to 1 and code output is overriden with a value coming from control module.";
    };
    
    register cm_shadow_freq_config1_restore addr(base, 0x30) "Second address map for register. Used only by automatic restore upon wakeup from device OFF mode." {
        _ 16 rsvd;
        dpll_core_m2_div 5 rw type(dpll_en_status) "Shadow register forCM_DIV_M2_DPLL_CORE.DPLL_CLKOUT_DIV. The main register is automatically loaded with the shadow register value after EMIF IDLE if the FREQ_UPDATE field is set to 1. Divide value from 1 to 31.";
        dpll_core_dpll_en 3 rw type(dpll_en_status) "Shadow register forCM_CLKMODE_DPLL_CORE.DPLL_EN. The main register is automatically loaded with the shadow register value after EMIF IDLE if the FREQ_UPDATE field is set to 1.";
        _ 4 mbz;
        dll_reset 1 rw type(dll_reset_status) "Specify if DLL should be reset or not during the frequency change hardware sequence.";
        dll_override 1 rw type(dll_override_status) "Shadow register forCM_DLL_CTRL.DLL_OVERRIDE.The main register is automatically loaded with the shadow register value after EMIF IDLE if the FREQ_UPDATE field is set to 1.";
        _ 1 mbz;
        freq_update 1 rw "Writing 1 indicates that a new configuration is available. It is automatically cleared by h/w after the configuration has been applied.";
    };

    constants dpll_dcoclkldo_pwdn_status width(1) "" {
        DPLL_DCOCLKLDO_PWDN_0 = 0 "Keep DCOCLKLDO powered even when all dividers in HSDIVIDER are powered down.";
        DPLL_DCOCLKLDO_PWDN_1 = 1 "Automatically power down DCOCLKLDO when all o/ps of HSDIVIDER are powered down.";
    };

    constants auto_dpll_mode_status width(3) "" {
        AUTO_DPLL_MODE_0 = 0 "DPLL auto control disabled";
        AUTO_DPLL_MODE_1 = 1 "The DPLL is automatically put in low-power stop mode when its DPLL generated clocks are not required anymore. It is also restarted automatically.";
        AUTO_DPLL_MODE_2 = 2 "The DPLL is automatically put in fast-relock stop mode when its DPLL generated clocks are not required anymore. It is also restarted automatically.";
        AUTO_DPLL_MODE_3 = 3 "Reserved";
        AUTO_DPLL_MODE_4 = 4 "Reserved";
        AUTO_DPLL_MODE_5 = 5 "The DPLL is automatically put in idle bypass low-power mode when its DPLL generated clocks are not required anymore. It is also restarted automatically.";
        AUTO_DPLL_MODE_6 = 6 "The DPLL is automatically put in idle bypass fast-relock mode when its DPLL generated clocks are not required anymore. It is also restarted automatically.";
        AUTO_DPLL_MODE_7 = 7 "Reserved";
    };
    
    register cm_autoidle_dpll_core_restore addr(base, 0x34) "Second address map for register. Used only by automatic restore upon wakeup from device OFF mode." {
        _ 27 mbz;
        dpll_dcoclkldo_pwdn 1 rw type(dpll_dcoclkldo_pwdn_status) "Allows powering down the DCOCLKLDO o/p of DPLL if all dividers in HSDIVIDER are powered down. PRCM takes care of reenabling this path for either restarting HSDIVIDER o/p or entering bypass mode.";
        _ 1 mbz;
        auto_dpll_mode 3 rw type(auto_dpll_mode_status) "DPLL automatic control.";
    };

    constants clkactivity_mpu_dpll_clk_status width(1) "" {
        CLKACTIVITY_MPU_DPLL_CLK_0_r = 0 "Corresponding clock is definitely gated";
        CLKACTIVITY_MPU_DPLL_CLK_1_r = 1 "Corresponding clock is running or gating/ungating transition is ongoing";
    };

    constants clktrctrl_status width(2) "" {
        CLKTRCTRL_0 = 0 "NO_SLEEP: Sleep transition cannot be initiated. Wakeup transition may however occur.";
        CLKTRCTRL_1_r = 1 "Reserved";
        CLKTRCTRL_2 = 2 "SW_WKUP: Start a software forced wake-up transition on the domain.";
        CLKTRCTRL_3 = 3 "HW_AUTO: Automatic transition is enabled. Sleep and wakeup transition are based upon hardware conditions.";
    };
    
    register cm_mpu_clkstctrl_restore addr(base, 0x38) "Second address map for register. Used only by automatic restore upon wakeup from device OFF mode." {
        _ 23 mbz;
        clkactivity_mpu_dpll_clk 1 ro type(clkactivity_mpu_dpll_clk_status) "This field indicates the state of the MPU_DPLL_CLK clock in the domain. [warm reset insensitive]";
        _ 6 mbz;
        clktrctrl 2 rw type(clktrctrl_status) "Controls the clock state transition of the MPU clock domain.";
    };

    constants idlest_status width(2) "" {
        IDLEST_3_r = 3 "Module is disabled";
        IDLEST_2_r = 2 "Module is in Idle";
        IDLEST_1_r = 1 "Module is performing transition: wakeup, or sleep, or sleep abortion";
        IDLEST_0_r = 0 "Module is fully functional";
    };

    constants modulemode_status width(2) "" {
        MODULEMODE_0 = 0 "Module is disabled by software. OCP configuration port is not accessible.";
        MODULEMODE_1 = 1 "Module is managed automatically by hadware along with CM1 and EMU domain. OCP configuration port is accessible only when EMU domain is on.";
        MODULEMODE_2_r = 2 "Reserved";
        MODULEMODE_3_r = 3 "Reserved";
    };
    
    register cm_cm1_profiling_clkctrl_restore addr(base, 0x3C) "Second address map for register. Used only by automatic restore upon wakeup from device OFF mode. [warm reset insensitive]" {
        _ 14 mbz;
        idlest 2 ro type(idlest_status) "Module idle status";
        _ 14 mbz;
        modulemode 2 rw type(modulemode_status) "Control the way mandatory clocks are managed.";
    };
    
    register cm_dyn_dep_prescal_restore addr(base, 0x40) "Second address map for register. Used only by automatic restore upon wakeup from device OFF mode." {
        _ 26 mbz;
        prescal 6 rw "Time unit is equal to (PRESCAL + 1) L4 clock cycles.";
    };
};